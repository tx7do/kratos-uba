syntax = "proto3";

package report.service.v1;
option go_package = "kratos-bi/gen/api/go/report/service/v1;v1";

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";

import "common/pagination/pagination.proto";

// 变量的命名一律使用小驼峰命名法，例如：firstName、lastName等。

// 报告服务
service ReportService {
  // 查询报告列表
  rpc ListReport (pagination.PagingRequest) returns (ListReportResponse) {}

  // 查询报告详情
  rpc GetReport (GetReportRequest) returns (Report) {}

  // 创建报告
  rpc CreateReport (CreateReportRequest) returns (Report) {}

  // 更新报告
  rpc UpdateReport (UpdateReportRequest) returns (Report) {}

  // 删除报告
  rpc DeleteReport (DeleteReportRequest) returns (google.protobuf.Empty) {}
}

message UserReport {
  string appId = 1;
  string distinctId = 2;
  string tableId = 3;
  string ip = 4;
  int32 reportType = 5;
  string debug = 6;
  bytes requestData = 7;
  string reportTime = 8;
  string consumptionTime = 9;
  string eventName = 10;
  int64 offset = 11;
}

message EventReport {
  string accountId = 1;
  string distinctId = 2;
  string userId = 3;

  string partEvent = 4;
  string partDate = 5;
  string mpPlatform = 6;
  string libVersion = 7;

  string os = 8;
  string osVersion = 20;

  string screenWidth = 9;// 屏幕宽
  string screenHeight = 11;// 屏幕高

  string deviceId = 12;
  string networkType = 13;
  string deviceModel = 14;

  string countryCode = 10; // 国家
  string province = 16;// 省
  string city = 15;// 城市

  string lib = 17;
  string scene = 18;
  string manufacturer = 19;
  string ip = 22;
  string tableId = 23;
  map<string, string> properties = 24;
}

// 报告
message Report {
  uint32 id = 1 [(gnostic.openapi.v3.property) = {description: "报告ID"}]; // 报告ID
}

// 获取报告列表 - 答复
message ListReportResponse {
  repeated Report items = 1;
  int32 total = 2;
}

// 获取报告数据 - 请求
message GetReportRequest {
  uint32 id = 1;
}

// 创建报告 - 请求
message CreateReportRequest {
  Report user = 1;
  uint32 operatorId = 2;
}

// 更新报告 - 请求
message UpdateReportRequest {
  uint32 id = 1;
  Report user = 2;
  uint32 operatorId = 3;
}

// 删除报告 - 请求
message DeleteReportRequest {
  uint32 id = 1;
  uint32 operatorId = 2;
}
