// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/report/service/internal/data/ent/acceptancestatus"
	"kratos-uba/app/report/service/internal/data/ent/predicate"
	"kratos-uba/app/report/service/internal/data/ent/realtimewarehousing"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAcceptanceStatus    = "AcceptanceStatus"
	TypeRealtimeWarehousing = "RealtimeWarehousing"
)

// AcceptanceStatusMutation represents an operation that mutates the AcceptanceStatus nodes in the graph.
type AcceptanceStatusMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	create_time    *int64
	addcreate_time *int64
	update_time    *int64
	addupdate_time *int64
	delete_time    *int64
	adddelete_time *int64
	name           *string
	status         *string
	app_id         *string
	app_key        *string
	remark         *string
	creator_id     *uint32
	addcreator_id  *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*AcceptanceStatus, error)
	predicates     []predicate.AcceptanceStatus
}

var _ ent.Mutation = (*AcceptanceStatusMutation)(nil)

// acceptancestatusOption allows management of the mutation configuration using functional options.
type acceptancestatusOption func(*AcceptanceStatusMutation)

// newAcceptanceStatusMutation creates new mutation for the AcceptanceStatus entity.
func newAcceptanceStatusMutation(c config, op Op, opts ...acceptancestatusOption) *AcceptanceStatusMutation {
	m := &AcceptanceStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeAcceptanceStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAcceptanceStatusID sets the ID field of the mutation.
func withAcceptanceStatusID(id uint32) acceptancestatusOption {
	return func(m *AcceptanceStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *AcceptanceStatus
		)
		m.oldValue = func(ctx context.Context) (*AcceptanceStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AcceptanceStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAcceptanceStatus sets the old AcceptanceStatus of the mutation.
func withAcceptanceStatus(node *AcceptanceStatus) acceptancestatusOption {
	return func(m *AcceptanceStatusMutation) {
		m.oldValue = func(context.Context) (*AcceptanceStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AcceptanceStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AcceptanceStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AcceptanceStatus entities.
func (m *AcceptanceStatusMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AcceptanceStatusMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AcceptanceStatusMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AcceptanceStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AcceptanceStatusMutation) SetCreateTime(i int64) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AcceptanceStatusMutation) CreateTime() (r int64, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldCreateTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *AcceptanceStatusMutation) AddCreateTime(i int64) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *AcceptanceStatusMutation) AddedCreateTime() (r int64, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *AcceptanceStatusMutation) ClearCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	m.clearedFields[acceptancestatus.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AcceptanceStatusMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	delete(m.clearedFields, acceptancestatus.FieldCreateTime)
}

// SetUpdateTime sets the "update_time" field.
func (m *AcceptanceStatusMutation) SetUpdateTime(i int64) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AcceptanceStatusMutation) UpdateTime() (r int64, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldUpdateTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *AcceptanceStatusMutation) AddUpdateTime(i int64) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *AcceptanceStatusMutation) AddedUpdateTime() (r int64, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateTime clears the value of the "update_time" field.
func (m *AcceptanceStatusMutation) ClearUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
	m.clearedFields[acceptancestatus.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "update_time" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AcceptanceStatusMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
	delete(m.clearedFields, acceptancestatus.FieldUpdateTime)
}

// SetDeleteTime sets the "delete_time" field.
func (m *AcceptanceStatusMutation) SetDeleteTime(i int64) {
	m.delete_time = &i
	m.adddelete_time = nil
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *AcceptanceStatusMutation) DeleteTime() (r int64, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldDeleteTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// AddDeleteTime adds i to the "delete_time" field.
func (m *AcceptanceStatusMutation) AddDeleteTime(i int64) {
	if m.adddelete_time != nil {
		*m.adddelete_time += i
	} else {
		m.adddelete_time = &i
	}
}

// AddedDeleteTime returns the value that was added to the "delete_time" field in this mutation.
func (m *AcceptanceStatusMutation) AddedDeleteTime() (r int64, exists bool) {
	v := m.adddelete_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *AcceptanceStatusMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.adddelete_time = nil
	m.clearedFields[acceptancestatus.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *AcceptanceStatusMutation) ResetDeleteTime() {
	m.delete_time = nil
	m.adddelete_time = nil
	delete(m.clearedFields, acceptancestatus.FieldDeleteTime)
}

// SetName sets the "name" field.
func (m *AcceptanceStatusMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AcceptanceStatusMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *AcceptanceStatusMutation) ClearName() {
	m.name = nil
	m.clearedFields[acceptancestatus.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) NameCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *AcceptanceStatusMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, acceptancestatus.FieldName)
}

// SetStatus sets the "status" field.
func (m *AcceptanceStatusMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *AcceptanceStatusMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldStatus(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *AcceptanceStatusMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[acceptancestatus.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) StatusCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *AcceptanceStatusMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, acceptancestatus.FieldStatus)
}

// SetAppID sets the "app_id" field.
func (m *AcceptanceStatusMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AcceptanceStatusMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldAppID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AcceptanceStatusMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[acceptancestatus.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AcceptanceStatusMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, acceptancestatus.FieldAppID)
}

// SetAppKey sets the "app_key" field.
func (m *AcceptanceStatusMutation) SetAppKey(s string) {
	m.app_key = &s
}

// AppKey returns the value of the "app_key" field in the mutation.
func (m *AcceptanceStatusMutation) AppKey() (r string, exists bool) {
	v := m.app_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAppKey returns the old "app_key" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldAppKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppKey: %w", err)
	}
	return oldValue.AppKey, nil
}

// ClearAppKey clears the value of the "app_key" field.
func (m *AcceptanceStatusMutation) ClearAppKey() {
	m.app_key = nil
	m.clearedFields[acceptancestatus.FieldAppKey] = struct{}{}
}

// AppKeyCleared returns if the "app_key" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) AppKeyCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldAppKey]
	return ok
}

// ResetAppKey resets all changes to the "app_key" field.
func (m *AcceptanceStatusMutation) ResetAppKey() {
	m.app_key = nil
	delete(m.clearedFields, acceptancestatus.FieldAppKey)
}

// SetRemark sets the "remark" field.
func (m *AcceptanceStatusMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *AcceptanceStatusMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *AcceptanceStatusMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[acceptancestatus.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *AcceptanceStatusMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, acceptancestatus.FieldRemark)
}

// SetCreatorID sets the "creator_id" field.
func (m *AcceptanceStatusMutation) SetCreatorID(u uint32) {
	m.creator_id = &u
	m.addcreator_id = nil
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *AcceptanceStatusMutation) CreatorID() (r uint32, exists bool) {
	v := m.creator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldCreatorID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// AddCreatorID adds u to the "creator_id" field.
func (m *AcceptanceStatusMutation) AddCreatorID(u int32) {
	if m.addcreator_id != nil {
		*m.addcreator_id += u
	} else {
		m.addcreator_id = &u
	}
}

// AddedCreatorID returns the value that was added to the "creator_id" field in this mutation.
func (m *AcceptanceStatusMutation) AddedCreatorID() (r int32, exists bool) {
	v := m.addcreator_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatorID clears the value of the "creator_id" field.
func (m *AcceptanceStatusMutation) ClearCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
	m.clearedFields[acceptancestatus.FieldCreatorID] = struct{}{}
}

// CreatorIDCleared returns if the "creator_id" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) CreatorIDCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldCreatorID]
	return ok
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *AcceptanceStatusMutation) ResetCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
	delete(m.clearedFields, acceptancestatus.FieldCreatorID)
}

// Where appends a list predicates to the AcceptanceStatusMutation builder.
func (m *AcceptanceStatusMutation) Where(ps ...predicate.AcceptanceStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AcceptanceStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AcceptanceStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AcceptanceStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AcceptanceStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AcceptanceStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AcceptanceStatus).
func (m *AcceptanceStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AcceptanceStatusMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, acceptancestatus.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, acceptancestatus.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, acceptancestatus.FieldDeleteTime)
	}
	if m.name != nil {
		fields = append(fields, acceptancestatus.FieldName)
	}
	if m.status != nil {
		fields = append(fields, acceptancestatus.FieldStatus)
	}
	if m.app_id != nil {
		fields = append(fields, acceptancestatus.FieldAppID)
	}
	if m.app_key != nil {
		fields = append(fields, acceptancestatus.FieldAppKey)
	}
	if m.remark != nil {
		fields = append(fields, acceptancestatus.FieldRemark)
	}
	if m.creator_id != nil {
		fields = append(fields, acceptancestatus.FieldCreatorID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AcceptanceStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case acceptancestatus.FieldCreateTime:
		return m.CreateTime()
	case acceptancestatus.FieldUpdateTime:
		return m.UpdateTime()
	case acceptancestatus.FieldDeleteTime:
		return m.DeleteTime()
	case acceptancestatus.FieldName:
		return m.Name()
	case acceptancestatus.FieldStatus:
		return m.Status()
	case acceptancestatus.FieldAppID:
		return m.AppID()
	case acceptancestatus.FieldAppKey:
		return m.AppKey()
	case acceptancestatus.FieldRemark:
		return m.Remark()
	case acceptancestatus.FieldCreatorID:
		return m.CreatorID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AcceptanceStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case acceptancestatus.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case acceptancestatus.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case acceptancestatus.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case acceptancestatus.FieldName:
		return m.OldName(ctx)
	case acceptancestatus.FieldStatus:
		return m.OldStatus(ctx)
	case acceptancestatus.FieldAppID:
		return m.OldAppID(ctx)
	case acceptancestatus.FieldAppKey:
		return m.OldAppKey(ctx)
	case acceptancestatus.FieldRemark:
		return m.OldRemark(ctx)
	case acceptancestatus.FieldCreatorID:
		return m.OldCreatorID(ctx)
	}
	return nil, fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcceptanceStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case acceptancestatus.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case acceptancestatus.FieldUpdateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case acceptancestatus.FieldDeleteTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case acceptancestatus.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case acceptancestatus.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case acceptancestatus.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case acceptancestatus.FieldAppKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppKey(v)
		return nil
	case acceptancestatus.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case acceptancestatus.FieldCreatorID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AcceptanceStatusMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_time != nil {
		fields = append(fields, acceptancestatus.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, acceptancestatus.FieldUpdateTime)
	}
	if m.adddelete_time != nil {
		fields = append(fields, acceptancestatus.FieldDeleteTime)
	}
	if m.addcreator_id != nil {
		fields = append(fields, acceptancestatus.FieldCreatorID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AcceptanceStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case acceptancestatus.FieldCreateTime:
		return m.AddedCreateTime()
	case acceptancestatus.FieldUpdateTime:
		return m.AddedUpdateTime()
	case acceptancestatus.FieldDeleteTime:
		return m.AddedDeleteTime()
	case acceptancestatus.FieldCreatorID:
		return m.AddedCreatorID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcceptanceStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case acceptancestatus.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case acceptancestatus.FieldUpdateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	case acceptancestatus.FieldDeleteTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteTime(v)
		return nil
	case acceptancestatus.FieldCreatorID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AcceptanceStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(acceptancestatus.FieldCreateTime) {
		fields = append(fields, acceptancestatus.FieldCreateTime)
	}
	if m.FieldCleared(acceptancestatus.FieldUpdateTime) {
		fields = append(fields, acceptancestatus.FieldUpdateTime)
	}
	if m.FieldCleared(acceptancestatus.FieldDeleteTime) {
		fields = append(fields, acceptancestatus.FieldDeleteTime)
	}
	if m.FieldCleared(acceptancestatus.FieldName) {
		fields = append(fields, acceptancestatus.FieldName)
	}
	if m.FieldCleared(acceptancestatus.FieldStatus) {
		fields = append(fields, acceptancestatus.FieldStatus)
	}
	if m.FieldCleared(acceptancestatus.FieldAppID) {
		fields = append(fields, acceptancestatus.FieldAppID)
	}
	if m.FieldCleared(acceptancestatus.FieldAppKey) {
		fields = append(fields, acceptancestatus.FieldAppKey)
	}
	if m.FieldCleared(acceptancestatus.FieldRemark) {
		fields = append(fields, acceptancestatus.FieldRemark)
	}
	if m.FieldCleared(acceptancestatus.FieldCreatorID) {
		fields = append(fields, acceptancestatus.FieldCreatorID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AcceptanceStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AcceptanceStatusMutation) ClearField(name string) error {
	switch name {
	case acceptancestatus.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case acceptancestatus.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case acceptancestatus.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case acceptancestatus.FieldName:
		m.ClearName()
		return nil
	case acceptancestatus.FieldStatus:
		m.ClearStatus()
		return nil
	case acceptancestatus.FieldAppID:
		m.ClearAppID()
		return nil
	case acceptancestatus.FieldAppKey:
		m.ClearAppKey()
		return nil
	case acceptancestatus.FieldRemark:
		m.ClearRemark()
		return nil
	case acceptancestatus.FieldCreatorID:
		m.ClearCreatorID()
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AcceptanceStatusMutation) ResetField(name string) error {
	switch name {
	case acceptancestatus.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case acceptancestatus.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case acceptancestatus.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case acceptancestatus.FieldName:
		m.ResetName()
		return nil
	case acceptancestatus.FieldStatus:
		m.ResetStatus()
		return nil
	case acceptancestatus.FieldAppID:
		m.ResetAppID()
		return nil
	case acceptancestatus.FieldAppKey:
		m.ResetAppKey()
		return nil
	case acceptancestatus.FieldRemark:
		m.ResetRemark()
		return nil
	case acceptancestatus.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AcceptanceStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AcceptanceStatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AcceptanceStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AcceptanceStatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AcceptanceStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AcceptanceStatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AcceptanceStatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AcceptanceStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AcceptanceStatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AcceptanceStatus edge %s", name)
}

// RealtimeWarehousingMutation represents an operation that mutates the RealtimeWarehousing nodes in the graph.
type RealtimeWarehousingMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	create_time    *int64
	addcreate_time *int64
	update_time    *int64
	addupdate_time *int64
	delete_time    *int64
	adddelete_time *int64
	name           *string
	status         *string
	app_id         *string
	app_key        *string
	remark         *string
	creator_id     *uint32
	addcreator_id  *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*RealtimeWarehousing, error)
	predicates     []predicate.RealtimeWarehousing
}

var _ ent.Mutation = (*RealtimeWarehousingMutation)(nil)

// realtimewarehousingOption allows management of the mutation configuration using functional options.
type realtimewarehousingOption func(*RealtimeWarehousingMutation)

// newRealtimeWarehousingMutation creates new mutation for the RealtimeWarehousing entity.
func newRealtimeWarehousingMutation(c config, op Op, opts ...realtimewarehousingOption) *RealtimeWarehousingMutation {
	m := &RealtimeWarehousingMutation{
		config:        c,
		op:            op,
		typ:           TypeRealtimeWarehousing,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRealtimeWarehousingID sets the ID field of the mutation.
func withRealtimeWarehousingID(id uint32) realtimewarehousingOption {
	return func(m *RealtimeWarehousingMutation) {
		var (
			err   error
			once  sync.Once
			value *RealtimeWarehousing
		)
		m.oldValue = func(ctx context.Context) (*RealtimeWarehousing, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RealtimeWarehousing.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRealtimeWarehousing sets the old RealtimeWarehousing of the mutation.
func withRealtimeWarehousing(node *RealtimeWarehousing) realtimewarehousingOption {
	return func(m *RealtimeWarehousingMutation) {
		m.oldValue = func(context.Context) (*RealtimeWarehousing, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RealtimeWarehousingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RealtimeWarehousingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RealtimeWarehousing entities.
func (m *RealtimeWarehousingMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RealtimeWarehousingMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RealtimeWarehousingMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RealtimeWarehousing.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RealtimeWarehousingMutation) SetCreateTime(i int64) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RealtimeWarehousingMutation) CreateTime() (r int64, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldCreateTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *RealtimeWarehousingMutation) AddCreateTime(i int64) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *RealtimeWarehousingMutation) AddedCreateTime() (r int64, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *RealtimeWarehousingMutation) ClearCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	m.clearedFields[realtimewarehousing.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RealtimeWarehousingMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	delete(m.clearedFields, realtimewarehousing.FieldCreateTime)
}

// SetUpdateTime sets the "update_time" field.
func (m *RealtimeWarehousingMutation) SetUpdateTime(i int64) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RealtimeWarehousingMutation) UpdateTime() (r int64, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldUpdateTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *RealtimeWarehousingMutation) AddUpdateTime(i int64) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *RealtimeWarehousingMutation) AddedUpdateTime() (r int64, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateTime clears the value of the "update_time" field.
func (m *RealtimeWarehousingMutation) ClearUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
	m.clearedFields[realtimewarehousing.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "update_time" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RealtimeWarehousingMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
	delete(m.clearedFields, realtimewarehousing.FieldUpdateTime)
}

// SetDeleteTime sets the "delete_time" field.
func (m *RealtimeWarehousingMutation) SetDeleteTime(i int64) {
	m.delete_time = &i
	m.adddelete_time = nil
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *RealtimeWarehousingMutation) DeleteTime() (r int64, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldDeleteTime(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// AddDeleteTime adds i to the "delete_time" field.
func (m *RealtimeWarehousingMutation) AddDeleteTime(i int64) {
	if m.adddelete_time != nil {
		*m.adddelete_time += i
	} else {
		m.adddelete_time = &i
	}
}

// AddedDeleteTime returns the value that was added to the "delete_time" field in this mutation.
func (m *RealtimeWarehousingMutation) AddedDeleteTime() (r int64, exists bool) {
	v := m.adddelete_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *RealtimeWarehousingMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.adddelete_time = nil
	m.clearedFields[realtimewarehousing.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *RealtimeWarehousingMutation) ResetDeleteTime() {
	m.delete_time = nil
	m.adddelete_time = nil
	delete(m.clearedFields, realtimewarehousing.FieldDeleteTime)
}

// SetName sets the "name" field.
func (m *RealtimeWarehousingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RealtimeWarehousingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *RealtimeWarehousingMutation) ClearName() {
	m.name = nil
	m.clearedFields[realtimewarehousing.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) NameCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *RealtimeWarehousingMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, realtimewarehousing.FieldName)
}

// SetStatus sets the "status" field.
func (m *RealtimeWarehousingMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *RealtimeWarehousingMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldStatus(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *RealtimeWarehousingMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[realtimewarehousing.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) StatusCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *RealtimeWarehousingMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, realtimewarehousing.FieldStatus)
}

// SetAppID sets the "app_id" field.
func (m *RealtimeWarehousingMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *RealtimeWarehousingMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldAppID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *RealtimeWarehousingMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[realtimewarehousing.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *RealtimeWarehousingMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, realtimewarehousing.FieldAppID)
}

// SetAppKey sets the "app_key" field.
func (m *RealtimeWarehousingMutation) SetAppKey(s string) {
	m.app_key = &s
}

// AppKey returns the value of the "app_key" field in the mutation.
func (m *RealtimeWarehousingMutation) AppKey() (r string, exists bool) {
	v := m.app_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAppKey returns the old "app_key" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldAppKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppKey: %w", err)
	}
	return oldValue.AppKey, nil
}

// ClearAppKey clears the value of the "app_key" field.
func (m *RealtimeWarehousingMutation) ClearAppKey() {
	m.app_key = nil
	m.clearedFields[realtimewarehousing.FieldAppKey] = struct{}{}
}

// AppKeyCleared returns if the "app_key" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) AppKeyCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldAppKey]
	return ok
}

// ResetAppKey resets all changes to the "app_key" field.
func (m *RealtimeWarehousingMutation) ResetAppKey() {
	m.app_key = nil
	delete(m.clearedFields, realtimewarehousing.FieldAppKey)
}

// SetRemark sets the "remark" field.
func (m *RealtimeWarehousingMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *RealtimeWarehousingMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *RealtimeWarehousingMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[realtimewarehousing.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *RealtimeWarehousingMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, realtimewarehousing.FieldRemark)
}

// SetCreatorID sets the "creator_id" field.
func (m *RealtimeWarehousingMutation) SetCreatorID(u uint32) {
	m.creator_id = &u
	m.addcreator_id = nil
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *RealtimeWarehousingMutation) CreatorID() (r uint32, exists bool) {
	v := m.creator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldCreatorID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// AddCreatorID adds u to the "creator_id" field.
func (m *RealtimeWarehousingMutation) AddCreatorID(u int32) {
	if m.addcreator_id != nil {
		*m.addcreator_id += u
	} else {
		m.addcreator_id = &u
	}
}

// AddedCreatorID returns the value that was added to the "creator_id" field in this mutation.
func (m *RealtimeWarehousingMutation) AddedCreatorID() (r int32, exists bool) {
	v := m.addcreator_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatorID clears the value of the "creator_id" field.
func (m *RealtimeWarehousingMutation) ClearCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
	m.clearedFields[realtimewarehousing.FieldCreatorID] = struct{}{}
}

// CreatorIDCleared returns if the "creator_id" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) CreatorIDCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldCreatorID]
	return ok
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *RealtimeWarehousingMutation) ResetCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
	delete(m.clearedFields, realtimewarehousing.FieldCreatorID)
}

// Where appends a list predicates to the RealtimeWarehousingMutation builder.
func (m *RealtimeWarehousingMutation) Where(ps ...predicate.RealtimeWarehousing) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RealtimeWarehousingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RealtimeWarehousingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RealtimeWarehousing, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RealtimeWarehousingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RealtimeWarehousingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RealtimeWarehousing).
func (m *RealtimeWarehousingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RealtimeWarehousingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, realtimewarehousing.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, realtimewarehousing.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, realtimewarehousing.FieldDeleteTime)
	}
	if m.name != nil {
		fields = append(fields, realtimewarehousing.FieldName)
	}
	if m.status != nil {
		fields = append(fields, realtimewarehousing.FieldStatus)
	}
	if m.app_id != nil {
		fields = append(fields, realtimewarehousing.FieldAppID)
	}
	if m.app_key != nil {
		fields = append(fields, realtimewarehousing.FieldAppKey)
	}
	if m.remark != nil {
		fields = append(fields, realtimewarehousing.FieldRemark)
	}
	if m.creator_id != nil {
		fields = append(fields, realtimewarehousing.FieldCreatorID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RealtimeWarehousingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		return m.CreateTime()
	case realtimewarehousing.FieldUpdateTime:
		return m.UpdateTime()
	case realtimewarehousing.FieldDeleteTime:
		return m.DeleteTime()
	case realtimewarehousing.FieldName:
		return m.Name()
	case realtimewarehousing.FieldStatus:
		return m.Status()
	case realtimewarehousing.FieldAppID:
		return m.AppID()
	case realtimewarehousing.FieldAppKey:
		return m.AppKey()
	case realtimewarehousing.FieldRemark:
		return m.Remark()
	case realtimewarehousing.FieldCreatorID:
		return m.CreatorID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RealtimeWarehousingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case realtimewarehousing.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case realtimewarehousing.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case realtimewarehousing.FieldName:
		return m.OldName(ctx)
	case realtimewarehousing.FieldStatus:
		return m.OldStatus(ctx)
	case realtimewarehousing.FieldAppID:
		return m.OldAppID(ctx)
	case realtimewarehousing.FieldAppKey:
		return m.OldAppKey(ctx)
	case realtimewarehousing.FieldRemark:
		return m.OldRemark(ctx)
	case realtimewarehousing.FieldCreatorID:
		return m.OldCreatorID(ctx)
	}
	return nil, fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtimeWarehousingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case realtimewarehousing.FieldUpdateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case realtimewarehousing.FieldDeleteTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case realtimewarehousing.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case realtimewarehousing.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case realtimewarehousing.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case realtimewarehousing.FieldAppKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppKey(v)
		return nil
	case realtimewarehousing.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case realtimewarehousing.FieldCreatorID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RealtimeWarehousingMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_time != nil {
		fields = append(fields, realtimewarehousing.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, realtimewarehousing.FieldUpdateTime)
	}
	if m.adddelete_time != nil {
		fields = append(fields, realtimewarehousing.FieldDeleteTime)
	}
	if m.addcreator_id != nil {
		fields = append(fields, realtimewarehousing.FieldCreatorID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RealtimeWarehousingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		return m.AddedCreateTime()
	case realtimewarehousing.FieldUpdateTime:
		return m.AddedUpdateTime()
	case realtimewarehousing.FieldDeleteTime:
		return m.AddedDeleteTime()
	case realtimewarehousing.FieldCreatorID:
		return m.AddedCreatorID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtimeWarehousingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case realtimewarehousing.FieldUpdateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	case realtimewarehousing.FieldDeleteTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteTime(v)
		return nil
	case realtimewarehousing.FieldCreatorID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RealtimeWarehousingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(realtimewarehousing.FieldCreateTime) {
		fields = append(fields, realtimewarehousing.FieldCreateTime)
	}
	if m.FieldCleared(realtimewarehousing.FieldUpdateTime) {
		fields = append(fields, realtimewarehousing.FieldUpdateTime)
	}
	if m.FieldCleared(realtimewarehousing.FieldDeleteTime) {
		fields = append(fields, realtimewarehousing.FieldDeleteTime)
	}
	if m.FieldCleared(realtimewarehousing.FieldName) {
		fields = append(fields, realtimewarehousing.FieldName)
	}
	if m.FieldCleared(realtimewarehousing.FieldStatus) {
		fields = append(fields, realtimewarehousing.FieldStatus)
	}
	if m.FieldCleared(realtimewarehousing.FieldAppID) {
		fields = append(fields, realtimewarehousing.FieldAppID)
	}
	if m.FieldCleared(realtimewarehousing.FieldAppKey) {
		fields = append(fields, realtimewarehousing.FieldAppKey)
	}
	if m.FieldCleared(realtimewarehousing.FieldRemark) {
		fields = append(fields, realtimewarehousing.FieldRemark)
	}
	if m.FieldCleared(realtimewarehousing.FieldCreatorID) {
		fields = append(fields, realtimewarehousing.FieldCreatorID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RealtimeWarehousingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RealtimeWarehousingMutation) ClearField(name string) error {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case realtimewarehousing.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case realtimewarehousing.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case realtimewarehousing.FieldName:
		m.ClearName()
		return nil
	case realtimewarehousing.FieldStatus:
		m.ClearStatus()
		return nil
	case realtimewarehousing.FieldAppID:
		m.ClearAppID()
		return nil
	case realtimewarehousing.FieldAppKey:
		m.ClearAppKey()
		return nil
	case realtimewarehousing.FieldRemark:
		m.ClearRemark()
		return nil
	case realtimewarehousing.FieldCreatorID:
		m.ClearCreatorID()
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RealtimeWarehousingMutation) ResetField(name string) error {
	switch name {
	case realtimewarehousing.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case realtimewarehousing.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case realtimewarehousing.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case realtimewarehousing.FieldName:
		m.ResetName()
		return nil
	case realtimewarehousing.FieldStatus:
		m.ResetStatus()
		return nil
	case realtimewarehousing.FieldAppID:
		m.ResetAppID()
		return nil
	case realtimewarehousing.FieldAppKey:
		m.ResetAppKey()
		return nil
	case realtimewarehousing.FieldRemark:
		m.ResetRemark()
		return nil
	case realtimewarehousing.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RealtimeWarehousingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RealtimeWarehousingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RealtimeWarehousingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RealtimeWarehousingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RealtimeWarehousingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RealtimeWarehousingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RealtimeWarehousingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RealtimeWarehousing unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RealtimeWarehousingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RealtimeWarehousing edge %s", name)
}
