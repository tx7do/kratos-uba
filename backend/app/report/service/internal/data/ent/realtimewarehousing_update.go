// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/report/service/internal/data/ent/predicate"
	"kratos-bi/app/report/service/internal/data/ent/realtimewarehousing"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealtimeWarehousingUpdate is the builder for updating RealtimeWarehousing entities.
type RealtimeWarehousingUpdate struct {
	config
	hooks     []Hook
	mutation  *RealtimeWarehousingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RealtimeWarehousingUpdate builder.
func (rwu *RealtimeWarehousingUpdate) Where(ps ...predicate.RealtimeWarehousing) *RealtimeWarehousingUpdate {
	rwu.mutation.Where(ps...)
	return rwu
}

// SetUpdateTime sets the "update_time" field.
func (rwu *RealtimeWarehousingUpdate) SetUpdateTime(i int64) *RealtimeWarehousingUpdate {
	rwu.mutation.ResetUpdateTime()
	rwu.mutation.SetUpdateTime(i)
	return rwu
}

// AddUpdateTime adds i to the "update_time" field.
func (rwu *RealtimeWarehousingUpdate) AddUpdateTime(i int64) *RealtimeWarehousingUpdate {
	rwu.mutation.AddUpdateTime(i)
	return rwu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (rwu *RealtimeWarehousingUpdate) ClearUpdateTime() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearUpdateTime()
	return rwu
}

// SetDeleteTime sets the "delete_time" field.
func (rwu *RealtimeWarehousingUpdate) SetDeleteTime(i int64) *RealtimeWarehousingUpdate {
	rwu.mutation.ResetDeleteTime()
	rwu.mutation.SetDeleteTime(i)
	return rwu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableDeleteTime(i *int64) *RealtimeWarehousingUpdate {
	if i != nil {
		rwu.SetDeleteTime(*i)
	}
	return rwu
}

// AddDeleteTime adds i to the "delete_time" field.
func (rwu *RealtimeWarehousingUpdate) AddDeleteTime(i int64) *RealtimeWarehousingUpdate {
	rwu.mutation.AddDeleteTime(i)
	return rwu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (rwu *RealtimeWarehousingUpdate) ClearDeleteTime() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearDeleteTime()
	return rwu
}

// SetName sets the "name" field.
func (rwu *RealtimeWarehousingUpdate) SetName(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetName(s)
	return rwu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableName(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetName(*s)
	}
	return rwu
}

// ClearName clears the value of the "name" field.
func (rwu *RealtimeWarehousingUpdate) ClearName() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearName()
	return rwu
}

// SetStatus sets the "status" field.
func (rwu *RealtimeWarehousingUpdate) SetStatus(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetStatus(s)
	return rwu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableStatus(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetStatus(*s)
	}
	return rwu
}

// ClearStatus clears the value of the "status" field.
func (rwu *RealtimeWarehousingUpdate) ClearStatus() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearStatus()
	return rwu
}

// SetAppID sets the "app_id" field.
func (rwu *RealtimeWarehousingUpdate) SetAppID(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetAppID(s)
	return rwu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableAppID(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetAppID(*s)
	}
	return rwu
}

// ClearAppID clears the value of the "app_id" field.
func (rwu *RealtimeWarehousingUpdate) ClearAppID() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearAppID()
	return rwu
}

// SetAppKey sets the "app_key" field.
func (rwu *RealtimeWarehousingUpdate) SetAppKey(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetAppKey(s)
	return rwu
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableAppKey(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetAppKey(*s)
	}
	return rwu
}

// ClearAppKey clears the value of the "app_key" field.
func (rwu *RealtimeWarehousingUpdate) ClearAppKey() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearAppKey()
	return rwu
}

// SetRemark sets the "remark" field.
func (rwu *RealtimeWarehousingUpdate) SetRemark(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetRemark(s)
	return rwu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableRemark(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetRemark(*s)
	}
	return rwu
}

// ClearRemark clears the value of the "remark" field.
func (rwu *RealtimeWarehousingUpdate) ClearRemark() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearRemark()
	return rwu
}

// SetCreatorID sets the "creator_id" field.
func (rwu *RealtimeWarehousingUpdate) SetCreatorID(u uint32) *RealtimeWarehousingUpdate {
	rwu.mutation.ResetCreatorID()
	rwu.mutation.SetCreatorID(u)
	return rwu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableCreatorID(u *uint32) *RealtimeWarehousingUpdate {
	if u != nil {
		rwu.SetCreatorID(*u)
	}
	return rwu
}

// AddCreatorID adds u to the "creator_id" field.
func (rwu *RealtimeWarehousingUpdate) AddCreatorID(u int32) *RealtimeWarehousingUpdate {
	rwu.mutation.AddCreatorID(u)
	return rwu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (rwu *RealtimeWarehousingUpdate) ClearCreatorID() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearCreatorID()
	return rwu
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwu *RealtimeWarehousingUpdate) Mutation() *RealtimeWarehousingMutation {
	return rwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rwu *RealtimeWarehousingUpdate) Save(ctx context.Context) (int, error) {
	rwu.defaults()
	return withHooks[int, RealtimeWarehousingMutation](ctx, rwu.sqlSave, rwu.mutation, rwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwu *RealtimeWarehousingUpdate) SaveX(ctx context.Context) int {
	affected, err := rwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rwu *RealtimeWarehousingUpdate) Exec(ctx context.Context) error {
	_, err := rwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwu *RealtimeWarehousingUpdate) ExecX(ctx context.Context) {
	if err := rwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwu *RealtimeWarehousingUpdate) defaults() {
	if _, ok := rwu.mutation.UpdateTime(); !ok && !rwu.mutation.UpdateTimeCleared() {
		v := realtimewarehousing.UpdateDefaultUpdateTime()
		rwu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwu *RealtimeWarehousingUpdate) check() error {
	if v, ok := rwu.mutation.Name(); ok {
		if err := realtimewarehousing.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rwu *RealtimeWarehousingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RealtimeWarehousingUpdate {
	rwu.modifiers = append(rwu.modifiers, modifiers...)
	return rwu
}

func (rwu *RealtimeWarehousingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(realtimewarehousing.Table, realtimewarehousing.Columns, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeUint32))
	if ps := rwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rwu.mutation.CreateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := rwu.mutation.UpdateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := rwu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(realtimewarehousing.FieldUpdateTime, field.TypeInt64, value)
	}
	if rwu.mutation.UpdateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := rwu.mutation.DeleteTime(); ok {
		_spec.SetField(realtimewarehousing.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rwu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(realtimewarehousing.FieldDeleteTime, field.TypeInt64, value)
	}
	if rwu.mutation.DeleteTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := rwu.mutation.Name(); ok {
		_spec.SetField(realtimewarehousing.FieldName, field.TypeString, value)
	}
	if rwu.mutation.NameCleared() {
		_spec.ClearField(realtimewarehousing.FieldName, field.TypeString)
	}
	if value, ok := rwu.mutation.Status(); ok {
		_spec.SetField(realtimewarehousing.FieldStatus, field.TypeString, value)
	}
	if rwu.mutation.StatusCleared() {
		_spec.ClearField(realtimewarehousing.FieldStatus, field.TypeString)
	}
	if value, ok := rwu.mutation.AppID(); ok {
		_spec.SetField(realtimewarehousing.FieldAppID, field.TypeString, value)
	}
	if rwu.mutation.AppIDCleared() {
		_spec.ClearField(realtimewarehousing.FieldAppID, field.TypeString)
	}
	if value, ok := rwu.mutation.AppKey(); ok {
		_spec.SetField(realtimewarehousing.FieldAppKey, field.TypeString, value)
	}
	if rwu.mutation.AppKeyCleared() {
		_spec.ClearField(realtimewarehousing.FieldAppKey, field.TypeString)
	}
	if value, ok := rwu.mutation.Remark(); ok {
		_spec.SetField(realtimewarehousing.FieldRemark, field.TypeString, value)
	}
	if rwu.mutation.RemarkCleared() {
		_spec.ClearField(realtimewarehousing.FieldRemark, field.TypeString)
	}
	if value, ok := rwu.mutation.CreatorID(); ok {
		_spec.SetField(realtimewarehousing.FieldCreatorID, field.TypeUint32, value)
	}
	if value, ok := rwu.mutation.AddedCreatorID(); ok {
		_spec.AddField(realtimewarehousing.FieldCreatorID, field.TypeUint32, value)
	}
	if rwu.mutation.CreatorIDCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreatorID, field.TypeUint32)
	}
	_spec.AddModifiers(rwu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realtimewarehousing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rwu.mutation.done = true
	return n, nil
}

// RealtimeWarehousingUpdateOne is the builder for updating a single RealtimeWarehousing entity.
type RealtimeWarehousingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RealtimeWarehousingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetUpdateTime(i int64) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ResetUpdateTime()
	rwuo.mutation.SetUpdateTime(i)
	return rwuo
}

// AddUpdateTime adds i to the "update_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) AddUpdateTime(i int64) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.AddUpdateTime(i)
	return rwuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearUpdateTime() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearUpdateTime()
	return rwuo
}

// SetDeleteTime sets the "delete_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetDeleteTime(i int64) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ResetDeleteTime()
	rwuo.mutation.SetDeleteTime(i)
	return rwuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableDeleteTime(i *int64) *RealtimeWarehousingUpdateOne {
	if i != nil {
		rwuo.SetDeleteTime(*i)
	}
	return rwuo
}

// AddDeleteTime adds i to the "delete_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) AddDeleteTime(i int64) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.AddDeleteTime(i)
	return rwuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearDeleteTime() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearDeleteTime()
	return rwuo
}

// SetName sets the "name" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetName(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetName(s)
	return rwuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableName(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetName(*s)
	}
	return rwuo
}

// ClearName clears the value of the "name" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearName() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearName()
	return rwuo
}

// SetStatus sets the "status" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetStatus(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetStatus(s)
	return rwuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableStatus(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetStatus(*s)
	}
	return rwuo
}

// ClearStatus clears the value of the "status" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearStatus() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearStatus()
	return rwuo
}

// SetAppID sets the "app_id" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetAppID(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetAppID(s)
	return rwuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableAppID(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetAppID(*s)
	}
	return rwuo
}

// ClearAppID clears the value of the "app_id" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearAppID() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearAppID()
	return rwuo
}

// SetAppKey sets the "app_key" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetAppKey(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetAppKey(s)
	return rwuo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableAppKey(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetAppKey(*s)
	}
	return rwuo
}

// ClearAppKey clears the value of the "app_key" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearAppKey() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearAppKey()
	return rwuo
}

// SetRemark sets the "remark" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetRemark(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetRemark(s)
	return rwuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableRemark(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetRemark(*s)
	}
	return rwuo
}

// ClearRemark clears the value of the "remark" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearRemark() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearRemark()
	return rwuo
}

// SetCreatorID sets the "creator_id" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetCreatorID(u uint32) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ResetCreatorID()
	rwuo.mutation.SetCreatorID(u)
	return rwuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableCreatorID(u *uint32) *RealtimeWarehousingUpdateOne {
	if u != nil {
		rwuo.SetCreatorID(*u)
	}
	return rwuo
}

// AddCreatorID adds u to the "creator_id" field.
func (rwuo *RealtimeWarehousingUpdateOne) AddCreatorID(u int32) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.AddCreatorID(u)
	return rwuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearCreatorID() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearCreatorID()
	return rwuo
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwuo *RealtimeWarehousingUpdateOne) Mutation() *RealtimeWarehousingMutation {
	return rwuo.mutation
}

// Where appends a list predicates to the RealtimeWarehousingUpdate builder.
func (rwuo *RealtimeWarehousingUpdateOne) Where(ps ...predicate.RealtimeWarehousing) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.Where(ps...)
	return rwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rwuo *RealtimeWarehousingUpdateOne) Select(field string, fields ...string) *RealtimeWarehousingUpdateOne {
	rwuo.fields = append([]string{field}, fields...)
	return rwuo
}

// Save executes the query and returns the updated RealtimeWarehousing entity.
func (rwuo *RealtimeWarehousingUpdateOne) Save(ctx context.Context) (*RealtimeWarehousing, error) {
	rwuo.defaults()
	return withHooks[*RealtimeWarehousing, RealtimeWarehousingMutation](ctx, rwuo.sqlSave, rwuo.mutation, rwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwuo *RealtimeWarehousingUpdateOne) SaveX(ctx context.Context) *RealtimeWarehousing {
	node, err := rwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rwuo *RealtimeWarehousingUpdateOne) Exec(ctx context.Context) error {
	_, err := rwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwuo *RealtimeWarehousingUpdateOne) ExecX(ctx context.Context) {
	if err := rwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwuo *RealtimeWarehousingUpdateOne) defaults() {
	if _, ok := rwuo.mutation.UpdateTime(); !ok && !rwuo.mutation.UpdateTimeCleared() {
		v := realtimewarehousing.UpdateDefaultUpdateTime()
		rwuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwuo *RealtimeWarehousingUpdateOne) check() error {
	if v, ok := rwuo.mutation.Name(); ok {
		if err := realtimewarehousing.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rwuo *RealtimeWarehousingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RealtimeWarehousingUpdateOne {
	rwuo.modifiers = append(rwuo.modifiers, modifiers...)
	return rwuo
}

func (rwuo *RealtimeWarehousingUpdateOne) sqlSave(ctx context.Context) (_node *RealtimeWarehousing, err error) {
	if err := rwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(realtimewarehousing.Table, realtimewarehousing.Columns, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeUint32))
	id, ok := rwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RealtimeWarehousing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, realtimewarehousing.FieldID)
		for _, f := range fields {
			if !realtimewarehousing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != realtimewarehousing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rwuo.mutation.CreateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := rwuo.mutation.UpdateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := rwuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(realtimewarehousing.FieldUpdateTime, field.TypeInt64, value)
	}
	if rwuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := rwuo.mutation.DeleteTime(); ok {
		_spec.SetField(realtimewarehousing.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rwuo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(realtimewarehousing.FieldDeleteTime, field.TypeInt64, value)
	}
	if rwuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := rwuo.mutation.Name(); ok {
		_spec.SetField(realtimewarehousing.FieldName, field.TypeString, value)
	}
	if rwuo.mutation.NameCleared() {
		_spec.ClearField(realtimewarehousing.FieldName, field.TypeString)
	}
	if value, ok := rwuo.mutation.Status(); ok {
		_spec.SetField(realtimewarehousing.FieldStatus, field.TypeString, value)
	}
	if rwuo.mutation.StatusCleared() {
		_spec.ClearField(realtimewarehousing.FieldStatus, field.TypeString)
	}
	if value, ok := rwuo.mutation.AppID(); ok {
		_spec.SetField(realtimewarehousing.FieldAppID, field.TypeString, value)
	}
	if rwuo.mutation.AppIDCleared() {
		_spec.ClearField(realtimewarehousing.FieldAppID, field.TypeString)
	}
	if value, ok := rwuo.mutation.AppKey(); ok {
		_spec.SetField(realtimewarehousing.FieldAppKey, field.TypeString, value)
	}
	if rwuo.mutation.AppKeyCleared() {
		_spec.ClearField(realtimewarehousing.FieldAppKey, field.TypeString)
	}
	if value, ok := rwuo.mutation.Remark(); ok {
		_spec.SetField(realtimewarehousing.FieldRemark, field.TypeString, value)
	}
	if rwuo.mutation.RemarkCleared() {
		_spec.ClearField(realtimewarehousing.FieldRemark, field.TypeString)
	}
	if value, ok := rwuo.mutation.CreatorID(); ok {
		_spec.SetField(realtimewarehousing.FieldCreatorID, field.TypeUint32, value)
	}
	if value, ok := rwuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(realtimewarehousing.FieldCreatorID, field.TypeUint32, value)
	}
	if rwuo.mutation.CreatorIDCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreatorID, field.TypeUint32)
	}
	_spec.AddModifiers(rwuo.modifiers...)
	_node = &RealtimeWarehousing{config: rwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realtimewarehousing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rwuo.mutation.done = true
	return _node, nil
}
