// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kratos-bi/app/report/service/internal/data/ent/acceptancestatus"
	"kratos-bi/app/report/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AcceptanceStatusDelete is the builder for deleting a AcceptanceStatus entity.
type AcceptanceStatusDelete struct {
	config
	hooks    []Hook
	mutation *AcceptanceStatusMutation
}

// Where appends a list predicates to the AcceptanceStatusDelete builder.
func (asd *AcceptanceStatusDelete) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusDelete {
	asd.mutation.Where(ps...)
	return asd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (asd *AcceptanceStatusDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, AcceptanceStatusMutation](ctx, asd.sqlExec, asd.mutation, asd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (asd *AcceptanceStatusDelete) ExecX(ctx context.Context) int {
	n, err := asd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (asd *AcceptanceStatusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(acceptancestatus.Table, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeUint32))
	if ps := asd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, asd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	asd.mutation.done = true
	return affected, err
}

// AcceptanceStatusDeleteOne is the builder for deleting a single AcceptanceStatus entity.
type AcceptanceStatusDeleteOne struct {
	asd *AcceptanceStatusDelete
}

// Where appends a list predicates to the AcceptanceStatusDelete builder.
func (asdo *AcceptanceStatusDeleteOne) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusDeleteOne {
	asdo.asd.mutation.Where(ps...)
	return asdo
}

// Exec executes the deletion query.
func (asdo *AcceptanceStatusDeleteOne) Exec(ctx context.Context) error {
	n, err := asdo.asd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{acceptancestatus.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (asdo *AcceptanceStatusDeleteOne) ExecX(ctx context.Context) {
	if err := asdo.Exec(ctx); err != nil {
		panic(err)
	}
}
