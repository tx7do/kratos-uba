// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/report/service/internal/data/ent/acceptancestatus"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AcceptanceStatusCreate is the builder for creating a AcceptanceStatus entity.
type AcceptanceStatusCreate struct {
	config
	mutation *AcceptanceStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (asc *AcceptanceStatusCreate) SetCreateTime(i int64) *AcceptanceStatusCreate {
	asc.mutation.SetCreateTime(i)
	return asc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableCreateTime(i *int64) *AcceptanceStatusCreate {
	if i != nil {
		asc.SetCreateTime(*i)
	}
	return asc
}

// SetUpdateTime sets the "update_time" field.
func (asc *AcceptanceStatusCreate) SetUpdateTime(i int64) *AcceptanceStatusCreate {
	asc.mutation.SetUpdateTime(i)
	return asc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableUpdateTime(i *int64) *AcceptanceStatusCreate {
	if i != nil {
		asc.SetUpdateTime(*i)
	}
	return asc
}

// SetDeleteTime sets the "delete_time" field.
func (asc *AcceptanceStatusCreate) SetDeleteTime(i int64) *AcceptanceStatusCreate {
	asc.mutation.SetDeleteTime(i)
	return asc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableDeleteTime(i *int64) *AcceptanceStatusCreate {
	if i != nil {
		asc.SetDeleteTime(*i)
	}
	return asc
}

// SetName sets the "name" field.
func (asc *AcceptanceStatusCreate) SetName(s string) *AcceptanceStatusCreate {
	asc.mutation.SetName(s)
	return asc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableName(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetName(*s)
	}
	return asc
}

// SetStatus sets the "status" field.
func (asc *AcceptanceStatusCreate) SetStatus(s string) *AcceptanceStatusCreate {
	asc.mutation.SetStatus(s)
	return asc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableStatus(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetStatus(*s)
	}
	return asc
}

// SetAppID sets the "app_id" field.
func (asc *AcceptanceStatusCreate) SetAppID(s string) *AcceptanceStatusCreate {
	asc.mutation.SetAppID(s)
	return asc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableAppID(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetAppID(*s)
	}
	return asc
}

// SetAppKey sets the "app_key" field.
func (asc *AcceptanceStatusCreate) SetAppKey(s string) *AcceptanceStatusCreate {
	asc.mutation.SetAppKey(s)
	return asc
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableAppKey(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetAppKey(*s)
	}
	return asc
}

// SetRemark sets the "remark" field.
func (asc *AcceptanceStatusCreate) SetRemark(s string) *AcceptanceStatusCreate {
	asc.mutation.SetRemark(s)
	return asc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableRemark(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetRemark(*s)
	}
	return asc
}

// SetCreatorID sets the "creator_id" field.
func (asc *AcceptanceStatusCreate) SetCreatorID(u uint32) *AcceptanceStatusCreate {
	asc.mutation.SetCreatorID(u)
	return asc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableCreatorID(u *uint32) *AcceptanceStatusCreate {
	if u != nil {
		asc.SetCreatorID(*u)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AcceptanceStatusCreate) SetID(u uint32) *AcceptanceStatusCreate {
	asc.mutation.SetID(u)
	return asc
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asc *AcceptanceStatusCreate) Mutation() *AcceptanceStatusMutation {
	return asc.mutation
}

// Save creates the AcceptanceStatus in the database.
func (asc *AcceptanceStatusCreate) Save(ctx context.Context) (*AcceptanceStatus, error) {
	asc.defaults()
	return withHooks[*AcceptanceStatus, AcceptanceStatusMutation](ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AcceptanceStatusCreate) SaveX(ctx context.Context) *AcceptanceStatus {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AcceptanceStatusCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AcceptanceStatusCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AcceptanceStatusCreate) defaults() {
	if _, ok := asc.mutation.CreateTime(); !ok {
		v := acceptancestatus.DefaultCreateTime()
		asc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AcceptanceStatusCreate) check() error {
	if v, ok := asc.mutation.Name(); ok {
		if err := acceptancestatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.name": %w`, err)}
		}
	}
	if v, ok := asc.mutation.ID(); ok {
		if err := acceptancestatus.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.id": %w`, err)}
		}
	}
	return nil
}

func (asc *AcceptanceStatusCreate) sqlSave(ctx context.Context) (*AcceptanceStatus, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AcceptanceStatusCreate) createSpec() (*AcceptanceStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &AcceptanceStatus{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(acceptancestatus.Table, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.CreateTime(); ok {
		_spec.SetField(acceptancestatus.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := asc.mutation.UpdateTime(); ok {
		_spec.SetField(acceptancestatus.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := asc.mutation.DeleteTime(); ok {
		_spec.SetField(acceptancestatus.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := asc.mutation.Name(); ok {
		_spec.SetField(acceptancestatus.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := asc.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := asc.mutation.AppID(); ok {
		_spec.SetField(acceptancestatus.FieldAppID, field.TypeString, value)
		_node.AppID = &value
	}
	if value, ok := asc.mutation.AppKey(); ok {
		_spec.SetField(acceptancestatus.FieldAppKey, field.TypeString, value)
		_node.AppKey = &value
	}
	if value, ok := asc.mutation.Remark(); ok {
		_spec.SetField(acceptancestatus.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := asc.mutation.CreatorID(); ok {
		_spec.SetField(acceptancestatus.FieldCreatorID, field.TypeUint32, value)
		_node.CreatorID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AcceptanceStatus.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AcceptanceStatusUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (asc *AcceptanceStatusCreate) OnConflict(opts ...sql.ConflictOption) *AcceptanceStatusUpsertOne {
	asc.conflict = opts
	return &AcceptanceStatusUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AcceptanceStatusCreate) OnConflictColumns(columns ...string) *AcceptanceStatusUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AcceptanceStatusUpsertOne{
		create: asc,
	}
}

type (
	// AcceptanceStatusUpsertOne is the builder for "upsert"-ing
	//  one AcceptanceStatus node.
	AcceptanceStatusUpsertOne struct {
		create *AcceptanceStatusCreate
	}

	// AcceptanceStatusUpsert is the "OnConflict" setter.
	AcceptanceStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *AcceptanceStatusUpsert) SetUpdateTime(v int64) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateUpdateTime() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AcceptanceStatusUpsert) AddUpdateTime(v int64) *AcceptanceStatusUpsert {
	u.Add(acceptancestatus.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AcceptanceStatusUpsert) ClearUpdateTime() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *AcceptanceStatusUpsert) SetDeleteTime(v int64) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateDeleteTime() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AcceptanceStatusUpsert) AddDeleteTime(v int64) *AcceptanceStatusUpsert {
	u.Add(acceptancestatus.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AcceptanceStatusUpsert) ClearDeleteTime() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *AcceptanceStatusUpsert) SetName(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateName() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AcceptanceStatusUpsert) ClearName() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsert) SetStatus(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateStatus() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsert) ClearStatus() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldStatus)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AcceptanceStatusUpsert) SetAppID(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateAppID() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AcceptanceStatusUpsert) ClearAppID() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldAppID)
	return u
}

// SetAppKey sets the "app_key" field.
func (u *AcceptanceStatusUpsert) SetAppKey(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldAppKey, v)
	return u
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateAppKey() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldAppKey)
	return u
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AcceptanceStatusUpsert) ClearAppKey() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldAppKey)
	return u
}

// SetRemark sets the "remark" field.
func (u *AcceptanceStatusUpsert) SetRemark(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateRemark() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AcceptanceStatusUpsert) ClearRemark() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldRemark)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *AcceptanceStatusUpsert) SetCreatorID(v uint32) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateCreatorID() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldCreatorID)
	return u
}

// AddCreatorID adds v to the "creator_id" field.
func (u *AcceptanceStatusUpsert) AddCreatorID(v uint32) *AcceptanceStatusUpsert {
	u.Add(acceptancestatus.FieldCreatorID, v)
	return u
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *AcceptanceStatusUpsert) ClearCreatorID() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldCreatorID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(acceptancestatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertOne) UpdateNewValues() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(acceptancestatus.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(acceptancestatus.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AcceptanceStatusUpsertOne) Ignore() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AcceptanceStatusUpsertOne) DoNothing() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AcceptanceStatusCreate.OnConflict
// documentation for more info.
func (u *AcceptanceStatusUpsertOne) Update(set func(*AcceptanceStatusUpsert)) *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AcceptanceStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AcceptanceStatusUpsertOne) SetUpdateTime(v int64) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AcceptanceStatusUpsertOne) AddUpdateTime(v int64) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateUpdateTime() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AcceptanceStatusUpsertOne) ClearUpdateTime() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AcceptanceStatusUpsertOne) SetDeleteTime(v int64) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AcceptanceStatusUpsertOne) AddDeleteTime(v int64) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateDeleteTime() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AcceptanceStatusUpsertOne) ClearDeleteTime() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AcceptanceStatusUpsertOne) SetName(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateName() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AcceptanceStatusUpsertOne) ClearName() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsertOne) SetStatus(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateStatus() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsertOne) ClearStatus() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearStatus()
	})
}

// SetAppID sets the "app_id" field.
func (u *AcceptanceStatusUpsertOne) SetAppID(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateAppID() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AcceptanceStatusUpsertOne) ClearAppID() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearAppID()
	})
}

// SetAppKey sets the "app_key" field.
func (u *AcceptanceStatusUpsertOne) SetAppKey(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateAppKey() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AcceptanceStatusUpsertOne) ClearAppKey() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearAppKey()
	})
}

// SetRemark sets the "remark" field.
func (u *AcceptanceStatusUpsertOne) SetRemark(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateRemark() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AcceptanceStatusUpsertOne) ClearRemark() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearRemark()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *AcceptanceStatusUpsertOne) SetCreatorID(v uint32) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetCreatorID(v)
	})
}

// AddCreatorID adds v to the "creator_id" field.
func (u *AcceptanceStatusUpsertOne) AddCreatorID(v uint32) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateCreatorID() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *AcceptanceStatusUpsertOne) ClearCreatorID() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearCreatorID()
	})
}

// Exec executes the query.
func (u *AcceptanceStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AcceptanceStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AcceptanceStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AcceptanceStatusUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AcceptanceStatusUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AcceptanceStatusCreateBulk is the builder for creating many AcceptanceStatus entities in bulk.
type AcceptanceStatusCreateBulk struct {
	config
	builders []*AcceptanceStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the AcceptanceStatus entities in the database.
func (ascb *AcceptanceStatusCreateBulk) Save(ctx context.Context) ([]*AcceptanceStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AcceptanceStatus, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AcceptanceStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AcceptanceStatusCreateBulk) SaveX(ctx context.Context) []*AcceptanceStatus {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AcceptanceStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AcceptanceStatusCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AcceptanceStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AcceptanceStatusUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ascb *AcceptanceStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *AcceptanceStatusUpsertBulk {
	ascb.conflict = opts
	return &AcceptanceStatusUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AcceptanceStatusCreateBulk) OnConflictColumns(columns ...string) *AcceptanceStatusUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AcceptanceStatusUpsertBulk{
		create: ascb,
	}
}

// AcceptanceStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of AcceptanceStatus nodes.
type AcceptanceStatusUpsertBulk struct {
	create *AcceptanceStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(acceptancestatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertBulk) UpdateNewValues() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(acceptancestatus.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(acceptancestatus.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertBulk) Ignore() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AcceptanceStatusUpsertBulk) DoNothing() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AcceptanceStatusCreateBulk.OnConflict
// documentation for more info.
func (u *AcceptanceStatusUpsertBulk) Update(set func(*AcceptanceStatusUpsert)) *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AcceptanceStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AcceptanceStatusUpsertBulk) SetUpdateTime(v int64) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AcceptanceStatusUpsertBulk) AddUpdateTime(v int64) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateUpdateTime() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AcceptanceStatusUpsertBulk) ClearUpdateTime() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AcceptanceStatusUpsertBulk) SetDeleteTime(v int64) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AcceptanceStatusUpsertBulk) AddDeleteTime(v int64) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateDeleteTime() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AcceptanceStatusUpsertBulk) ClearDeleteTime() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AcceptanceStatusUpsertBulk) SetName(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateName() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AcceptanceStatusUpsertBulk) ClearName() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsertBulk) SetStatus(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateStatus() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsertBulk) ClearStatus() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearStatus()
	})
}

// SetAppID sets the "app_id" field.
func (u *AcceptanceStatusUpsertBulk) SetAppID(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateAppID() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AcceptanceStatusUpsertBulk) ClearAppID() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearAppID()
	})
}

// SetAppKey sets the "app_key" field.
func (u *AcceptanceStatusUpsertBulk) SetAppKey(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateAppKey() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AcceptanceStatusUpsertBulk) ClearAppKey() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearAppKey()
	})
}

// SetRemark sets the "remark" field.
func (u *AcceptanceStatusUpsertBulk) SetRemark(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateRemark() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AcceptanceStatusUpsertBulk) ClearRemark() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearRemark()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *AcceptanceStatusUpsertBulk) SetCreatorID(v uint32) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetCreatorID(v)
	})
}

// AddCreatorID adds v to the "creator_id" field.
func (u *AcceptanceStatusUpsertBulk) AddCreatorID(v uint32) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateCreatorID() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *AcceptanceStatusUpsertBulk) ClearCreatorID() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearCreatorID()
	})
}

// Exec executes the query.
func (u *AcceptanceStatusUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AcceptanceStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AcceptanceStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AcceptanceStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
