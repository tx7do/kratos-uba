// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/report/service/internal/data/ent/acceptancestatus"
	"kratos-uba/app/report/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AcceptanceStatusUpdate is the builder for updating AcceptanceStatus entities.
type AcceptanceStatusUpdate struct {
	config
	hooks     []Hook
	mutation  *AcceptanceStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AcceptanceStatusUpdate builder.
func (asu *AcceptanceStatusUpdate) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdateTime sets the "update_time" field.
func (asu *AcceptanceStatusUpdate) SetUpdateTime(i int64) *AcceptanceStatusUpdate {
	asu.mutation.ResetUpdateTime()
	asu.mutation.SetUpdateTime(i)
	return asu
}

// AddUpdateTime adds i to the "update_time" field.
func (asu *AcceptanceStatusUpdate) AddUpdateTime(i int64) *AcceptanceStatusUpdate {
	asu.mutation.AddUpdateTime(i)
	return asu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (asu *AcceptanceStatusUpdate) ClearUpdateTime() *AcceptanceStatusUpdate {
	asu.mutation.ClearUpdateTime()
	return asu
}

// SetDeleteTime sets the "delete_time" field.
func (asu *AcceptanceStatusUpdate) SetDeleteTime(i int64) *AcceptanceStatusUpdate {
	asu.mutation.ResetDeleteTime()
	asu.mutation.SetDeleteTime(i)
	return asu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableDeleteTime(i *int64) *AcceptanceStatusUpdate {
	if i != nil {
		asu.SetDeleteTime(*i)
	}
	return asu
}

// AddDeleteTime adds i to the "delete_time" field.
func (asu *AcceptanceStatusUpdate) AddDeleteTime(i int64) *AcceptanceStatusUpdate {
	asu.mutation.AddDeleteTime(i)
	return asu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (asu *AcceptanceStatusUpdate) ClearDeleteTime() *AcceptanceStatusUpdate {
	asu.mutation.ClearDeleteTime()
	return asu
}

// SetName sets the "name" field.
func (asu *AcceptanceStatusUpdate) SetName(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetName(s)
	return asu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableName(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetName(*s)
	}
	return asu
}

// ClearName clears the value of the "name" field.
func (asu *AcceptanceStatusUpdate) ClearName() *AcceptanceStatusUpdate {
	asu.mutation.ClearName()
	return asu
}

// SetStatus sets the "status" field.
func (asu *AcceptanceStatusUpdate) SetStatus(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetStatus(s)
	return asu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableStatus(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetStatus(*s)
	}
	return asu
}

// ClearStatus clears the value of the "status" field.
func (asu *AcceptanceStatusUpdate) ClearStatus() *AcceptanceStatusUpdate {
	asu.mutation.ClearStatus()
	return asu
}

// SetAppID sets the "app_id" field.
func (asu *AcceptanceStatusUpdate) SetAppID(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetAppID(s)
	return asu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableAppID(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetAppID(*s)
	}
	return asu
}

// ClearAppID clears the value of the "app_id" field.
func (asu *AcceptanceStatusUpdate) ClearAppID() *AcceptanceStatusUpdate {
	asu.mutation.ClearAppID()
	return asu
}

// SetAppKey sets the "app_key" field.
func (asu *AcceptanceStatusUpdate) SetAppKey(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetAppKey(s)
	return asu
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableAppKey(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetAppKey(*s)
	}
	return asu
}

// ClearAppKey clears the value of the "app_key" field.
func (asu *AcceptanceStatusUpdate) ClearAppKey() *AcceptanceStatusUpdate {
	asu.mutation.ClearAppKey()
	return asu
}

// SetRemark sets the "remark" field.
func (asu *AcceptanceStatusUpdate) SetRemark(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetRemark(s)
	return asu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableRemark(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetRemark(*s)
	}
	return asu
}

// ClearRemark clears the value of the "remark" field.
func (asu *AcceptanceStatusUpdate) ClearRemark() *AcceptanceStatusUpdate {
	asu.mutation.ClearRemark()
	return asu
}

// SetCreatorID sets the "creator_id" field.
func (asu *AcceptanceStatusUpdate) SetCreatorID(u uint32) *AcceptanceStatusUpdate {
	asu.mutation.ResetCreatorID()
	asu.mutation.SetCreatorID(u)
	return asu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableCreatorID(u *uint32) *AcceptanceStatusUpdate {
	if u != nil {
		asu.SetCreatorID(*u)
	}
	return asu
}

// AddCreatorID adds u to the "creator_id" field.
func (asu *AcceptanceStatusUpdate) AddCreatorID(u int32) *AcceptanceStatusUpdate {
	asu.mutation.AddCreatorID(u)
	return asu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (asu *AcceptanceStatusUpdate) ClearCreatorID() *AcceptanceStatusUpdate {
	asu.mutation.ClearCreatorID()
	return asu
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asu *AcceptanceStatusUpdate) Mutation() *AcceptanceStatusMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AcceptanceStatusUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks[int, AcceptanceStatusMutation](ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AcceptanceStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AcceptanceStatusUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AcceptanceStatusUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AcceptanceStatusUpdate) defaults() {
	if _, ok := asu.mutation.UpdateTime(); !ok && !asu.mutation.UpdateTimeCleared() {
		v := acceptancestatus.UpdateDefaultUpdateTime()
		asu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AcceptanceStatusUpdate) check() error {
	if v, ok := asu.mutation.Name(); ok {
		if err := acceptancestatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AcceptanceStatusUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AcceptanceStatusUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AcceptanceStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(acceptancestatus.Table, acceptancestatus.Columns, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeUint32))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if asu.mutation.CreateTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := asu.mutation.UpdateTime(); ok {
		_spec.SetField(acceptancestatus.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := asu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(acceptancestatus.FieldUpdateTime, field.TypeInt64, value)
	}
	if asu.mutation.UpdateTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := asu.mutation.DeleteTime(); ok {
		_spec.SetField(acceptancestatus.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := asu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(acceptancestatus.FieldDeleteTime, field.TypeInt64, value)
	}
	if asu.mutation.DeleteTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := asu.mutation.Name(); ok {
		_spec.SetField(acceptancestatus.FieldName, field.TypeString, value)
	}
	if asu.mutation.NameCleared() {
		_spec.ClearField(acceptancestatus.FieldName, field.TypeString)
	}
	if value, ok := asu.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeString, value)
	}
	if asu.mutation.StatusCleared() {
		_spec.ClearField(acceptancestatus.FieldStatus, field.TypeString)
	}
	if value, ok := asu.mutation.AppID(); ok {
		_spec.SetField(acceptancestatus.FieldAppID, field.TypeString, value)
	}
	if asu.mutation.AppIDCleared() {
		_spec.ClearField(acceptancestatus.FieldAppID, field.TypeString)
	}
	if value, ok := asu.mutation.AppKey(); ok {
		_spec.SetField(acceptancestatus.FieldAppKey, field.TypeString, value)
	}
	if asu.mutation.AppKeyCleared() {
		_spec.ClearField(acceptancestatus.FieldAppKey, field.TypeString)
	}
	if value, ok := asu.mutation.Remark(); ok {
		_spec.SetField(acceptancestatus.FieldRemark, field.TypeString, value)
	}
	if asu.mutation.RemarkCleared() {
		_spec.ClearField(acceptancestatus.FieldRemark, field.TypeString)
	}
	if value, ok := asu.mutation.CreatorID(); ok {
		_spec.SetField(acceptancestatus.FieldCreatorID, field.TypeUint32, value)
	}
	if value, ok := asu.mutation.AddedCreatorID(); ok {
		_spec.AddField(acceptancestatus.FieldCreatorID, field.TypeUint32, value)
	}
	if asu.mutation.CreatorIDCleared() {
		_spec.ClearField(acceptancestatus.FieldCreatorID, field.TypeUint32)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acceptancestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AcceptanceStatusUpdateOne is the builder for updating a single AcceptanceStatus entity.
type AcceptanceStatusUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AcceptanceStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (asuo *AcceptanceStatusUpdateOne) SetUpdateTime(i int64) *AcceptanceStatusUpdateOne {
	asuo.mutation.ResetUpdateTime()
	asuo.mutation.SetUpdateTime(i)
	return asuo
}

// AddUpdateTime adds i to the "update_time" field.
func (asuo *AcceptanceStatusUpdateOne) AddUpdateTime(i int64) *AcceptanceStatusUpdateOne {
	asuo.mutation.AddUpdateTime(i)
	return asuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (asuo *AcceptanceStatusUpdateOne) ClearUpdateTime() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearUpdateTime()
	return asuo
}

// SetDeleteTime sets the "delete_time" field.
func (asuo *AcceptanceStatusUpdateOne) SetDeleteTime(i int64) *AcceptanceStatusUpdateOne {
	asuo.mutation.ResetDeleteTime()
	asuo.mutation.SetDeleteTime(i)
	return asuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableDeleteTime(i *int64) *AcceptanceStatusUpdateOne {
	if i != nil {
		asuo.SetDeleteTime(*i)
	}
	return asuo
}

// AddDeleteTime adds i to the "delete_time" field.
func (asuo *AcceptanceStatusUpdateOne) AddDeleteTime(i int64) *AcceptanceStatusUpdateOne {
	asuo.mutation.AddDeleteTime(i)
	return asuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (asuo *AcceptanceStatusUpdateOne) ClearDeleteTime() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearDeleteTime()
	return asuo
}

// SetName sets the "name" field.
func (asuo *AcceptanceStatusUpdateOne) SetName(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetName(s)
	return asuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableName(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetName(*s)
	}
	return asuo
}

// ClearName clears the value of the "name" field.
func (asuo *AcceptanceStatusUpdateOne) ClearName() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearName()
	return asuo
}

// SetStatus sets the "status" field.
func (asuo *AcceptanceStatusUpdateOne) SetStatus(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetStatus(s)
	return asuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableStatus(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetStatus(*s)
	}
	return asuo
}

// ClearStatus clears the value of the "status" field.
func (asuo *AcceptanceStatusUpdateOne) ClearStatus() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearStatus()
	return asuo
}

// SetAppID sets the "app_id" field.
func (asuo *AcceptanceStatusUpdateOne) SetAppID(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetAppID(s)
	return asuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableAppID(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetAppID(*s)
	}
	return asuo
}

// ClearAppID clears the value of the "app_id" field.
func (asuo *AcceptanceStatusUpdateOne) ClearAppID() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearAppID()
	return asuo
}

// SetAppKey sets the "app_key" field.
func (asuo *AcceptanceStatusUpdateOne) SetAppKey(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetAppKey(s)
	return asuo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableAppKey(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetAppKey(*s)
	}
	return asuo
}

// ClearAppKey clears the value of the "app_key" field.
func (asuo *AcceptanceStatusUpdateOne) ClearAppKey() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearAppKey()
	return asuo
}

// SetRemark sets the "remark" field.
func (asuo *AcceptanceStatusUpdateOne) SetRemark(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetRemark(s)
	return asuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableRemark(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetRemark(*s)
	}
	return asuo
}

// ClearRemark clears the value of the "remark" field.
func (asuo *AcceptanceStatusUpdateOne) ClearRemark() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearRemark()
	return asuo
}

// SetCreatorID sets the "creator_id" field.
func (asuo *AcceptanceStatusUpdateOne) SetCreatorID(u uint32) *AcceptanceStatusUpdateOne {
	asuo.mutation.ResetCreatorID()
	asuo.mutation.SetCreatorID(u)
	return asuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableCreatorID(u *uint32) *AcceptanceStatusUpdateOne {
	if u != nil {
		asuo.SetCreatorID(*u)
	}
	return asuo
}

// AddCreatorID adds u to the "creator_id" field.
func (asuo *AcceptanceStatusUpdateOne) AddCreatorID(u int32) *AcceptanceStatusUpdateOne {
	asuo.mutation.AddCreatorID(u)
	return asuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (asuo *AcceptanceStatusUpdateOne) ClearCreatorID() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearCreatorID()
	return asuo
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asuo *AcceptanceStatusUpdateOne) Mutation() *AcceptanceStatusMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AcceptanceStatusUpdate builder.
func (asuo *AcceptanceStatusUpdateOne) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AcceptanceStatusUpdateOne) Select(field string, fields ...string) *AcceptanceStatusUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AcceptanceStatus entity.
func (asuo *AcceptanceStatusUpdateOne) Save(ctx context.Context) (*AcceptanceStatus, error) {
	asuo.defaults()
	return withHooks[*AcceptanceStatus, AcceptanceStatusMutation](ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AcceptanceStatusUpdateOne) SaveX(ctx context.Context) *AcceptanceStatus {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AcceptanceStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AcceptanceStatusUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AcceptanceStatusUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdateTime(); !ok && !asuo.mutation.UpdateTimeCleared() {
		v := acceptancestatus.UpdateDefaultUpdateTime()
		asuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AcceptanceStatusUpdateOne) check() error {
	if v, ok := asuo.mutation.Name(); ok {
		if err := acceptancestatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AcceptanceStatusUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AcceptanceStatusUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AcceptanceStatusUpdateOne) sqlSave(ctx context.Context) (_node *AcceptanceStatus, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(acceptancestatus.Table, acceptancestatus.Columns, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeUint32))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AcceptanceStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, acceptancestatus.FieldID)
		for _, f := range fields {
			if !acceptancestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != acceptancestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if asuo.mutation.CreateTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := asuo.mutation.UpdateTime(); ok {
		_spec.SetField(acceptancestatus.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := asuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(acceptancestatus.FieldUpdateTime, field.TypeInt64, value)
	}
	if asuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := asuo.mutation.DeleteTime(); ok {
		_spec.SetField(acceptancestatus.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := asuo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(acceptancestatus.FieldDeleteTime, field.TypeInt64, value)
	}
	if asuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(acceptancestatus.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := asuo.mutation.Name(); ok {
		_spec.SetField(acceptancestatus.FieldName, field.TypeString, value)
	}
	if asuo.mutation.NameCleared() {
		_spec.ClearField(acceptancestatus.FieldName, field.TypeString)
	}
	if value, ok := asuo.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeString, value)
	}
	if asuo.mutation.StatusCleared() {
		_spec.ClearField(acceptancestatus.FieldStatus, field.TypeString)
	}
	if value, ok := asuo.mutation.AppID(); ok {
		_spec.SetField(acceptancestatus.FieldAppID, field.TypeString, value)
	}
	if asuo.mutation.AppIDCleared() {
		_spec.ClearField(acceptancestatus.FieldAppID, field.TypeString)
	}
	if value, ok := asuo.mutation.AppKey(); ok {
		_spec.SetField(acceptancestatus.FieldAppKey, field.TypeString, value)
	}
	if asuo.mutation.AppKeyCleared() {
		_spec.ClearField(acceptancestatus.FieldAppKey, field.TypeString)
	}
	if value, ok := asuo.mutation.Remark(); ok {
		_spec.SetField(acceptancestatus.FieldRemark, field.TypeString, value)
	}
	if asuo.mutation.RemarkCleared() {
		_spec.ClearField(acceptancestatus.FieldRemark, field.TypeString)
	}
	if value, ok := asuo.mutation.CreatorID(); ok {
		_spec.SetField(acceptancestatus.FieldCreatorID, field.TypeUint32, value)
	}
	if value, ok := asuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(acceptancestatus.FieldCreatorID, field.TypeUint32, value)
	}
	if asuo.mutation.CreatorIDCleared() {
		_spec.ClearField(acceptancestatus.FieldCreatorID, field.TypeUint32)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AcceptanceStatus{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acceptancestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
