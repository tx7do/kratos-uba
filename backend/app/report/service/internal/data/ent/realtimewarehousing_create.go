// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/report/service/internal/data/ent/realtimewarehousing"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealtimeWarehousingCreate is the builder for creating a RealtimeWarehousing entity.
type RealtimeWarehousingCreate struct {
	config
	mutation *RealtimeWarehousingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (rwc *RealtimeWarehousingCreate) SetCreateTime(i int64) *RealtimeWarehousingCreate {
	rwc.mutation.SetCreateTime(i)
	return rwc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableCreateTime(i *int64) *RealtimeWarehousingCreate {
	if i != nil {
		rwc.SetCreateTime(*i)
	}
	return rwc
}

// SetUpdateTime sets the "update_time" field.
func (rwc *RealtimeWarehousingCreate) SetUpdateTime(i int64) *RealtimeWarehousingCreate {
	rwc.mutation.SetUpdateTime(i)
	return rwc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableUpdateTime(i *int64) *RealtimeWarehousingCreate {
	if i != nil {
		rwc.SetUpdateTime(*i)
	}
	return rwc
}

// SetDeleteTime sets the "delete_time" field.
func (rwc *RealtimeWarehousingCreate) SetDeleteTime(i int64) *RealtimeWarehousingCreate {
	rwc.mutation.SetDeleteTime(i)
	return rwc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableDeleteTime(i *int64) *RealtimeWarehousingCreate {
	if i != nil {
		rwc.SetDeleteTime(*i)
	}
	return rwc
}

// SetName sets the "name" field.
func (rwc *RealtimeWarehousingCreate) SetName(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetName(s)
	return rwc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableName(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetName(*s)
	}
	return rwc
}

// SetStatus sets the "status" field.
func (rwc *RealtimeWarehousingCreate) SetStatus(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetStatus(s)
	return rwc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableStatus(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetStatus(*s)
	}
	return rwc
}

// SetAppID sets the "app_id" field.
func (rwc *RealtimeWarehousingCreate) SetAppID(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetAppID(s)
	return rwc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableAppID(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetAppID(*s)
	}
	return rwc
}

// SetAppKey sets the "app_key" field.
func (rwc *RealtimeWarehousingCreate) SetAppKey(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetAppKey(s)
	return rwc
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableAppKey(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetAppKey(*s)
	}
	return rwc
}

// SetRemark sets the "remark" field.
func (rwc *RealtimeWarehousingCreate) SetRemark(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetRemark(s)
	return rwc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableRemark(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetRemark(*s)
	}
	return rwc
}

// SetCreatorID sets the "creator_id" field.
func (rwc *RealtimeWarehousingCreate) SetCreatorID(u uint32) *RealtimeWarehousingCreate {
	rwc.mutation.SetCreatorID(u)
	return rwc
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableCreatorID(u *uint32) *RealtimeWarehousingCreate {
	if u != nil {
		rwc.SetCreatorID(*u)
	}
	return rwc
}

// SetID sets the "id" field.
func (rwc *RealtimeWarehousingCreate) SetID(u uint32) *RealtimeWarehousingCreate {
	rwc.mutation.SetID(u)
	return rwc
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwc *RealtimeWarehousingCreate) Mutation() *RealtimeWarehousingMutation {
	return rwc.mutation
}

// Save creates the RealtimeWarehousing in the database.
func (rwc *RealtimeWarehousingCreate) Save(ctx context.Context) (*RealtimeWarehousing, error) {
	rwc.defaults()
	return withHooks[*RealtimeWarehousing, RealtimeWarehousingMutation](ctx, rwc.sqlSave, rwc.mutation, rwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rwc *RealtimeWarehousingCreate) SaveX(ctx context.Context) *RealtimeWarehousing {
	v, err := rwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwc *RealtimeWarehousingCreate) Exec(ctx context.Context) error {
	_, err := rwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwc *RealtimeWarehousingCreate) ExecX(ctx context.Context) {
	if err := rwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwc *RealtimeWarehousingCreate) defaults() {
	if _, ok := rwc.mutation.CreateTime(); !ok {
		v := realtimewarehousing.DefaultCreateTime()
		rwc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwc *RealtimeWarehousingCreate) check() error {
	if v, ok := rwc.mutation.Name(); ok {
		if err := realtimewarehousing.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.name": %w`, err)}
		}
	}
	if v, ok := rwc.mutation.ID(); ok {
		if err := realtimewarehousing.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.id": %w`, err)}
		}
	}
	return nil
}

func (rwc *RealtimeWarehousingCreate) sqlSave(ctx context.Context) (*RealtimeWarehousing, error) {
	if err := rwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	rwc.mutation.id = &_node.ID
	rwc.mutation.done = true
	return _node, nil
}

func (rwc *RealtimeWarehousingCreate) createSpec() (*RealtimeWarehousing, *sqlgraph.CreateSpec) {
	var (
		_node = &RealtimeWarehousing{config: rwc.config}
		_spec = sqlgraph.NewCreateSpec(realtimewarehousing.Table, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = rwc.conflict
	if id, ok := rwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rwc.mutation.CreateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := rwc.mutation.UpdateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := rwc.mutation.DeleteTime(); ok {
		_spec.SetField(realtimewarehousing.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := rwc.mutation.Name(); ok {
		_spec.SetField(realtimewarehousing.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := rwc.mutation.Status(); ok {
		_spec.SetField(realtimewarehousing.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := rwc.mutation.AppID(); ok {
		_spec.SetField(realtimewarehousing.FieldAppID, field.TypeString, value)
		_node.AppID = &value
	}
	if value, ok := rwc.mutation.AppKey(); ok {
		_spec.SetField(realtimewarehousing.FieldAppKey, field.TypeString, value)
		_node.AppKey = &value
	}
	if value, ok := rwc.mutation.Remark(); ok {
		_spec.SetField(realtimewarehousing.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := rwc.mutation.CreatorID(); ok {
		_spec.SetField(realtimewarehousing.FieldCreatorID, field.TypeUint32, value)
		_node.CreatorID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealtimeWarehousing.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealtimeWarehousingUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rwc *RealtimeWarehousingCreate) OnConflict(opts ...sql.ConflictOption) *RealtimeWarehousingUpsertOne {
	rwc.conflict = opts
	return &RealtimeWarehousingUpsertOne{
		create: rwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rwc *RealtimeWarehousingCreate) OnConflictColumns(columns ...string) *RealtimeWarehousingUpsertOne {
	rwc.conflict = append(rwc.conflict, sql.ConflictColumns(columns...))
	return &RealtimeWarehousingUpsertOne{
		create: rwc,
	}
}

type (
	// RealtimeWarehousingUpsertOne is the builder for "upsert"-ing
	//  one RealtimeWarehousing node.
	RealtimeWarehousingUpsertOne struct {
		create *RealtimeWarehousingCreate
	}

	// RealtimeWarehousingUpsert is the "OnConflict" setter.
	RealtimeWarehousingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *RealtimeWarehousingUpsert) SetUpdateTime(v int64) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateUpdateTime() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *RealtimeWarehousingUpsert) AddUpdateTime(v int64) *RealtimeWarehousingUpsert {
	u.Add(realtimewarehousing.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RealtimeWarehousingUpsert) ClearUpdateTime() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *RealtimeWarehousingUpsert) SetDeleteTime(v int64) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateDeleteTime() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *RealtimeWarehousingUpsert) AddDeleteTime(v int64) *RealtimeWarehousingUpsert {
	u.Add(realtimewarehousing.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RealtimeWarehousingUpsert) ClearDeleteTime() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *RealtimeWarehousingUpsert) SetName(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateName() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RealtimeWarehousingUpsert) ClearName() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *RealtimeWarehousingUpsert) SetStatus(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateStatus() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *RealtimeWarehousingUpsert) ClearStatus() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldStatus)
	return u
}

// SetAppID sets the "app_id" field.
func (u *RealtimeWarehousingUpsert) SetAppID(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateAppID() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *RealtimeWarehousingUpsert) ClearAppID() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldAppID)
	return u
}

// SetAppKey sets the "app_key" field.
func (u *RealtimeWarehousingUpsert) SetAppKey(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldAppKey, v)
	return u
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateAppKey() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldAppKey)
	return u
}

// ClearAppKey clears the value of the "app_key" field.
func (u *RealtimeWarehousingUpsert) ClearAppKey() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldAppKey)
	return u
}

// SetRemark sets the "remark" field.
func (u *RealtimeWarehousingUpsert) SetRemark(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateRemark() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RealtimeWarehousingUpsert) ClearRemark() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldRemark)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *RealtimeWarehousingUpsert) SetCreatorID(v uint32) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateCreatorID() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldCreatorID)
	return u
}

// AddCreatorID adds v to the "creator_id" field.
func (u *RealtimeWarehousingUpsert) AddCreatorID(v uint32) *RealtimeWarehousingUpsert {
	u.Add(realtimewarehousing.FieldCreatorID, v)
	return u
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *RealtimeWarehousingUpsert) ClearCreatorID() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldCreatorID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(realtimewarehousing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertOne) UpdateNewValues() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(realtimewarehousing.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(realtimewarehousing.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RealtimeWarehousingUpsertOne) Ignore() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealtimeWarehousingUpsertOne) DoNothing() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealtimeWarehousingCreate.OnConflict
// documentation for more info.
func (u *RealtimeWarehousingUpsertOne) Update(set func(*RealtimeWarehousingUpsert)) *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealtimeWarehousingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RealtimeWarehousingUpsertOne) SetUpdateTime(v int64) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *RealtimeWarehousingUpsertOne) AddUpdateTime(v int64) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateUpdateTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RealtimeWarehousingUpsertOne) ClearUpdateTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RealtimeWarehousingUpsertOne) SetDeleteTime(v int64) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *RealtimeWarehousingUpsertOne) AddDeleteTime(v int64) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateDeleteTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RealtimeWarehousingUpsertOne) ClearDeleteTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *RealtimeWarehousingUpsertOne) SetName(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateName() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RealtimeWarehousingUpsertOne) ClearName() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *RealtimeWarehousingUpsertOne) SetStatus(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateStatus() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RealtimeWarehousingUpsertOne) ClearStatus() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearStatus()
	})
}

// SetAppID sets the "app_id" field.
func (u *RealtimeWarehousingUpsertOne) SetAppID(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateAppID() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RealtimeWarehousingUpsertOne) ClearAppID() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearAppID()
	})
}

// SetAppKey sets the "app_key" field.
func (u *RealtimeWarehousingUpsertOne) SetAppKey(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateAppKey() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *RealtimeWarehousingUpsertOne) ClearAppKey() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearAppKey()
	})
}

// SetRemark sets the "remark" field.
func (u *RealtimeWarehousingUpsertOne) SetRemark(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateRemark() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RealtimeWarehousingUpsertOne) ClearRemark() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearRemark()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *RealtimeWarehousingUpsertOne) SetCreatorID(v uint32) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetCreatorID(v)
	})
}

// AddCreatorID adds v to the "creator_id" field.
func (u *RealtimeWarehousingUpsertOne) AddCreatorID(v uint32) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateCreatorID() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *RealtimeWarehousingUpsertOne) ClearCreatorID() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearCreatorID()
	})
}

// Exec executes the query.
func (u *RealtimeWarehousingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealtimeWarehousingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RealtimeWarehousingUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RealtimeWarehousingCreateBulk is the builder for creating many RealtimeWarehousing entities in bulk.
type RealtimeWarehousingCreateBulk struct {
	config
	builders []*RealtimeWarehousingCreate
	conflict []sql.ConflictOption
}

// Save creates the RealtimeWarehousing entities in the database.
func (rwcb *RealtimeWarehousingCreateBulk) Save(ctx context.Context) ([]*RealtimeWarehousing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rwcb.builders))
	nodes := make([]*RealtimeWarehousing, len(rwcb.builders))
	mutators := make([]Mutator, len(rwcb.builders))
	for i := range rwcb.builders {
		func(i int, root context.Context) {
			builder := rwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RealtimeWarehousingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rwcb *RealtimeWarehousingCreateBulk) SaveX(ctx context.Context) []*RealtimeWarehousing {
	v, err := rwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwcb *RealtimeWarehousingCreateBulk) Exec(ctx context.Context) error {
	_, err := rwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwcb *RealtimeWarehousingCreateBulk) ExecX(ctx context.Context) {
	if err := rwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealtimeWarehousing.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealtimeWarehousingUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rwcb *RealtimeWarehousingCreateBulk) OnConflict(opts ...sql.ConflictOption) *RealtimeWarehousingUpsertBulk {
	rwcb.conflict = opts
	return &RealtimeWarehousingUpsertBulk{
		create: rwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rwcb *RealtimeWarehousingCreateBulk) OnConflictColumns(columns ...string) *RealtimeWarehousingUpsertBulk {
	rwcb.conflict = append(rwcb.conflict, sql.ConflictColumns(columns...))
	return &RealtimeWarehousingUpsertBulk{
		create: rwcb,
	}
}

// RealtimeWarehousingUpsertBulk is the builder for "upsert"-ing
// a bulk of RealtimeWarehousing nodes.
type RealtimeWarehousingUpsertBulk struct {
	create *RealtimeWarehousingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(realtimewarehousing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertBulk) UpdateNewValues() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(realtimewarehousing.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(realtimewarehousing.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertBulk) Ignore() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealtimeWarehousingUpsertBulk) DoNothing() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealtimeWarehousingCreateBulk.OnConflict
// documentation for more info.
func (u *RealtimeWarehousingUpsertBulk) Update(set func(*RealtimeWarehousingUpsert)) *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealtimeWarehousingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RealtimeWarehousingUpsertBulk) SetUpdateTime(v int64) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *RealtimeWarehousingUpsertBulk) AddUpdateTime(v int64) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateUpdateTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RealtimeWarehousingUpsertBulk) ClearUpdateTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RealtimeWarehousingUpsertBulk) SetDeleteTime(v int64) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *RealtimeWarehousingUpsertBulk) AddDeleteTime(v int64) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateDeleteTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RealtimeWarehousingUpsertBulk) ClearDeleteTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *RealtimeWarehousingUpsertBulk) SetName(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateName() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RealtimeWarehousingUpsertBulk) ClearName() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *RealtimeWarehousingUpsertBulk) SetStatus(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateStatus() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RealtimeWarehousingUpsertBulk) ClearStatus() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearStatus()
	})
}

// SetAppID sets the "app_id" field.
func (u *RealtimeWarehousingUpsertBulk) SetAppID(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateAppID() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *RealtimeWarehousingUpsertBulk) ClearAppID() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearAppID()
	})
}

// SetAppKey sets the "app_key" field.
func (u *RealtimeWarehousingUpsertBulk) SetAppKey(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateAppKey() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *RealtimeWarehousingUpsertBulk) ClearAppKey() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearAppKey()
	})
}

// SetRemark sets the "remark" field.
func (u *RealtimeWarehousingUpsertBulk) SetRemark(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateRemark() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RealtimeWarehousingUpsertBulk) ClearRemark() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearRemark()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *RealtimeWarehousingUpsertBulk) SetCreatorID(v uint32) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetCreatorID(v)
	})
}

// AddCreatorID adds v to the "creator_id" field.
func (u *RealtimeWarehousingUpsertBulk) AddCreatorID(v uint32) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.AddCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateCreatorID() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateCreatorID()
	})
}

// ClearCreatorID clears the value of the "creator_id" field.
func (u *RealtimeWarehousingUpsertBulk) ClearCreatorID() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearCreatorID()
	})
}

// Exec executes the query.
func (u *RealtimeWarehousingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RealtimeWarehousingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealtimeWarehousingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
