// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/acceptancestatus"
	"kratos-bi/app/logger/service/internal/data/ent/predicate"
	"kratos-bi/app/logger/service/internal/data/ent/realtimewarehousing"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAcceptanceStatus    = "AcceptanceStatus"
	TypeRealtimeWarehousing = "RealtimeWarehousing"
)

// AcceptanceStatusMutation represents an operation that mutates the AcceptanceStatus nodes in the graph.
type AcceptanceStatusMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	data_name      *string
	report_type    *string
	report_data    *string
	status         *int32
	addstatus      *int32
	error_reason   *string
	error_handling *string
	part_event     *string
	part_date      *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*AcceptanceStatus, error)
	predicates     []predicate.AcceptanceStatus
}

var _ ent.Mutation = (*AcceptanceStatusMutation)(nil)

// acceptancestatusOption allows management of the mutation configuration using functional options.
type acceptancestatusOption func(*AcceptanceStatusMutation)

// newAcceptanceStatusMutation creates new mutation for the AcceptanceStatus entity.
func newAcceptanceStatusMutation(c config, op Op, opts ...acceptancestatusOption) *AcceptanceStatusMutation {
	m := &AcceptanceStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeAcceptanceStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAcceptanceStatusID sets the ID field of the mutation.
func withAcceptanceStatusID(id int64) acceptancestatusOption {
	return func(m *AcceptanceStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *AcceptanceStatus
		)
		m.oldValue = func(ctx context.Context) (*AcceptanceStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AcceptanceStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAcceptanceStatus sets the old AcceptanceStatus of the mutation.
func withAcceptanceStatus(node *AcceptanceStatus) acceptancestatusOption {
	return func(m *AcceptanceStatusMutation) {
		m.oldValue = func(context.Context) (*AcceptanceStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AcceptanceStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AcceptanceStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AcceptanceStatus entities.
func (m *AcceptanceStatusMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AcceptanceStatusMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AcceptanceStatusMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AcceptanceStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDataName sets the "data_name" field.
func (m *AcceptanceStatusMutation) SetDataName(s string) {
	m.data_name = &s
}

// DataName returns the value of the "data_name" field in the mutation.
func (m *AcceptanceStatusMutation) DataName() (r string, exists bool) {
	v := m.data_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDataName returns the old "data_name" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldDataName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataName: %w", err)
	}
	return oldValue.DataName, nil
}

// ClearDataName clears the value of the "data_name" field.
func (m *AcceptanceStatusMutation) ClearDataName() {
	m.data_name = nil
	m.clearedFields[acceptancestatus.FieldDataName] = struct{}{}
}

// DataNameCleared returns if the "data_name" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) DataNameCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldDataName]
	return ok
}

// ResetDataName resets all changes to the "data_name" field.
func (m *AcceptanceStatusMutation) ResetDataName() {
	m.data_name = nil
	delete(m.clearedFields, acceptancestatus.FieldDataName)
}

// SetReportType sets the "report_type" field.
func (m *AcceptanceStatusMutation) SetReportType(s string) {
	m.report_type = &s
}

// ReportType returns the value of the "report_type" field in the mutation.
func (m *AcceptanceStatusMutation) ReportType() (r string, exists bool) {
	v := m.report_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReportType returns the old "report_type" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldReportType(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportType: %w", err)
	}
	return oldValue.ReportType, nil
}

// ClearReportType clears the value of the "report_type" field.
func (m *AcceptanceStatusMutation) ClearReportType() {
	m.report_type = nil
	m.clearedFields[acceptancestatus.FieldReportType] = struct{}{}
}

// ReportTypeCleared returns if the "report_type" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) ReportTypeCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldReportType]
	return ok
}

// ResetReportType resets all changes to the "report_type" field.
func (m *AcceptanceStatusMutation) ResetReportType() {
	m.report_type = nil
	delete(m.clearedFields, acceptancestatus.FieldReportType)
}

// SetReportData sets the "report_data" field.
func (m *AcceptanceStatusMutation) SetReportData(s string) {
	m.report_data = &s
}

// ReportData returns the value of the "report_data" field in the mutation.
func (m *AcceptanceStatusMutation) ReportData() (r string, exists bool) {
	v := m.report_data
	if v == nil {
		return
	}
	return *v, true
}

// OldReportData returns the old "report_data" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldReportData(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportData: %w", err)
	}
	return oldValue.ReportData, nil
}

// ClearReportData clears the value of the "report_data" field.
func (m *AcceptanceStatusMutation) ClearReportData() {
	m.report_data = nil
	m.clearedFields[acceptancestatus.FieldReportData] = struct{}{}
}

// ReportDataCleared returns if the "report_data" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) ReportDataCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldReportData]
	return ok
}

// ResetReportData resets all changes to the "report_data" field.
func (m *AcceptanceStatusMutation) ResetReportData() {
	m.report_data = nil
	delete(m.clearedFields, acceptancestatus.FieldReportData)
}

// SetStatus sets the "status" field.
func (m *AcceptanceStatusMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AcceptanceStatusMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldStatus(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *AcceptanceStatusMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AcceptanceStatusMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *AcceptanceStatusMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[acceptancestatus.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) StatusCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *AcceptanceStatusMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, acceptancestatus.FieldStatus)
}

// SetErrorReason sets the "error_reason" field.
func (m *AcceptanceStatusMutation) SetErrorReason(s string) {
	m.error_reason = &s
}

// ErrorReason returns the value of the "error_reason" field in the mutation.
func (m *AcceptanceStatusMutation) ErrorReason() (r string, exists bool) {
	v := m.error_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorReason returns the old "error_reason" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldErrorReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorReason: %w", err)
	}
	return oldValue.ErrorReason, nil
}

// ClearErrorReason clears the value of the "error_reason" field.
func (m *AcceptanceStatusMutation) ClearErrorReason() {
	m.error_reason = nil
	m.clearedFields[acceptancestatus.FieldErrorReason] = struct{}{}
}

// ErrorReasonCleared returns if the "error_reason" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) ErrorReasonCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldErrorReason]
	return ok
}

// ResetErrorReason resets all changes to the "error_reason" field.
func (m *AcceptanceStatusMutation) ResetErrorReason() {
	m.error_reason = nil
	delete(m.clearedFields, acceptancestatus.FieldErrorReason)
}

// SetErrorHandling sets the "error_handling" field.
func (m *AcceptanceStatusMutation) SetErrorHandling(s string) {
	m.error_handling = &s
}

// ErrorHandling returns the value of the "error_handling" field in the mutation.
func (m *AcceptanceStatusMutation) ErrorHandling() (r string, exists bool) {
	v := m.error_handling
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorHandling returns the old "error_handling" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldErrorHandling(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorHandling is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorHandling requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorHandling: %w", err)
	}
	return oldValue.ErrorHandling, nil
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (m *AcceptanceStatusMutation) ClearErrorHandling() {
	m.error_handling = nil
	m.clearedFields[acceptancestatus.FieldErrorHandling] = struct{}{}
}

// ErrorHandlingCleared returns if the "error_handling" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) ErrorHandlingCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldErrorHandling]
	return ok
}

// ResetErrorHandling resets all changes to the "error_handling" field.
func (m *AcceptanceStatusMutation) ResetErrorHandling() {
	m.error_handling = nil
	delete(m.clearedFields, acceptancestatus.FieldErrorHandling)
}

// SetPartEvent sets the "part_event" field.
func (m *AcceptanceStatusMutation) SetPartEvent(s string) {
	m.part_event = &s
}

// PartEvent returns the value of the "part_event" field in the mutation.
func (m *AcceptanceStatusMutation) PartEvent() (r string, exists bool) {
	v := m.part_event
	if v == nil {
		return
	}
	return *v, true
}

// OldPartEvent returns the old "part_event" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldPartEvent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartEvent: %w", err)
	}
	return oldValue.PartEvent, nil
}

// ClearPartEvent clears the value of the "part_event" field.
func (m *AcceptanceStatusMutation) ClearPartEvent() {
	m.part_event = nil
	m.clearedFields[acceptancestatus.FieldPartEvent] = struct{}{}
}

// PartEventCleared returns if the "part_event" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) PartEventCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldPartEvent]
	return ok
}

// ResetPartEvent resets all changes to the "part_event" field.
func (m *AcceptanceStatusMutation) ResetPartEvent() {
	m.part_event = nil
	delete(m.clearedFields, acceptancestatus.FieldPartEvent)
}

// SetPartDate sets the "part_date" field.
func (m *AcceptanceStatusMutation) SetPartDate(t time.Time) {
	m.part_date = &t
}

// PartDate returns the value of the "part_date" field in the mutation.
func (m *AcceptanceStatusMutation) PartDate() (r time.Time, exists bool) {
	v := m.part_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPartDate returns the old "part_date" field's value of the AcceptanceStatus entity.
// If the AcceptanceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcceptanceStatusMutation) OldPartDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartDate: %w", err)
	}
	return oldValue.PartDate, nil
}

// ClearPartDate clears the value of the "part_date" field.
func (m *AcceptanceStatusMutation) ClearPartDate() {
	m.part_date = nil
	m.clearedFields[acceptancestatus.FieldPartDate] = struct{}{}
}

// PartDateCleared returns if the "part_date" field was cleared in this mutation.
func (m *AcceptanceStatusMutation) PartDateCleared() bool {
	_, ok := m.clearedFields[acceptancestatus.FieldPartDate]
	return ok
}

// ResetPartDate resets all changes to the "part_date" field.
func (m *AcceptanceStatusMutation) ResetPartDate() {
	m.part_date = nil
	delete(m.clearedFields, acceptancestatus.FieldPartDate)
}

// Where appends a list predicates to the AcceptanceStatusMutation builder.
func (m *AcceptanceStatusMutation) Where(ps ...predicate.AcceptanceStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AcceptanceStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AcceptanceStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AcceptanceStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AcceptanceStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AcceptanceStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AcceptanceStatus).
func (m *AcceptanceStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AcceptanceStatusMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.data_name != nil {
		fields = append(fields, acceptancestatus.FieldDataName)
	}
	if m.report_type != nil {
		fields = append(fields, acceptancestatus.FieldReportType)
	}
	if m.report_data != nil {
		fields = append(fields, acceptancestatus.FieldReportData)
	}
	if m.status != nil {
		fields = append(fields, acceptancestatus.FieldStatus)
	}
	if m.error_reason != nil {
		fields = append(fields, acceptancestatus.FieldErrorReason)
	}
	if m.error_handling != nil {
		fields = append(fields, acceptancestatus.FieldErrorHandling)
	}
	if m.part_event != nil {
		fields = append(fields, acceptancestatus.FieldPartEvent)
	}
	if m.part_date != nil {
		fields = append(fields, acceptancestatus.FieldPartDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AcceptanceStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case acceptancestatus.FieldDataName:
		return m.DataName()
	case acceptancestatus.FieldReportType:
		return m.ReportType()
	case acceptancestatus.FieldReportData:
		return m.ReportData()
	case acceptancestatus.FieldStatus:
		return m.Status()
	case acceptancestatus.FieldErrorReason:
		return m.ErrorReason()
	case acceptancestatus.FieldErrorHandling:
		return m.ErrorHandling()
	case acceptancestatus.FieldPartEvent:
		return m.PartEvent()
	case acceptancestatus.FieldPartDate:
		return m.PartDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AcceptanceStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case acceptancestatus.FieldDataName:
		return m.OldDataName(ctx)
	case acceptancestatus.FieldReportType:
		return m.OldReportType(ctx)
	case acceptancestatus.FieldReportData:
		return m.OldReportData(ctx)
	case acceptancestatus.FieldStatus:
		return m.OldStatus(ctx)
	case acceptancestatus.FieldErrorReason:
		return m.OldErrorReason(ctx)
	case acceptancestatus.FieldErrorHandling:
		return m.OldErrorHandling(ctx)
	case acceptancestatus.FieldPartEvent:
		return m.OldPartEvent(ctx)
	case acceptancestatus.FieldPartDate:
		return m.OldPartDate(ctx)
	}
	return nil, fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcceptanceStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case acceptancestatus.FieldDataName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataName(v)
		return nil
	case acceptancestatus.FieldReportType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportType(v)
		return nil
	case acceptancestatus.FieldReportData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportData(v)
		return nil
	case acceptancestatus.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case acceptancestatus.FieldErrorReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorReason(v)
		return nil
	case acceptancestatus.FieldErrorHandling:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorHandling(v)
		return nil
	case acceptancestatus.FieldPartEvent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartEvent(v)
		return nil
	case acceptancestatus.FieldPartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartDate(v)
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AcceptanceStatusMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, acceptancestatus.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AcceptanceStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case acceptancestatus.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcceptanceStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case acceptancestatus.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AcceptanceStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(acceptancestatus.FieldDataName) {
		fields = append(fields, acceptancestatus.FieldDataName)
	}
	if m.FieldCleared(acceptancestatus.FieldReportType) {
		fields = append(fields, acceptancestatus.FieldReportType)
	}
	if m.FieldCleared(acceptancestatus.FieldReportData) {
		fields = append(fields, acceptancestatus.FieldReportData)
	}
	if m.FieldCleared(acceptancestatus.FieldStatus) {
		fields = append(fields, acceptancestatus.FieldStatus)
	}
	if m.FieldCleared(acceptancestatus.FieldErrorReason) {
		fields = append(fields, acceptancestatus.FieldErrorReason)
	}
	if m.FieldCleared(acceptancestatus.FieldErrorHandling) {
		fields = append(fields, acceptancestatus.FieldErrorHandling)
	}
	if m.FieldCleared(acceptancestatus.FieldPartEvent) {
		fields = append(fields, acceptancestatus.FieldPartEvent)
	}
	if m.FieldCleared(acceptancestatus.FieldPartDate) {
		fields = append(fields, acceptancestatus.FieldPartDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AcceptanceStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AcceptanceStatusMutation) ClearField(name string) error {
	switch name {
	case acceptancestatus.FieldDataName:
		m.ClearDataName()
		return nil
	case acceptancestatus.FieldReportType:
		m.ClearReportType()
		return nil
	case acceptancestatus.FieldReportData:
		m.ClearReportData()
		return nil
	case acceptancestatus.FieldStatus:
		m.ClearStatus()
		return nil
	case acceptancestatus.FieldErrorReason:
		m.ClearErrorReason()
		return nil
	case acceptancestatus.FieldErrorHandling:
		m.ClearErrorHandling()
		return nil
	case acceptancestatus.FieldPartEvent:
		m.ClearPartEvent()
		return nil
	case acceptancestatus.FieldPartDate:
		m.ClearPartDate()
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AcceptanceStatusMutation) ResetField(name string) error {
	switch name {
	case acceptancestatus.FieldDataName:
		m.ResetDataName()
		return nil
	case acceptancestatus.FieldReportType:
		m.ResetReportType()
		return nil
	case acceptancestatus.FieldReportData:
		m.ResetReportData()
		return nil
	case acceptancestatus.FieldStatus:
		m.ResetStatus()
		return nil
	case acceptancestatus.FieldErrorReason:
		m.ResetErrorReason()
		return nil
	case acceptancestatus.FieldErrorHandling:
		m.ResetErrorHandling()
		return nil
	case acceptancestatus.FieldPartEvent:
		m.ResetPartEvent()
		return nil
	case acceptancestatus.FieldPartDate:
		m.ResetPartDate()
		return nil
	}
	return fmt.Errorf("unknown AcceptanceStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AcceptanceStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AcceptanceStatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AcceptanceStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AcceptanceStatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AcceptanceStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AcceptanceStatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AcceptanceStatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AcceptanceStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AcceptanceStatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AcceptanceStatus edge %s", name)
}

// RealtimeWarehousingMutation represents an operation that mutates the RealtimeWarehousing nodes in the graph.
type RealtimeWarehousingMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	event_name    *string
	report_data   *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RealtimeWarehousing, error)
	predicates    []predicate.RealtimeWarehousing
}

var _ ent.Mutation = (*RealtimeWarehousingMutation)(nil)

// realtimewarehousingOption allows management of the mutation configuration using functional options.
type realtimewarehousingOption func(*RealtimeWarehousingMutation)

// newRealtimeWarehousingMutation creates new mutation for the RealtimeWarehousing entity.
func newRealtimeWarehousingMutation(c config, op Op, opts ...realtimewarehousingOption) *RealtimeWarehousingMutation {
	m := &RealtimeWarehousingMutation{
		config:        c,
		op:            op,
		typ:           TypeRealtimeWarehousing,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRealtimeWarehousingID sets the ID field of the mutation.
func withRealtimeWarehousingID(id int64) realtimewarehousingOption {
	return func(m *RealtimeWarehousingMutation) {
		var (
			err   error
			once  sync.Once
			value *RealtimeWarehousing
		)
		m.oldValue = func(ctx context.Context) (*RealtimeWarehousing, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RealtimeWarehousing.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRealtimeWarehousing sets the old RealtimeWarehousing of the mutation.
func withRealtimeWarehousing(node *RealtimeWarehousing) realtimewarehousingOption {
	return func(m *RealtimeWarehousingMutation) {
		m.oldValue = func(context.Context) (*RealtimeWarehousing, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RealtimeWarehousingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RealtimeWarehousingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RealtimeWarehousing entities.
func (m *RealtimeWarehousingMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RealtimeWarehousingMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RealtimeWarehousingMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RealtimeWarehousing.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventName sets the "event_name" field.
func (m *RealtimeWarehousingMutation) SetEventName(s string) {
	m.event_name = &s
}

// EventName returns the value of the "event_name" field in the mutation.
func (m *RealtimeWarehousingMutation) EventName() (r string, exists bool) {
	v := m.event_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEventName returns the old "event_name" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldEventName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventName: %w", err)
	}
	return oldValue.EventName, nil
}

// ClearEventName clears the value of the "event_name" field.
func (m *RealtimeWarehousingMutation) ClearEventName() {
	m.event_name = nil
	m.clearedFields[realtimewarehousing.FieldEventName] = struct{}{}
}

// EventNameCleared returns if the "event_name" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) EventNameCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldEventName]
	return ok
}

// ResetEventName resets all changes to the "event_name" field.
func (m *RealtimeWarehousingMutation) ResetEventName() {
	m.event_name = nil
	delete(m.clearedFields, realtimewarehousing.FieldEventName)
}

// SetReportData sets the "report_data" field.
func (m *RealtimeWarehousingMutation) SetReportData(s string) {
	m.report_data = &s
}

// ReportData returns the value of the "report_data" field in the mutation.
func (m *RealtimeWarehousingMutation) ReportData() (r string, exists bool) {
	v := m.report_data
	if v == nil {
		return
	}
	return *v, true
}

// OldReportData returns the old "report_data" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldReportData(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportData: %w", err)
	}
	return oldValue.ReportData, nil
}

// ClearReportData clears the value of the "report_data" field.
func (m *RealtimeWarehousingMutation) ClearReportData() {
	m.report_data = nil
	m.clearedFields[realtimewarehousing.FieldReportData] = struct{}{}
}

// ReportDataCleared returns if the "report_data" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) ReportDataCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldReportData]
	return ok
}

// ResetReportData resets all changes to the "report_data" field.
func (m *RealtimeWarehousingMutation) ResetReportData() {
	m.report_data = nil
	delete(m.clearedFields, realtimewarehousing.FieldReportData)
}

// SetCreateTime sets the "create_time" field.
func (m *RealtimeWarehousingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RealtimeWarehousingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the RealtimeWarehousing entity.
// If the RealtimeWarehousing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtimeWarehousingMutation) OldCreateTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *RealtimeWarehousingMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[realtimewarehousing.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *RealtimeWarehousingMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[realtimewarehousing.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RealtimeWarehousingMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, realtimewarehousing.FieldCreateTime)
}

// Where appends a list predicates to the RealtimeWarehousingMutation builder.
func (m *RealtimeWarehousingMutation) Where(ps ...predicate.RealtimeWarehousing) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RealtimeWarehousingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RealtimeWarehousingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RealtimeWarehousing, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RealtimeWarehousingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RealtimeWarehousingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RealtimeWarehousing).
func (m *RealtimeWarehousingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RealtimeWarehousingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.event_name != nil {
		fields = append(fields, realtimewarehousing.FieldEventName)
	}
	if m.report_data != nil {
		fields = append(fields, realtimewarehousing.FieldReportData)
	}
	if m.create_time != nil {
		fields = append(fields, realtimewarehousing.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RealtimeWarehousingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case realtimewarehousing.FieldEventName:
		return m.EventName()
	case realtimewarehousing.FieldReportData:
		return m.ReportData()
	case realtimewarehousing.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RealtimeWarehousingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case realtimewarehousing.FieldEventName:
		return m.OldEventName(ctx)
	case realtimewarehousing.FieldReportData:
		return m.OldReportData(ctx)
	case realtimewarehousing.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtimeWarehousingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case realtimewarehousing.FieldEventName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventName(v)
		return nil
	case realtimewarehousing.FieldReportData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportData(v)
		return nil
	case realtimewarehousing.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RealtimeWarehousingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RealtimeWarehousingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtimeWarehousingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RealtimeWarehousing numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RealtimeWarehousingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(realtimewarehousing.FieldEventName) {
		fields = append(fields, realtimewarehousing.FieldEventName)
	}
	if m.FieldCleared(realtimewarehousing.FieldReportData) {
		fields = append(fields, realtimewarehousing.FieldReportData)
	}
	if m.FieldCleared(realtimewarehousing.FieldCreateTime) {
		fields = append(fields, realtimewarehousing.FieldCreateTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RealtimeWarehousingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RealtimeWarehousingMutation) ClearField(name string) error {
	switch name {
	case realtimewarehousing.FieldEventName:
		m.ClearEventName()
		return nil
	case realtimewarehousing.FieldReportData:
		m.ClearReportData()
		return nil
	case realtimewarehousing.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RealtimeWarehousingMutation) ResetField(name string) error {
	switch name {
	case realtimewarehousing.FieldEventName:
		m.ResetEventName()
		return nil
	case realtimewarehousing.FieldReportData:
		m.ResetReportData()
		return nil
	case realtimewarehousing.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown RealtimeWarehousing field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RealtimeWarehousingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RealtimeWarehousingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RealtimeWarehousingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RealtimeWarehousingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RealtimeWarehousingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RealtimeWarehousingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RealtimeWarehousingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RealtimeWarehousing unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RealtimeWarehousingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RealtimeWarehousing edge %s", name)
}
