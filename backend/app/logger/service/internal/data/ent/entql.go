// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-bi/app/logger/service/internal/data/ent/acceptancestatus"
	"kratos-bi/app/logger/service/internal/data/ent/realtimewarehousing"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   acceptancestatus.Table,
			Columns: acceptancestatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: acceptancestatus.FieldID,
			},
		},
		Type: "AcceptanceStatus",
		Fields: map[string]*sqlgraph.FieldSpec{
			acceptancestatus.FieldDataName:      {Type: field.TypeString, Column: acceptancestatus.FieldDataName},
			acceptancestatus.FieldReportType:    {Type: field.TypeString, Column: acceptancestatus.FieldReportType},
			acceptancestatus.FieldReportData:    {Type: field.TypeString, Column: acceptancestatus.FieldReportData},
			acceptancestatus.FieldStatus:        {Type: field.TypeInt32, Column: acceptancestatus.FieldStatus},
			acceptancestatus.FieldErrorReason:   {Type: field.TypeString, Column: acceptancestatus.FieldErrorReason},
			acceptancestatus.FieldErrorHandling: {Type: field.TypeString, Column: acceptancestatus.FieldErrorHandling},
			acceptancestatus.FieldPartEvent:     {Type: field.TypeString, Column: acceptancestatus.FieldPartEvent},
			acceptancestatus.FieldPartDate:      {Type: field.TypeTime, Column: acceptancestatus.FieldPartDate},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   realtimewarehousing.Table,
			Columns: realtimewarehousing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: realtimewarehousing.FieldID,
			},
		},
		Type: "RealtimeWarehousing",
		Fields: map[string]*sqlgraph.FieldSpec{
			realtimewarehousing.FieldEventName:  {Type: field.TypeString, Column: realtimewarehousing.FieldEventName},
			realtimewarehousing.FieldReportData: {Type: field.TypeString, Column: realtimewarehousing.FieldReportData},
			realtimewarehousing.FieldCreateTime: {Type: field.TypeTime, Column: realtimewarehousing.FieldCreateTime},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (asq *AcceptanceStatusQuery) addPredicate(pred func(s *sql.Selector)) {
	asq.predicates = append(asq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AcceptanceStatusQuery builder.
func (asq *AcceptanceStatusQuery) Filter() *AcceptanceStatusFilter {
	return &AcceptanceStatusFilter{config: asq.config, predicateAdder: asq}
}

// addPredicate implements the predicateAdder interface.
func (m *AcceptanceStatusMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AcceptanceStatusMutation builder.
func (m *AcceptanceStatusMutation) Filter() *AcceptanceStatusFilter {
	return &AcceptanceStatusFilter{config: m.config, predicateAdder: m}
}

// AcceptanceStatusFilter provides a generic filtering capability at runtime for AcceptanceStatusQuery.
type AcceptanceStatusFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AcceptanceStatusFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *AcceptanceStatusFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(acceptancestatus.FieldID))
}

// WhereDataName applies the entql string predicate on the data_name field.
func (f *AcceptanceStatusFilter) WhereDataName(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldDataName))
}

// WhereReportType applies the entql string predicate on the report_type field.
func (f *AcceptanceStatusFilter) WhereReportType(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldReportType))
}

// WhereReportData applies the entql string predicate on the report_data field.
func (f *AcceptanceStatusFilter) WhereReportData(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldReportData))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *AcceptanceStatusFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(acceptancestatus.FieldStatus))
}

// WhereErrorReason applies the entql string predicate on the error_reason field.
func (f *AcceptanceStatusFilter) WhereErrorReason(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldErrorReason))
}

// WhereErrorHandling applies the entql string predicate on the error_handling field.
func (f *AcceptanceStatusFilter) WhereErrorHandling(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldErrorHandling))
}

// WherePartEvent applies the entql string predicate on the part_event field.
func (f *AcceptanceStatusFilter) WherePartEvent(p entql.StringP) {
	f.Where(p.Field(acceptancestatus.FieldPartEvent))
}

// WherePartDate applies the entql time.Time predicate on the part_date field.
func (f *AcceptanceStatusFilter) WherePartDate(p entql.TimeP) {
	f.Where(p.Field(acceptancestatus.FieldPartDate))
}

// addPredicate implements the predicateAdder interface.
func (rwq *RealtimeWarehousingQuery) addPredicate(pred func(s *sql.Selector)) {
	rwq.predicates = append(rwq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RealtimeWarehousingQuery builder.
func (rwq *RealtimeWarehousingQuery) Filter() *RealtimeWarehousingFilter {
	return &RealtimeWarehousingFilter{config: rwq.config, predicateAdder: rwq}
}

// addPredicate implements the predicateAdder interface.
func (m *RealtimeWarehousingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RealtimeWarehousingMutation builder.
func (m *RealtimeWarehousingMutation) Filter() *RealtimeWarehousingFilter {
	return &RealtimeWarehousingFilter{config: m.config, predicateAdder: m}
}

// RealtimeWarehousingFilter provides a generic filtering capability at runtime for RealtimeWarehousingQuery.
type RealtimeWarehousingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RealtimeWarehousingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *RealtimeWarehousingFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(realtimewarehousing.FieldID))
}

// WhereEventName applies the entql string predicate on the event_name field.
func (f *RealtimeWarehousingFilter) WhereEventName(p entql.StringP) {
	f.Where(p.Field(realtimewarehousing.FieldEventName))
}

// WhereReportData applies the entql string predicate on the report_data field.
func (f *RealtimeWarehousingFilter) WhereReportData(p entql.StringP) {
	f.Where(p.Field(realtimewarehousing.FieldReportData))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *RealtimeWarehousingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(realtimewarehousing.FieldCreateTime))
}
