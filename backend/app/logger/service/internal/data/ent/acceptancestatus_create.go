// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/acceptancestatus"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AcceptanceStatusCreate is the builder for creating a AcceptanceStatus entity.
type AcceptanceStatusCreate struct {
	config
	mutation *AcceptanceStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDataName sets the "data_name" field.
func (asc *AcceptanceStatusCreate) SetDataName(s string) *AcceptanceStatusCreate {
	asc.mutation.SetDataName(s)
	return asc
}

// SetNillableDataName sets the "data_name" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableDataName(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetDataName(*s)
	}
	return asc
}

// SetReportType sets the "report_type" field.
func (asc *AcceptanceStatusCreate) SetReportType(s string) *AcceptanceStatusCreate {
	asc.mutation.SetReportType(s)
	return asc
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableReportType(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetReportType(*s)
	}
	return asc
}

// SetReportData sets the "report_data" field.
func (asc *AcceptanceStatusCreate) SetReportData(s string) *AcceptanceStatusCreate {
	asc.mutation.SetReportData(s)
	return asc
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableReportData(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetReportData(*s)
	}
	return asc
}

// SetStatus sets the "status" field.
func (asc *AcceptanceStatusCreate) SetStatus(i int32) *AcceptanceStatusCreate {
	asc.mutation.SetStatus(i)
	return asc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableStatus(i *int32) *AcceptanceStatusCreate {
	if i != nil {
		asc.SetStatus(*i)
	}
	return asc
}

// SetErrorReason sets the "error_reason" field.
func (asc *AcceptanceStatusCreate) SetErrorReason(s string) *AcceptanceStatusCreate {
	asc.mutation.SetErrorReason(s)
	return asc
}

// SetNillableErrorReason sets the "error_reason" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableErrorReason(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetErrorReason(*s)
	}
	return asc
}

// SetErrorHandling sets the "error_handling" field.
func (asc *AcceptanceStatusCreate) SetErrorHandling(s string) *AcceptanceStatusCreate {
	asc.mutation.SetErrorHandling(s)
	return asc
}

// SetNillableErrorHandling sets the "error_handling" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillableErrorHandling(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetErrorHandling(*s)
	}
	return asc
}

// SetPartEvent sets the "part_event" field.
func (asc *AcceptanceStatusCreate) SetPartEvent(s string) *AcceptanceStatusCreate {
	asc.mutation.SetPartEvent(s)
	return asc
}

// SetNillablePartEvent sets the "part_event" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillablePartEvent(s *string) *AcceptanceStatusCreate {
	if s != nil {
		asc.SetPartEvent(*s)
	}
	return asc
}

// SetPartDate sets the "part_date" field.
func (asc *AcceptanceStatusCreate) SetPartDate(t time.Time) *AcceptanceStatusCreate {
	asc.mutation.SetPartDate(t)
	return asc
}

// SetNillablePartDate sets the "part_date" field if the given value is not nil.
func (asc *AcceptanceStatusCreate) SetNillablePartDate(t *time.Time) *AcceptanceStatusCreate {
	if t != nil {
		asc.SetPartDate(*t)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AcceptanceStatusCreate) SetID(i int64) *AcceptanceStatusCreate {
	asc.mutation.SetID(i)
	return asc
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asc *AcceptanceStatusCreate) Mutation() *AcceptanceStatusMutation {
	return asc.mutation
}

// Save creates the AcceptanceStatus in the database.
func (asc *AcceptanceStatusCreate) Save(ctx context.Context) (*AcceptanceStatus, error) {
	return withHooks[*AcceptanceStatus, AcceptanceStatusMutation](ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AcceptanceStatusCreate) SaveX(ctx context.Context) *AcceptanceStatus {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AcceptanceStatusCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AcceptanceStatusCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AcceptanceStatusCreate) check() error {
	if v, ok := asc.mutation.DataName(); ok {
		if err := acceptancestatus.DataNameValidator(v); err != nil {
			return &ValidationError{Name: "data_name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.data_name": %w`, err)}
		}
	}
	if v, ok := asc.mutation.ID(); ok {
		if err := acceptancestatus.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.id": %w`, err)}
		}
	}
	return nil
}

func (asc *AcceptanceStatusCreate) sqlSave(ctx context.Context) (*AcceptanceStatus, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AcceptanceStatusCreate) createSpec() (*AcceptanceStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &AcceptanceStatus{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(acceptancestatus.Table, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.DataName(); ok {
		_spec.SetField(acceptancestatus.FieldDataName, field.TypeString, value)
		_node.DataName = &value
	}
	if value, ok := asc.mutation.ReportType(); ok {
		_spec.SetField(acceptancestatus.FieldReportType, field.TypeString, value)
		_node.ReportType = &value
	}
	if value, ok := asc.mutation.ReportData(); ok {
		_spec.SetField(acceptancestatus.FieldReportData, field.TypeString, value)
		_node.ReportData = &value
	}
	if value, ok := asc.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeInt32, value)
		_node.Status = &value
	}
	if value, ok := asc.mutation.ErrorReason(); ok {
		_spec.SetField(acceptancestatus.FieldErrorReason, field.TypeString, value)
		_node.ErrorReason = &value
	}
	if value, ok := asc.mutation.ErrorHandling(); ok {
		_spec.SetField(acceptancestatus.FieldErrorHandling, field.TypeString, value)
		_node.ErrorHandling = &value
	}
	if value, ok := asc.mutation.PartEvent(); ok {
		_spec.SetField(acceptancestatus.FieldPartEvent, field.TypeString, value)
		_node.PartEvent = &value
	}
	if value, ok := asc.mutation.PartDate(); ok {
		_spec.SetField(acceptancestatus.FieldPartDate, field.TypeTime, value)
		_node.PartDate = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AcceptanceStatus.Create().
//		SetDataName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AcceptanceStatusUpsert) {
//			SetDataName(v+v).
//		}).
//		Exec(ctx)
func (asc *AcceptanceStatusCreate) OnConflict(opts ...sql.ConflictOption) *AcceptanceStatusUpsertOne {
	asc.conflict = opts
	return &AcceptanceStatusUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AcceptanceStatusCreate) OnConflictColumns(columns ...string) *AcceptanceStatusUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AcceptanceStatusUpsertOne{
		create: asc,
	}
}

type (
	// AcceptanceStatusUpsertOne is the builder for "upsert"-ing
	//  one AcceptanceStatus node.
	AcceptanceStatusUpsertOne struct {
		create *AcceptanceStatusCreate
	}

	// AcceptanceStatusUpsert is the "OnConflict" setter.
	AcceptanceStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetDataName sets the "data_name" field.
func (u *AcceptanceStatusUpsert) SetDataName(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldDataName, v)
	return u
}

// UpdateDataName sets the "data_name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateDataName() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldDataName)
	return u
}

// ClearDataName clears the value of the "data_name" field.
func (u *AcceptanceStatusUpsert) ClearDataName() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldDataName)
	return u
}

// SetReportType sets the "report_type" field.
func (u *AcceptanceStatusUpsert) SetReportType(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldReportType, v)
	return u
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateReportType() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldReportType)
	return u
}

// ClearReportType clears the value of the "report_type" field.
func (u *AcceptanceStatusUpsert) ClearReportType() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldReportType)
	return u
}

// SetReportData sets the "report_data" field.
func (u *AcceptanceStatusUpsert) SetReportData(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldReportData, v)
	return u
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateReportData() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldReportData)
	return u
}

// ClearReportData clears the value of the "report_data" field.
func (u *AcceptanceStatusUpsert) ClearReportData() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldReportData)
	return u
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsert) SetStatus(v int32) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateStatus() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AcceptanceStatusUpsert) AddStatus(v int32) *AcceptanceStatusUpsert {
	u.Add(acceptancestatus.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsert) ClearStatus() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldStatus)
	return u
}

// SetErrorReason sets the "error_reason" field.
func (u *AcceptanceStatusUpsert) SetErrorReason(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldErrorReason, v)
	return u
}

// UpdateErrorReason sets the "error_reason" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateErrorReason() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldErrorReason)
	return u
}

// ClearErrorReason clears the value of the "error_reason" field.
func (u *AcceptanceStatusUpsert) ClearErrorReason() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldErrorReason)
	return u
}

// SetErrorHandling sets the "error_handling" field.
func (u *AcceptanceStatusUpsert) SetErrorHandling(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldErrorHandling, v)
	return u
}

// UpdateErrorHandling sets the "error_handling" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdateErrorHandling() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldErrorHandling)
	return u
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (u *AcceptanceStatusUpsert) ClearErrorHandling() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldErrorHandling)
	return u
}

// SetPartEvent sets the "part_event" field.
func (u *AcceptanceStatusUpsert) SetPartEvent(v string) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldPartEvent, v)
	return u
}

// UpdatePartEvent sets the "part_event" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdatePartEvent() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldPartEvent)
	return u
}

// ClearPartEvent clears the value of the "part_event" field.
func (u *AcceptanceStatusUpsert) ClearPartEvent() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldPartEvent)
	return u
}

// SetPartDate sets the "part_date" field.
func (u *AcceptanceStatusUpsert) SetPartDate(v time.Time) *AcceptanceStatusUpsert {
	u.Set(acceptancestatus.FieldPartDate, v)
	return u
}

// UpdatePartDate sets the "part_date" field to the value that was provided on create.
func (u *AcceptanceStatusUpsert) UpdatePartDate() *AcceptanceStatusUpsert {
	u.SetExcluded(acceptancestatus.FieldPartDate)
	return u
}

// ClearPartDate clears the value of the "part_date" field.
func (u *AcceptanceStatusUpsert) ClearPartDate() *AcceptanceStatusUpsert {
	u.SetNull(acceptancestatus.FieldPartDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(acceptancestatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertOne) UpdateNewValues() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(acceptancestatus.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AcceptanceStatusUpsertOne) Ignore() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AcceptanceStatusUpsertOne) DoNothing() *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AcceptanceStatusCreate.OnConflict
// documentation for more info.
func (u *AcceptanceStatusUpsertOne) Update(set func(*AcceptanceStatusUpsert)) *AcceptanceStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AcceptanceStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetDataName sets the "data_name" field.
func (u *AcceptanceStatusUpsertOne) SetDataName(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetDataName(v)
	})
}

// UpdateDataName sets the "data_name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateDataName() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateDataName()
	})
}

// ClearDataName clears the value of the "data_name" field.
func (u *AcceptanceStatusUpsertOne) ClearDataName() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearDataName()
	})
}

// SetReportType sets the "report_type" field.
func (u *AcceptanceStatusUpsertOne) SetReportType(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetReportType(v)
	})
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateReportType() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateReportType()
	})
}

// ClearReportType clears the value of the "report_type" field.
func (u *AcceptanceStatusUpsertOne) ClearReportType() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearReportType()
	})
}

// SetReportData sets the "report_data" field.
func (u *AcceptanceStatusUpsertOne) SetReportData(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetReportData(v)
	})
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateReportData() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateReportData()
	})
}

// ClearReportData clears the value of the "report_data" field.
func (u *AcceptanceStatusUpsertOne) ClearReportData() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearReportData()
	})
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsertOne) SetStatus(v int32) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AcceptanceStatusUpsertOne) AddStatus(v int32) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateStatus() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsertOne) ClearStatus() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearStatus()
	})
}

// SetErrorReason sets the "error_reason" field.
func (u *AcceptanceStatusUpsertOne) SetErrorReason(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetErrorReason(v)
	})
}

// UpdateErrorReason sets the "error_reason" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateErrorReason() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateErrorReason()
	})
}

// ClearErrorReason clears the value of the "error_reason" field.
func (u *AcceptanceStatusUpsertOne) ClearErrorReason() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearErrorReason()
	})
}

// SetErrorHandling sets the "error_handling" field.
func (u *AcceptanceStatusUpsertOne) SetErrorHandling(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetErrorHandling(v)
	})
}

// UpdateErrorHandling sets the "error_handling" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdateErrorHandling() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateErrorHandling()
	})
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (u *AcceptanceStatusUpsertOne) ClearErrorHandling() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearErrorHandling()
	})
}

// SetPartEvent sets the "part_event" field.
func (u *AcceptanceStatusUpsertOne) SetPartEvent(v string) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetPartEvent(v)
	})
}

// UpdatePartEvent sets the "part_event" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdatePartEvent() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdatePartEvent()
	})
}

// ClearPartEvent clears the value of the "part_event" field.
func (u *AcceptanceStatusUpsertOne) ClearPartEvent() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearPartEvent()
	})
}

// SetPartDate sets the "part_date" field.
func (u *AcceptanceStatusUpsertOne) SetPartDate(v time.Time) *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetPartDate(v)
	})
}

// UpdatePartDate sets the "part_date" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertOne) UpdatePartDate() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdatePartDate()
	})
}

// ClearPartDate clears the value of the "part_date" field.
func (u *AcceptanceStatusUpsertOne) ClearPartDate() *AcceptanceStatusUpsertOne {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearPartDate()
	})
}

// Exec executes the query.
func (u *AcceptanceStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AcceptanceStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AcceptanceStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AcceptanceStatusUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AcceptanceStatusUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AcceptanceStatusCreateBulk is the builder for creating many AcceptanceStatus entities in bulk.
type AcceptanceStatusCreateBulk struct {
	config
	builders []*AcceptanceStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the AcceptanceStatus entities in the database.
func (ascb *AcceptanceStatusCreateBulk) Save(ctx context.Context) ([]*AcceptanceStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AcceptanceStatus, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AcceptanceStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AcceptanceStatusCreateBulk) SaveX(ctx context.Context) []*AcceptanceStatus {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AcceptanceStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AcceptanceStatusCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AcceptanceStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AcceptanceStatusUpsert) {
//			SetDataName(v+v).
//		}).
//		Exec(ctx)
func (ascb *AcceptanceStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *AcceptanceStatusUpsertBulk {
	ascb.conflict = opts
	return &AcceptanceStatusUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AcceptanceStatusCreateBulk) OnConflictColumns(columns ...string) *AcceptanceStatusUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AcceptanceStatusUpsertBulk{
		create: ascb,
	}
}

// AcceptanceStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of AcceptanceStatus nodes.
type AcceptanceStatusUpsertBulk struct {
	create *AcceptanceStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(acceptancestatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertBulk) UpdateNewValues() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(acceptancestatus.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AcceptanceStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AcceptanceStatusUpsertBulk) Ignore() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AcceptanceStatusUpsertBulk) DoNothing() *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AcceptanceStatusCreateBulk.OnConflict
// documentation for more info.
func (u *AcceptanceStatusUpsertBulk) Update(set func(*AcceptanceStatusUpsert)) *AcceptanceStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AcceptanceStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetDataName sets the "data_name" field.
func (u *AcceptanceStatusUpsertBulk) SetDataName(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetDataName(v)
	})
}

// UpdateDataName sets the "data_name" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateDataName() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateDataName()
	})
}

// ClearDataName clears the value of the "data_name" field.
func (u *AcceptanceStatusUpsertBulk) ClearDataName() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearDataName()
	})
}

// SetReportType sets the "report_type" field.
func (u *AcceptanceStatusUpsertBulk) SetReportType(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetReportType(v)
	})
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateReportType() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateReportType()
	})
}

// ClearReportType clears the value of the "report_type" field.
func (u *AcceptanceStatusUpsertBulk) ClearReportType() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearReportType()
	})
}

// SetReportData sets the "report_data" field.
func (u *AcceptanceStatusUpsertBulk) SetReportData(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetReportData(v)
	})
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateReportData() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateReportData()
	})
}

// ClearReportData clears the value of the "report_data" field.
func (u *AcceptanceStatusUpsertBulk) ClearReportData() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearReportData()
	})
}

// SetStatus sets the "status" field.
func (u *AcceptanceStatusUpsertBulk) SetStatus(v int32) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AcceptanceStatusUpsertBulk) AddStatus(v int32) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateStatus() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AcceptanceStatusUpsertBulk) ClearStatus() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearStatus()
	})
}

// SetErrorReason sets the "error_reason" field.
func (u *AcceptanceStatusUpsertBulk) SetErrorReason(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetErrorReason(v)
	})
}

// UpdateErrorReason sets the "error_reason" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateErrorReason() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateErrorReason()
	})
}

// ClearErrorReason clears the value of the "error_reason" field.
func (u *AcceptanceStatusUpsertBulk) ClearErrorReason() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearErrorReason()
	})
}

// SetErrorHandling sets the "error_handling" field.
func (u *AcceptanceStatusUpsertBulk) SetErrorHandling(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetErrorHandling(v)
	})
}

// UpdateErrorHandling sets the "error_handling" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdateErrorHandling() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdateErrorHandling()
	})
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (u *AcceptanceStatusUpsertBulk) ClearErrorHandling() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearErrorHandling()
	})
}

// SetPartEvent sets the "part_event" field.
func (u *AcceptanceStatusUpsertBulk) SetPartEvent(v string) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetPartEvent(v)
	})
}

// UpdatePartEvent sets the "part_event" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdatePartEvent() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdatePartEvent()
	})
}

// ClearPartEvent clears the value of the "part_event" field.
func (u *AcceptanceStatusUpsertBulk) ClearPartEvent() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearPartEvent()
	})
}

// SetPartDate sets the "part_date" field.
func (u *AcceptanceStatusUpsertBulk) SetPartDate(v time.Time) *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.SetPartDate(v)
	})
}

// UpdatePartDate sets the "part_date" field to the value that was provided on create.
func (u *AcceptanceStatusUpsertBulk) UpdatePartDate() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.UpdatePartDate()
	})
}

// ClearPartDate clears the value of the "part_date" field.
func (u *AcceptanceStatusUpsertBulk) ClearPartDate() *AcceptanceStatusUpsertBulk {
	return u.Update(func(s *AcceptanceStatusUpsert) {
		s.ClearPartDate()
	})
}

// Exec executes the query.
func (u *AcceptanceStatusUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AcceptanceStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AcceptanceStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AcceptanceStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
