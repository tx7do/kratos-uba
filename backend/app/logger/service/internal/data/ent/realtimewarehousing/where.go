// Code generated by ent, DO NOT EDIT.

package realtimewarehousing

import (
	"kratos-bi/app/logger/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLTE(FieldID, id))
}

// EventName applies equality check predicate on the "event_name" field. It's identical to EventNameEQ.
func EventName(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldEventName, v))
}

// ReportData applies equality check predicate on the "report_data" field. It's identical to ReportDataEQ.
func ReportData(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldReportData, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldCreateTime, v))
}

// EventNameEQ applies the EQ predicate on the "event_name" field.
func EventNameEQ(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldEventName, v))
}

// EventNameNEQ applies the NEQ predicate on the "event_name" field.
func EventNameNEQ(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNEQ(FieldEventName, v))
}

// EventNameIn applies the In predicate on the "event_name" field.
func EventNameIn(vs ...string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIn(FieldEventName, vs...))
}

// EventNameNotIn applies the NotIn predicate on the "event_name" field.
func EventNameNotIn(vs ...string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotIn(FieldEventName, vs...))
}

// EventNameGT applies the GT predicate on the "event_name" field.
func EventNameGT(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGT(FieldEventName, v))
}

// EventNameGTE applies the GTE predicate on the "event_name" field.
func EventNameGTE(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGTE(FieldEventName, v))
}

// EventNameLT applies the LT predicate on the "event_name" field.
func EventNameLT(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLT(FieldEventName, v))
}

// EventNameLTE applies the LTE predicate on the "event_name" field.
func EventNameLTE(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLTE(FieldEventName, v))
}

// EventNameContains applies the Contains predicate on the "event_name" field.
func EventNameContains(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldContains(FieldEventName, v))
}

// EventNameHasPrefix applies the HasPrefix predicate on the "event_name" field.
func EventNameHasPrefix(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldHasPrefix(FieldEventName, v))
}

// EventNameHasSuffix applies the HasSuffix predicate on the "event_name" field.
func EventNameHasSuffix(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldHasSuffix(FieldEventName, v))
}

// EventNameIsNil applies the IsNil predicate on the "event_name" field.
func EventNameIsNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIsNull(FieldEventName))
}

// EventNameNotNil applies the NotNil predicate on the "event_name" field.
func EventNameNotNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotNull(FieldEventName))
}

// EventNameEqualFold applies the EqualFold predicate on the "event_name" field.
func EventNameEqualFold(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEqualFold(FieldEventName, v))
}

// EventNameContainsFold applies the ContainsFold predicate on the "event_name" field.
func EventNameContainsFold(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldContainsFold(FieldEventName, v))
}

// ReportDataEQ applies the EQ predicate on the "report_data" field.
func ReportDataEQ(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldReportData, v))
}

// ReportDataNEQ applies the NEQ predicate on the "report_data" field.
func ReportDataNEQ(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNEQ(FieldReportData, v))
}

// ReportDataIn applies the In predicate on the "report_data" field.
func ReportDataIn(vs ...string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIn(FieldReportData, vs...))
}

// ReportDataNotIn applies the NotIn predicate on the "report_data" field.
func ReportDataNotIn(vs ...string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotIn(FieldReportData, vs...))
}

// ReportDataGT applies the GT predicate on the "report_data" field.
func ReportDataGT(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGT(FieldReportData, v))
}

// ReportDataGTE applies the GTE predicate on the "report_data" field.
func ReportDataGTE(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGTE(FieldReportData, v))
}

// ReportDataLT applies the LT predicate on the "report_data" field.
func ReportDataLT(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLT(FieldReportData, v))
}

// ReportDataLTE applies the LTE predicate on the "report_data" field.
func ReportDataLTE(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLTE(FieldReportData, v))
}

// ReportDataContains applies the Contains predicate on the "report_data" field.
func ReportDataContains(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldContains(FieldReportData, v))
}

// ReportDataHasPrefix applies the HasPrefix predicate on the "report_data" field.
func ReportDataHasPrefix(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldHasPrefix(FieldReportData, v))
}

// ReportDataHasSuffix applies the HasSuffix predicate on the "report_data" field.
func ReportDataHasSuffix(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldHasSuffix(FieldReportData, v))
}

// ReportDataIsNil applies the IsNil predicate on the "report_data" field.
func ReportDataIsNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIsNull(FieldReportData))
}

// ReportDataNotNil applies the NotNil predicate on the "report_data" field.
func ReportDataNotNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotNull(FieldReportData))
}

// ReportDataEqualFold applies the EqualFold predicate on the "report_data" field.
func ReportDataEqualFold(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEqualFold(FieldReportData, v))
}

// ReportDataContainsFold applies the ContainsFold predicate on the "report_data" field.
func ReportDataContainsFold(v string) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldContainsFold(FieldReportData, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(sql.FieldNotNull(FieldCreateTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RealtimeWarehousing) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RealtimeWarehousing) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RealtimeWarehousing) predicate.RealtimeWarehousing {
	return predicate.RealtimeWarehousing(func(s *sql.Selector) {
		p(s.Not())
	})
}
