// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/realtimewarehousing"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealtimeWarehousingCreate is the builder for creating a RealtimeWarehousing entity.
type RealtimeWarehousingCreate struct {
	config
	mutation *RealtimeWarehousingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventName sets the "event_name" field.
func (rwc *RealtimeWarehousingCreate) SetEventName(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetEventName(s)
	return rwc
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableEventName(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetEventName(*s)
	}
	return rwc
}

// SetReportData sets the "report_data" field.
func (rwc *RealtimeWarehousingCreate) SetReportData(s string) *RealtimeWarehousingCreate {
	rwc.mutation.SetReportData(s)
	return rwc
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableReportData(s *string) *RealtimeWarehousingCreate {
	if s != nil {
		rwc.SetReportData(*s)
	}
	return rwc
}

// SetCreateTime sets the "create_time" field.
func (rwc *RealtimeWarehousingCreate) SetCreateTime(t time.Time) *RealtimeWarehousingCreate {
	rwc.mutation.SetCreateTime(t)
	return rwc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rwc *RealtimeWarehousingCreate) SetNillableCreateTime(t *time.Time) *RealtimeWarehousingCreate {
	if t != nil {
		rwc.SetCreateTime(*t)
	}
	return rwc
}

// SetID sets the "id" field.
func (rwc *RealtimeWarehousingCreate) SetID(i int64) *RealtimeWarehousingCreate {
	rwc.mutation.SetID(i)
	return rwc
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwc *RealtimeWarehousingCreate) Mutation() *RealtimeWarehousingMutation {
	return rwc.mutation
}

// Save creates the RealtimeWarehousing in the database.
func (rwc *RealtimeWarehousingCreate) Save(ctx context.Context) (*RealtimeWarehousing, error) {
	return withHooks[*RealtimeWarehousing, RealtimeWarehousingMutation](ctx, rwc.sqlSave, rwc.mutation, rwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rwc *RealtimeWarehousingCreate) SaveX(ctx context.Context) *RealtimeWarehousing {
	v, err := rwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwc *RealtimeWarehousingCreate) Exec(ctx context.Context) error {
	_, err := rwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwc *RealtimeWarehousingCreate) ExecX(ctx context.Context) {
	if err := rwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwc *RealtimeWarehousingCreate) check() error {
	if v, ok := rwc.mutation.EventName(); ok {
		if err := realtimewarehousing.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.event_name": %w`, err)}
		}
	}
	if v, ok := rwc.mutation.ID(); ok {
		if err := realtimewarehousing.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.id": %w`, err)}
		}
	}
	return nil
}

func (rwc *RealtimeWarehousingCreate) sqlSave(ctx context.Context) (*RealtimeWarehousing, error) {
	if err := rwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rwc.mutation.id = &_node.ID
	rwc.mutation.done = true
	return _node, nil
}

func (rwc *RealtimeWarehousingCreate) createSpec() (*RealtimeWarehousing, *sqlgraph.CreateSpec) {
	var (
		_node = &RealtimeWarehousing{config: rwc.config}
		_spec = sqlgraph.NewCreateSpec(realtimewarehousing.Table, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rwc.conflict
	if id, ok := rwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rwc.mutation.EventName(); ok {
		_spec.SetField(realtimewarehousing.FieldEventName, field.TypeString, value)
		_node.EventName = &value
	}
	if value, ok := rwc.mutation.ReportData(); ok {
		_spec.SetField(realtimewarehousing.FieldReportData, field.TypeString, value)
		_node.ReportData = &value
	}
	if value, ok := rwc.mutation.CreateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealtimeWarehousing.Create().
//		SetEventName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealtimeWarehousingUpsert) {
//			SetEventName(v+v).
//		}).
//		Exec(ctx)
func (rwc *RealtimeWarehousingCreate) OnConflict(opts ...sql.ConflictOption) *RealtimeWarehousingUpsertOne {
	rwc.conflict = opts
	return &RealtimeWarehousingUpsertOne{
		create: rwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rwc *RealtimeWarehousingCreate) OnConflictColumns(columns ...string) *RealtimeWarehousingUpsertOne {
	rwc.conflict = append(rwc.conflict, sql.ConflictColumns(columns...))
	return &RealtimeWarehousingUpsertOne{
		create: rwc,
	}
}

type (
	// RealtimeWarehousingUpsertOne is the builder for "upsert"-ing
	//  one RealtimeWarehousing node.
	RealtimeWarehousingUpsertOne struct {
		create *RealtimeWarehousingCreate
	}

	// RealtimeWarehousingUpsert is the "OnConflict" setter.
	RealtimeWarehousingUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventName sets the "event_name" field.
func (u *RealtimeWarehousingUpsert) SetEventName(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldEventName, v)
	return u
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateEventName() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldEventName)
	return u
}

// ClearEventName clears the value of the "event_name" field.
func (u *RealtimeWarehousingUpsert) ClearEventName() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldEventName)
	return u
}

// SetReportData sets the "report_data" field.
func (u *RealtimeWarehousingUpsert) SetReportData(v string) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldReportData, v)
	return u
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateReportData() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldReportData)
	return u
}

// ClearReportData clears the value of the "report_data" field.
func (u *RealtimeWarehousingUpsert) ClearReportData() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldReportData)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *RealtimeWarehousingUpsert) SetCreateTime(v time.Time) *RealtimeWarehousingUpsert {
	u.Set(realtimewarehousing.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsert) UpdateCreateTime() *RealtimeWarehousingUpsert {
	u.SetExcluded(realtimewarehousing.FieldCreateTime)
	return u
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *RealtimeWarehousingUpsert) ClearCreateTime() *RealtimeWarehousingUpsert {
	u.SetNull(realtimewarehousing.FieldCreateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(realtimewarehousing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertOne) UpdateNewValues() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(realtimewarehousing.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RealtimeWarehousingUpsertOne) Ignore() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealtimeWarehousingUpsertOne) DoNothing() *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealtimeWarehousingCreate.OnConflict
// documentation for more info.
func (u *RealtimeWarehousingUpsertOne) Update(set func(*RealtimeWarehousingUpsert)) *RealtimeWarehousingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealtimeWarehousingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventName sets the "event_name" field.
func (u *RealtimeWarehousingUpsertOne) SetEventName(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetEventName(v)
	})
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateEventName() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateEventName()
	})
}

// ClearEventName clears the value of the "event_name" field.
func (u *RealtimeWarehousingUpsertOne) ClearEventName() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearEventName()
	})
}

// SetReportData sets the "report_data" field.
func (u *RealtimeWarehousingUpsertOne) SetReportData(v string) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetReportData(v)
	})
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateReportData() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateReportData()
	})
}

// ClearReportData clears the value of the "report_data" field.
func (u *RealtimeWarehousingUpsertOne) ClearReportData() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearReportData()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *RealtimeWarehousingUpsertOne) SetCreateTime(v time.Time) *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertOne) UpdateCreateTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *RealtimeWarehousingUpsertOne) ClearCreateTime() *RealtimeWarehousingUpsertOne {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearCreateTime()
	})
}

// Exec executes the query.
func (u *RealtimeWarehousingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealtimeWarehousingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RealtimeWarehousingUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RealtimeWarehousingCreateBulk is the builder for creating many RealtimeWarehousing entities in bulk.
type RealtimeWarehousingCreateBulk struct {
	config
	builders []*RealtimeWarehousingCreate
	conflict []sql.ConflictOption
}

// Save creates the RealtimeWarehousing entities in the database.
func (rwcb *RealtimeWarehousingCreateBulk) Save(ctx context.Context) ([]*RealtimeWarehousing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rwcb.builders))
	nodes := make([]*RealtimeWarehousing, len(rwcb.builders))
	mutators := make([]Mutator, len(rwcb.builders))
	for i := range rwcb.builders {
		func(i int, root context.Context) {
			builder := rwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RealtimeWarehousingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rwcb *RealtimeWarehousingCreateBulk) SaveX(ctx context.Context) []*RealtimeWarehousing {
	v, err := rwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwcb *RealtimeWarehousingCreateBulk) Exec(ctx context.Context) error {
	_, err := rwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwcb *RealtimeWarehousingCreateBulk) ExecX(ctx context.Context) {
	if err := rwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealtimeWarehousing.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealtimeWarehousingUpsert) {
//			SetEventName(v+v).
//		}).
//		Exec(ctx)
func (rwcb *RealtimeWarehousingCreateBulk) OnConflict(opts ...sql.ConflictOption) *RealtimeWarehousingUpsertBulk {
	rwcb.conflict = opts
	return &RealtimeWarehousingUpsertBulk{
		create: rwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rwcb *RealtimeWarehousingCreateBulk) OnConflictColumns(columns ...string) *RealtimeWarehousingUpsertBulk {
	rwcb.conflict = append(rwcb.conflict, sql.ConflictColumns(columns...))
	return &RealtimeWarehousingUpsertBulk{
		create: rwcb,
	}
}

// RealtimeWarehousingUpsertBulk is the builder for "upsert"-ing
// a bulk of RealtimeWarehousing nodes.
type RealtimeWarehousingUpsertBulk struct {
	create *RealtimeWarehousingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(realtimewarehousing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertBulk) UpdateNewValues() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(realtimewarehousing.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealtimeWarehousing.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RealtimeWarehousingUpsertBulk) Ignore() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealtimeWarehousingUpsertBulk) DoNothing() *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealtimeWarehousingCreateBulk.OnConflict
// documentation for more info.
func (u *RealtimeWarehousingUpsertBulk) Update(set func(*RealtimeWarehousingUpsert)) *RealtimeWarehousingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealtimeWarehousingUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventName sets the "event_name" field.
func (u *RealtimeWarehousingUpsertBulk) SetEventName(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetEventName(v)
	})
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateEventName() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateEventName()
	})
}

// ClearEventName clears the value of the "event_name" field.
func (u *RealtimeWarehousingUpsertBulk) ClearEventName() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearEventName()
	})
}

// SetReportData sets the "report_data" field.
func (u *RealtimeWarehousingUpsertBulk) SetReportData(v string) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetReportData(v)
	})
}

// UpdateReportData sets the "report_data" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateReportData() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateReportData()
	})
}

// ClearReportData clears the value of the "report_data" field.
func (u *RealtimeWarehousingUpsertBulk) ClearReportData() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearReportData()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *RealtimeWarehousingUpsertBulk) SetCreateTime(v time.Time) *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *RealtimeWarehousingUpsertBulk) UpdateCreateTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *RealtimeWarehousingUpsertBulk) ClearCreateTime() *RealtimeWarehousingUpsertBulk {
	return u.Update(func(s *RealtimeWarehousingUpsert) {
		s.ClearCreateTime()
	})
}

// Exec executes the query.
func (u *RealtimeWarehousingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RealtimeWarehousingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealtimeWarehousingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealtimeWarehousingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
