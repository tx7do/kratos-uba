// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/realtimewarehousing"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RealtimeWarehousing is the model entity for the RealtimeWarehousing schema.
type RealtimeWarehousing struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID int64 `json:"id,omitempty"`
	// 事件的名称
	EventName *string `json:"event_name,omitempty"`
	// 报告的数据
	ReportData *string `json:"report_data,omitempty"`
	// 记录创建时间
	CreateTime *time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RealtimeWarehousing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case realtimewarehousing.FieldID:
			values[i] = new(sql.NullInt64)
		case realtimewarehousing.FieldEventName, realtimewarehousing.FieldReportData:
			values[i] = new(sql.NullString)
		case realtimewarehousing.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RealtimeWarehousing", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RealtimeWarehousing fields.
func (rw *RealtimeWarehousing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case realtimewarehousing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rw.ID = int64(value.Int64)
		case realtimewarehousing.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				rw.EventName = new(string)
				*rw.EventName = value.String
			}
		case realtimewarehousing.FieldReportData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_data", values[i])
			} else if value.Valid {
				rw.ReportData = new(string)
				*rw.ReportData = value.String
			}
		case realtimewarehousing.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rw.CreateTime = new(time.Time)
				*rw.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RealtimeWarehousing.
// Note that you need to call RealtimeWarehousing.Unwrap() before calling this method if this RealtimeWarehousing
// was returned from a transaction, and the transaction was committed or rolled back.
func (rw *RealtimeWarehousing) Update() *RealtimeWarehousingUpdateOne {
	return NewRealtimeWarehousingClient(rw.config).UpdateOne(rw)
}

// Unwrap unwraps the RealtimeWarehousing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rw *RealtimeWarehousing) Unwrap() *RealtimeWarehousing {
	_tx, ok := rw.config.driver.(*txDriver)
	if !ok {
		panic("ent: RealtimeWarehousing is not a transactional entity")
	}
	rw.config.driver = _tx.drv
	return rw
}

// String implements the fmt.Stringer.
func (rw *RealtimeWarehousing) String() string {
	var builder strings.Builder
	builder.WriteString("RealtimeWarehousing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rw.ID))
	if v := rw.EventName; v != nil {
		builder.WriteString("event_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rw.ReportData; v != nil {
		builder.WriteString("report_data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rw.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RealtimeWarehousings is a parsable slice of RealtimeWarehousing.
type RealtimeWarehousings []*RealtimeWarehousing
