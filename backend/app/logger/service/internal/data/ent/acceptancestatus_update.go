// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/acceptancestatus"
	"kratos-bi/app/logger/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AcceptanceStatusUpdate is the builder for updating AcceptanceStatus entities.
type AcceptanceStatusUpdate struct {
	config
	hooks     []Hook
	mutation  *AcceptanceStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AcceptanceStatusUpdate builder.
func (asu *AcceptanceStatusUpdate) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetDataName sets the "data_name" field.
func (asu *AcceptanceStatusUpdate) SetDataName(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetDataName(s)
	return asu
}

// SetNillableDataName sets the "data_name" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableDataName(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetDataName(*s)
	}
	return asu
}

// ClearDataName clears the value of the "data_name" field.
func (asu *AcceptanceStatusUpdate) ClearDataName() *AcceptanceStatusUpdate {
	asu.mutation.ClearDataName()
	return asu
}

// SetReportType sets the "report_type" field.
func (asu *AcceptanceStatusUpdate) SetReportType(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetReportType(s)
	return asu
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableReportType(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetReportType(*s)
	}
	return asu
}

// ClearReportType clears the value of the "report_type" field.
func (asu *AcceptanceStatusUpdate) ClearReportType() *AcceptanceStatusUpdate {
	asu.mutation.ClearReportType()
	return asu
}

// SetReportData sets the "report_data" field.
func (asu *AcceptanceStatusUpdate) SetReportData(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetReportData(s)
	return asu
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableReportData(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetReportData(*s)
	}
	return asu
}

// ClearReportData clears the value of the "report_data" field.
func (asu *AcceptanceStatusUpdate) ClearReportData() *AcceptanceStatusUpdate {
	asu.mutation.ClearReportData()
	return asu
}

// SetStatus sets the "status" field.
func (asu *AcceptanceStatusUpdate) SetStatus(i int32) *AcceptanceStatusUpdate {
	asu.mutation.ResetStatus()
	asu.mutation.SetStatus(i)
	return asu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableStatus(i *int32) *AcceptanceStatusUpdate {
	if i != nil {
		asu.SetStatus(*i)
	}
	return asu
}

// AddStatus adds i to the "status" field.
func (asu *AcceptanceStatusUpdate) AddStatus(i int32) *AcceptanceStatusUpdate {
	asu.mutation.AddStatus(i)
	return asu
}

// ClearStatus clears the value of the "status" field.
func (asu *AcceptanceStatusUpdate) ClearStatus() *AcceptanceStatusUpdate {
	asu.mutation.ClearStatus()
	return asu
}

// SetErrorReason sets the "error_reason" field.
func (asu *AcceptanceStatusUpdate) SetErrorReason(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetErrorReason(s)
	return asu
}

// SetNillableErrorReason sets the "error_reason" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableErrorReason(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetErrorReason(*s)
	}
	return asu
}

// ClearErrorReason clears the value of the "error_reason" field.
func (asu *AcceptanceStatusUpdate) ClearErrorReason() *AcceptanceStatusUpdate {
	asu.mutation.ClearErrorReason()
	return asu
}

// SetErrorHandling sets the "error_handling" field.
func (asu *AcceptanceStatusUpdate) SetErrorHandling(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetErrorHandling(s)
	return asu
}

// SetNillableErrorHandling sets the "error_handling" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillableErrorHandling(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetErrorHandling(*s)
	}
	return asu
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (asu *AcceptanceStatusUpdate) ClearErrorHandling() *AcceptanceStatusUpdate {
	asu.mutation.ClearErrorHandling()
	return asu
}

// SetPartEvent sets the "part_event" field.
func (asu *AcceptanceStatusUpdate) SetPartEvent(s string) *AcceptanceStatusUpdate {
	asu.mutation.SetPartEvent(s)
	return asu
}

// SetNillablePartEvent sets the "part_event" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillablePartEvent(s *string) *AcceptanceStatusUpdate {
	if s != nil {
		asu.SetPartEvent(*s)
	}
	return asu
}

// ClearPartEvent clears the value of the "part_event" field.
func (asu *AcceptanceStatusUpdate) ClearPartEvent() *AcceptanceStatusUpdate {
	asu.mutation.ClearPartEvent()
	return asu
}

// SetPartDate sets the "part_date" field.
func (asu *AcceptanceStatusUpdate) SetPartDate(t time.Time) *AcceptanceStatusUpdate {
	asu.mutation.SetPartDate(t)
	return asu
}

// SetNillablePartDate sets the "part_date" field if the given value is not nil.
func (asu *AcceptanceStatusUpdate) SetNillablePartDate(t *time.Time) *AcceptanceStatusUpdate {
	if t != nil {
		asu.SetPartDate(*t)
	}
	return asu
}

// ClearPartDate clears the value of the "part_date" field.
func (asu *AcceptanceStatusUpdate) ClearPartDate() *AcceptanceStatusUpdate {
	asu.mutation.ClearPartDate()
	return asu
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asu *AcceptanceStatusUpdate) Mutation() *AcceptanceStatusMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AcceptanceStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AcceptanceStatusMutation](ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AcceptanceStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AcceptanceStatusUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AcceptanceStatusUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AcceptanceStatusUpdate) check() error {
	if v, ok := asu.mutation.DataName(); ok {
		if err := acceptancestatus.DataNameValidator(v); err != nil {
			return &ValidationError{Name: "data_name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.data_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AcceptanceStatusUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AcceptanceStatusUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AcceptanceStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(acceptancestatus.Table, acceptancestatus.Columns, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeInt64))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.DataName(); ok {
		_spec.SetField(acceptancestatus.FieldDataName, field.TypeString, value)
	}
	if asu.mutation.DataNameCleared() {
		_spec.ClearField(acceptancestatus.FieldDataName, field.TypeString)
	}
	if value, ok := asu.mutation.ReportType(); ok {
		_spec.SetField(acceptancestatus.FieldReportType, field.TypeString, value)
	}
	if asu.mutation.ReportTypeCleared() {
		_spec.ClearField(acceptancestatus.FieldReportType, field.TypeString)
	}
	if value, ok := asu.mutation.ReportData(); ok {
		_spec.SetField(acceptancestatus.FieldReportData, field.TypeString, value)
	}
	if asu.mutation.ReportDataCleared() {
		_spec.ClearField(acceptancestatus.FieldReportData, field.TypeString)
	}
	if value, ok := asu.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := asu.mutation.AddedStatus(); ok {
		_spec.AddField(acceptancestatus.FieldStatus, field.TypeInt32, value)
	}
	if asu.mutation.StatusCleared() {
		_spec.ClearField(acceptancestatus.FieldStatus, field.TypeInt32)
	}
	if value, ok := asu.mutation.ErrorReason(); ok {
		_spec.SetField(acceptancestatus.FieldErrorReason, field.TypeString, value)
	}
	if asu.mutation.ErrorReasonCleared() {
		_spec.ClearField(acceptancestatus.FieldErrorReason, field.TypeString)
	}
	if value, ok := asu.mutation.ErrorHandling(); ok {
		_spec.SetField(acceptancestatus.FieldErrorHandling, field.TypeString, value)
	}
	if asu.mutation.ErrorHandlingCleared() {
		_spec.ClearField(acceptancestatus.FieldErrorHandling, field.TypeString)
	}
	if value, ok := asu.mutation.PartEvent(); ok {
		_spec.SetField(acceptancestatus.FieldPartEvent, field.TypeString, value)
	}
	if asu.mutation.PartEventCleared() {
		_spec.ClearField(acceptancestatus.FieldPartEvent, field.TypeString)
	}
	if value, ok := asu.mutation.PartDate(); ok {
		_spec.SetField(acceptancestatus.FieldPartDate, field.TypeTime, value)
	}
	if asu.mutation.PartDateCleared() {
		_spec.ClearField(acceptancestatus.FieldPartDate, field.TypeTime)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acceptancestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AcceptanceStatusUpdateOne is the builder for updating a single AcceptanceStatus entity.
type AcceptanceStatusUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AcceptanceStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDataName sets the "data_name" field.
func (asuo *AcceptanceStatusUpdateOne) SetDataName(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetDataName(s)
	return asuo
}

// SetNillableDataName sets the "data_name" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableDataName(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetDataName(*s)
	}
	return asuo
}

// ClearDataName clears the value of the "data_name" field.
func (asuo *AcceptanceStatusUpdateOne) ClearDataName() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearDataName()
	return asuo
}

// SetReportType sets the "report_type" field.
func (asuo *AcceptanceStatusUpdateOne) SetReportType(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetReportType(s)
	return asuo
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableReportType(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetReportType(*s)
	}
	return asuo
}

// ClearReportType clears the value of the "report_type" field.
func (asuo *AcceptanceStatusUpdateOne) ClearReportType() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearReportType()
	return asuo
}

// SetReportData sets the "report_data" field.
func (asuo *AcceptanceStatusUpdateOne) SetReportData(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetReportData(s)
	return asuo
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableReportData(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetReportData(*s)
	}
	return asuo
}

// ClearReportData clears the value of the "report_data" field.
func (asuo *AcceptanceStatusUpdateOne) ClearReportData() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearReportData()
	return asuo
}

// SetStatus sets the "status" field.
func (asuo *AcceptanceStatusUpdateOne) SetStatus(i int32) *AcceptanceStatusUpdateOne {
	asuo.mutation.ResetStatus()
	asuo.mutation.SetStatus(i)
	return asuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableStatus(i *int32) *AcceptanceStatusUpdateOne {
	if i != nil {
		asuo.SetStatus(*i)
	}
	return asuo
}

// AddStatus adds i to the "status" field.
func (asuo *AcceptanceStatusUpdateOne) AddStatus(i int32) *AcceptanceStatusUpdateOne {
	asuo.mutation.AddStatus(i)
	return asuo
}

// ClearStatus clears the value of the "status" field.
func (asuo *AcceptanceStatusUpdateOne) ClearStatus() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearStatus()
	return asuo
}

// SetErrorReason sets the "error_reason" field.
func (asuo *AcceptanceStatusUpdateOne) SetErrorReason(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetErrorReason(s)
	return asuo
}

// SetNillableErrorReason sets the "error_reason" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableErrorReason(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetErrorReason(*s)
	}
	return asuo
}

// ClearErrorReason clears the value of the "error_reason" field.
func (asuo *AcceptanceStatusUpdateOne) ClearErrorReason() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearErrorReason()
	return asuo
}

// SetErrorHandling sets the "error_handling" field.
func (asuo *AcceptanceStatusUpdateOne) SetErrorHandling(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetErrorHandling(s)
	return asuo
}

// SetNillableErrorHandling sets the "error_handling" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillableErrorHandling(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetErrorHandling(*s)
	}
	return asuo
}

// ClearErrorHandling clears the value of the "error_handling" field.
func (asuo *AcceptanceStatusUpdateOne) ClearErrorHandling() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearErrorHandling()
	return asuo
}

// SetPartEvent sets the "part_event" field.
func (asuo *AcceptanceStatusUpdateOne) SetPartEvent(s string) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetPartEvent(s)
	return asuo
}

// SetNillablePartEvent sets the "part_event" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillablePartEvent(s *string) *AcceptanceStatusUpdateOne {
	if s != nil {
		asuo.SetPartEvent(*s)
	}
	return asuo
}

// ClearPartEvent clears the value of the "part_event" field.
func (asuo *AcceptanceStatusUpdateOne) ClearPartEvent() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearPartEvent()
	return asuo
}

// SetPartDate sets the "part_date" field.
func (asuo *AcceptanceStatusUpdateOne) SetPartDate(t time.Time) *AcceptanceStatusUpdateOne {
	asuo.mutation.SetPartDate(t)
	return asuo
}

// SetNillablePartDate sets the "part_date" field if the given value is not nil.
func (asuo *AcceptanceStatusUpdateOne) SetNillablePartDate(t *time.Time) *AcceptanceStatusUpdateOne {
	if t != nil {
		asuo.SetPartDate(*t)
	}
	return asuo
}

// ClearPartDate clears the value of the "part_date" field.
func (asuo *AcceptanceStatusUpdateOne) ClearPartDate() *AcceptanceStatusUpdateOne {
	asuo.mutation.ClearPartDate()
	return asuo
}

// Mutation returns the AcceptanceStatusMutation object of the builder.
func (asuo *AcceptanceStatusUpdateOne) Mutation() *AcceptanceStatusMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AcceptanceStatusUpdate builder.
func (asuo *AcceptanceStatusUpdateOne) Where(ps ...predicate.AcceptanceStatus) *AcceptanceStatusUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AcceptanceStatusUpdateOne) Select(field string, fields ...string) *AcceptanceStatusUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AcceptanceStatus entity.
func (asuo *AcceptanceStatusUpdateOne) Save(ctx context.Context) (*AcceptanceStatus, error) {
	return withHooks[*AcceptanceStatus, AcceptanceStatusMutation](ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AcceptanceStatusUpdateOne) SaveX(ctx context.Context) *AcceptanceStatus {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AcceptanceStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AcceptanceStatusUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AcceptanceStatusUpdateOne) check() error {
	if v, ok := asuo.mutation.DataName(); ok {
		if err := acceptancestatus.DataNameValidator(v); err != nil {
			return &ValidationError{Name: "data_name", err: fmt.Errorf(`ent: validator failed for field "AcceptanceStatus.data_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AcceptanceStatusUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AcceptanceStatusUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AcceptanceStatusUpdateOne) sqlSave(ctx context.Context) (_node *AcceptanceStatus, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(acceptancestatus.Table, acceptancestatus.Columns, sqlgraph.NewFieldSpec(acceptancestatus.FieldID, field.TypeInt64))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AcceptanceStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, acceptancestatus.FieldID)
		for _, f := range fields {
			if !acceptancestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != acceptancestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.DataName(); ok {
		_spec.SetField(acceptancestatus.FieldDataName, field.TypeString, value)
	}
	if asuo.mutation.DataNameCleared() {
		_spec.ClearField(acceptancestatus.FieldDataName, field.TypeString)
	}
	if value, ok := asuo.mutation.ReportType(); ok {
		_spec.SetField(acceptancestatus.FieldReportType, field.TypeString, value)
	}
	if asuo.mutation.ReportTypeCleared() {
		_spec.ClearField(acceptancestatus.FieldReportType, field.TypeString)
	}
	if value, ok := asuo.mutation.ReportData(); ok {
		_spec.SetField(acceptancestatus.FieldReportData, field.TypeString, value)
	}
	if asuo.mutation.ReportDataCleared() {
		_spec.ClearField(acceptancestatus.FieldReportData, field.TypeString)
	}
	if value, ok := asuo.mutation.Status(); ok {
		_spec.SetField(acceptancestatus.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := asuo.mutation.AddedStatus(); ok {
		_spec.AddField(acceptancestatus.FieldStatus, field.TypeInt32, value)
	}
	if asuo.mutation.StatusCleared() {
		_spec.ClearField(acceptancestatus.FieldStatus, field.TypeInt32)
	}
	if value, ok := asuo.mutation.ErrorReason(); ok {
		_spec.SetField(acceptancestatus.FieldErrorReason, field.TypeString, value)
	}
	if asuo.mutation.ErrorReasonCleared() {
		_spec.ClearField(acceptancestatus.FieldErrorReason, field.TypeString)
	}
	if value, ok := asuo.mutation.ErrorHandling(); ok {
		_spec.SetField(acceptancestatus.FieldErrorHandling, field.TypeString, value)
	}
	if asuo.mutation.ErrorHandlingCleared() {
		_spec.ClearField(acceptancestatus.FieldErrorHandling, field.TypeString)
	}
	if value, ok := asuo.mutation.PartEvent(); ok {
		_spec.SetField(acceptancestatus.FieldPartEvent, field.TypeString, value)
	}
	if asuo.mutation.PartEventCleared() {
		_spec.ClearField(acceptancestatus.FieldPartEvent, field.TypeString)
	}
	if value, ok := asuo.mutation.PartDate(); ok {
		_spec.SetField(acceptancestatus.FieldPartDate, field.TypeTime, value)
	}
	if asuo.mutation.PartDateCleared() {
		_spec.ClearField(acceptancestatus.FieldPartDate, field.TypeTime)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AcceptanceStatus{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acceptancestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
