// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/logger/service/internal/data/ent/predicate"
	"kratos-bi/app/logger/service/internal/data/ent/realtimewarehousing"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealtimeWarehousingUpdate is the builder for updating RealtimeWarehousing entities.
type RealtimeWarehousingUpdate struct {
	config
	hooks     []Hook
	mutation  *RealtimeWarehousingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RealtimeWarehousingUpdate builder.
func (rwu *RealtimeWarehousingUpdate) Where(ps ...predicate.RealtimeWarehousing) *RealtimeWarehousingUpdate {
	rwu.mutation.Where(ps...)
	return rwu
}

// SetEventName sets the "event_name" field.
func (rwu *RealtimeWarehousingUpdate) SetEventName(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetEventName(s)
	return rwu
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableEventName(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetEventName(*s)
	}
	return rwu
}

// ClearEventName clears the value of the "event_name" field.
func (rwu *RealtimeWarehousingUpdate) ClearEventName() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearEventName()
	return rwu
}

// SetReportData sets the "report_data" field.
func (rwu *RealtimeWarehousingUpdate) SetReportData(s string) *RealtimeWarehousingUpdate {
	rwu.mutation.SetReportData(s)
	return rwu
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableReportData(s *string) *RealtimeWarehousingUpdate {
	if s != nil {
		rwu.SetReportData(*s)
	}
	return rwu
}

// ClearReportData clears the value of the "report_data" field.
func (rwu *RealtimeWarehousingUpdate) ClearReportData() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearReportData()
	return rwu
}

// SetCreateTime sets the "create_time" field.
func (rwu *RealtimeWarehousingUpdate) SetCreateTime(t time.Time) *RealtimeWarehousingUpdate {
	rwu.mutation.SetCreateTime(t)
	return rwu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rwu *RealtimeWarehousingUpdate) SetNillableCreateTime(t *time.Time) *RealtimeWarehousingUpdate {
	if t != nil {
		rwu.SetCreateTime(*t)
	}
	return rwu
}

// ClearCreateTime clears the value of the "create_time" field.
func (rwu *RealtimeWarehousingUpdate) ClearCreateTime() *RealtimeWarehousingUpdate {
	rwu.mutation.ClearCreateTime()
	return rwu
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwu *RealtimeWarehousingUpdate) Mutation() *RealtimeWarehousingMutation {
	return rwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rwu *RealtimeWarehousingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RealtimeWarehousingMutation](ctx, rwu.sqlSave, rwu.mutation, rwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwu *RealtimeWarehousingUpdate) SaveX(ctx context.Context) int {
	affected, err := rwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rwu *RealtimeWarehousingUpdate) Exec(ctx context.Context) error {
	_, err := rwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwu *RealtimeWarehousingUpdate) ExecX(ctx context.Context) {
	if err := rwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwu *RealtimeWarehousingUpdate) check() error {
	if v, ok := rwu.mutation.EventName(); ok {
		if err := realtimewarehousing.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.event_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rwu *RealtimeWarehousingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RealtimeWarehousingUpdate {
	rwu.modifiers = append(rwu.modifiers, modifiers...)
	return rwu
}

func (rwu *RealtimeWarehousingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(realtimewarehousing.Table, realtimewarehousing.Columns, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeInt64))
	if ps := rwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwu.mutation.EventName(); ok {
		_spec.SetField(realtimewarehousing.FieldEventName, field.TypeString, value)
	}
	if rwu.mutation.EventNameCleared() {
		_spec.ClearField(realtimewarehousing.FieldEventName, field.TypeString)
	}
	if value, ok := rwu.mutation.ReportData(); ok {
		_spec.SetField(realtimewarehousing.FieldReportData, field.TypeString, value)
	}
	if rwu.mutation.ReportDataCleared() {
		_spec.ClearField(realtimewarehousing.FieldReportData, field.TypeString)
	}
	if value, ok := rwu.mutation.CreateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldCreateTime, field.TypeTime, value)
	}
	if rwu.mutation.CreateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreateTime, field.TypeTime)
	}
	_spec.AddModifiers(rwu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realtimewarehousing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rwu.mutation.done = true
	return n, nil
}

// RealtimeWarehousingUpdateOne is the builder for updating a single RealtimeWarehousing entity.
type RealtimeWarehousingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RealtimeWarehousingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventName sets the "event_name" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetEventName(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetEventName(s)
	return rwuo
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableEventName(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetEventName(*s)
	}
	return rwuo
}

// ClearEventName clears the value of the "event_name" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearEventName() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearEventName()
	return rwuo
}

// SetReportData sets the "report_data" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetReportData(s string) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetReportData(s)
	return rwuo
}

// SetNillableReportData sets the "report_data" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableReportData(s *string) *RealtimeWarehousingUpdateOne {
	if s != nil {
		rwuo.SetReportData(*s)
	}
	return rwuo
}

// ClearReportData clears the value of the "report_data" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearReportData() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearReportData()
	return rwuo
}

// SetCreateTime sets the "create_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) SetCreateTime(t time.Time) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.SetCreateTime(t)
	return rwuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rwuo *RealtimeWarehousingUpdateOne) SetNillableCreateTime(t *time.Time) *RealtimeWarehousingUpdateOne {
	if t != nil {
		rwuo.SetCreateTime(*t)
	}
	return rwuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (rwuo *RealtimeWarehousingUpdateOne) ClearCreateTime() *RealtimeWarehousingUpdateOne {
	rwuo.mutation.ClearCreateTime()
	return rwuo
}

// Mutation returns the RealtimeWarehousingMutation object of the builder.
func (rwuo *RealtimeWarehousingUpdateOne) Mutation() *RealtimeWarehousingMutation {
	return rwuo.mutation
}

// Where appends a list predicates to the RealtimeWarehousingUpdate builder.
func (rwuo *RealtimeWarehousingUpdateOne) Where(ps ...predicate.RealtimeWarehousing) *RealtimeWarehousingUpdateOne {
	rwuo.mutation.Where(ps...)
	return rwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rwuo *RealtimeWarehousingUpdateOne) Select(field string, fields ...string) *RealtimeWarehousingUpdateOne {
	rwuo.fields = append([]string{field}, fields...)
	return rwuo
}

// Save executes the query and returns the updated RealtimeWarehousing entity.
func (rwuo *RealtimeWarehousingUpdateOne) Save(ctx context.Context) (*RealtimeWarehousing, error) {
	return withHooks[*RealtimeWarehousing, RealtimeWarehousingMutation](ctx, rwuo.sqlSave, rwuo.mutation, rwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwuo *RealtimeWarehousingUpdateOne) SaveX(ctx context.Context) *RealtimeWarehousing {
	node, err := rwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rwuo *RealtimeWarehousingUpdateOne) Exec(ctx context.Context) error {
	_, err := rwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwuo *RealtimeWarehousingUpdateOne) ExecX(ctx context.Context) {
	if err := rwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwuo *RealtimeWarehousingUpdateOne) check() error {
	if v, ok := rwuo.mutation.EventName(); ok {
		if err := realtimewarehousing.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "RealtimeWarehousing.event_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rwuo *RealtimeWarehousingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RealtimeWarehousingUpdateOne {
	rwuo.modifiers = append(rwuo.modifiers, modifiers...)
	return rwuo
}

func (rwuo *RealtimeWarehousingUpdateOne) sqlSave(ctx context.Context) (_node *RealtimeWarehousing, err error) {
	if err := rwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(realtimewarehousing.Table, realtimewarehousing.Columns, sqlgraph.NewFieldSpec(realtimewarehousing.FieldID, field.TypeInt64))
	id, ok := rwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RealtimeWarehousing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, realtimewarehousing.FieldID)
		for _, f := range fields {
			if !realtimewarehousing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != realtimewarehousing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwuo.mutation.EventName(); ok {
		_spec.SetField(realtimewarehousing.FieldEventName, field.TypeString, value)
	}
	if rwuo.mutation.EventNameCleared() {
		_spec.ClearField(realtimewarehousing.FieldEventName, field.TypeString)
	}
	if value, ok := rwuo.mutation.ReportData(); ok {
		_spec.SetField(realtimewarehousing.FieldReportData, field.TypeString, value)
	}
	if rwuo.mutation.ReportDataCleared() {
		_spec.ClearField(realtimewarehousing.FieldReportData, field.TypeString)
	}
	if value, ok := rwuo.mutation.CreateTime(); ok {
		_spec.SetField(realtimewarehousing.FieldCreateTime, field.TypeTime, value)
	}
	if rwuo.mutation.CreateTimeCleared() {
		_spec.ClearField(realtimewarehousing.FieldCreateTime, field.TypeTime)
	}
	_spec.AddModifiers(rwuo.modifiers...)
	_node = &RealtimeWarehousing{config: rwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realtimewarehousing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rwuo.mutation.done = true
	return _node, nil
}
