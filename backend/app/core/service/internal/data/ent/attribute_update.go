// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/core/service/internal/data/ent/attribute"
	"kratos-uba/app/core/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeUpdate is the builder for updating Attribute entities.
type AttributeUpdate struct {
	config
	hooks     []Hook
	mutation  *AttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AttributeUpdate builder.
func (au *AttributeUpdate) Where(ps ...predicate.Attribute) *AttributeUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AttributeUpdate) SetUpdateTime(t time.Time) *AttributeUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableUpdateTime(t *time.Time) *AttributeUpdate {
	if t != nil {
		au.SetUpdateTime(*t)
	}
	return au
}

// ClearUpdateTime clears the value of the "update_time" field.
func (au *AttributeUpdate) ClearUpdateTime() *AttributeUpdate {
	au.mutation.ClearUpdateTime()
	return au
}

// SetDeleteTime sets the "delete_time" field.
func (au *AttributeUpdate) SetDeleteTime(t time.Time) *AttributeUpdate {
	au.mutation.SetDeleteTime(t)
	return au
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableDeleteTime(t *time.Time) *AttributeUpdate {
	if t != nil {
		au.SetDeleteTime(*t)
	}
	return au
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (au *AttributeUpdate) ClearDeleteTime() *AttributeUpdate {
	au.mutation.ClearDeleteTime()
	return au
}

// SetName sets the "name" field.
func (au *AttributeUpdate) SetName(s string) *AttributeUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableName(s *string) *AttributeUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AttributeUpdate) ClearName() *AttributeUpdate {
	au.mutation.ClearName()
	return au
}

// SetShowName sets the "show_name" field.
func (au *AttributeUpdate) SetShowName(s string) *AttributeUpdate {
	au.mutation.SetShowName(s)
	return au
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableShowName(s *string) *AttributeUpdate {
	if s != nil {
		au.SetShowName(*s)
	}
	return au
}

// ClearShowName clears the value of the "show_name" field.
func (au *AttributeUpdate) ClearShowName() *AttributeUpdate {
	au.mutation.ClearShowName()
	return au
}

// SetStatus sets the "status" field.
func (au *AttributeUpdate) SetStatus(s string) *AttributeUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableStatus(s *string) *AttributeUpdate {
	if s != nil {
		au.SetStatus(*s)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AttributeUpdate) ClearStatus() *AttributeUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetAttributeType sets the "attribute_type" field.
func (au *AttributeUpdate) SetAttributeType(u uint8) *AttributeUpdate {
	au.mutation.ResetAttributeType()
	au.mutation.SetAttributeType(u)
	return au
}

// SetNillableAttributeType sets the "attribute_type" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableAttributeType(u *uint8) *AttributeUpdate {
	if u != nil {
		au.SetAttributeType(*u)
	}
	return au
}

// AddAttributeType adds u to the "attribute_type" field.
func (au *AttributeUpdate) AddAttributeType(u int8) *AttributeUpdate {
	au.mutation.AddAttributeType(u)
	return au
}

// ClearAttributeType clears the value of the "attribute_type" field.
func (au *AttributeUpdate) ClearAttributeType() *AttributeUpdate {
	au.mutation.ClearAttributeType()
	return au
}

// SetAttributeSource sets the "attribute_source" field.
func (au *AttributeUpdate) SetAttributeSource(u uint8) *AttributeUpdate {
	au.mutation.ResetAttributeSource()
	au.mutation.SetAttributeSource(u)
	return au
}

// SetNillableAttributeSource sets the "attribute_source" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableAttributeSource(u *uint8) *AttributeUpdate {
	if u != nil {
		au.SetAttributeSource(*u)
	}
	return au
}

// AddAttributeSource adds u to the "attribute_source" field.
func (au *AttributeUpdate) AddAttributeSource(u int8) *AttributeUpdate {
	au.mutation.AddAttributeSource(u)
	return au
}

// ClearAttributeSource clears the value of the "attribute_source" field.
func (au *AttributeUpdate) ClearAttributeSource() *AttributeUpdate {
	au.mutation.ClearAttributeSource()
	return au
}

// SetAppID sets the "app_id" field.
func (au *AttributeUpdate) SetAppID(u uint32) *AttributeUpdate {
	au.mutation.ResetAppID()
	au.mutation.SetAppID(u)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableAppID(u *uint32) *AttributeUpdate {
	if u != nil {
		au.SetAppID(*u)
	}
	return au
}

// AddAppID adds u to the "app_id" field.
func (au *AttributeUpdate) AddAppID(u int32) *AttributeUpdate {
	au.mutation.AddAppID(u)
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AttributeUpdate) ClearAppID() *AttributeUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetDataType sets the "data_type" field.
func (au *AttributeUpdate) SetDataType(s string) *AttributeUpdate {
	au.mutation.SetDataType(s)
	return au
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableDataType(s *string) *AttributeUpdate {
	if s != nil {
		au.SetDataType(*s)
	}
	return au
}

// ClearDataType clears the value of the "data_type" field.
func (au *AttributeUpdate) ClearDataType() *AttributeUpdate {
	au.mutation.ClearDataType()
	return au
}

// Mutation returns the AttributeMutation object of the builder.
func (au *AttributeUpdate) Mutation() *AttributeMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttributeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttributeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttributeUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := attribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attribute.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.ShowName(); ok {
		if err := attribute.ShowNameValidator(v); err != nil {
			return &ValidationError{Name: "show_name", err: fmt.Errorf(`ent: validator failed for field "Attribute.show_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AttributeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttributeUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreateTimeCleared() {
		_spec.ClearField(attribute.FieldCreateTime, field.TypeTime)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(attribute.FieldUpdateTime, field.TypeTime, value)
	}
	if au.mutation.UpdateTimeCleared() {
		_spec.ClearField(attribute.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := au.mutation.DeleteTime(); ok {
		_spec.SetField(attribute.FieldDeleteTime, field.TypeTime, value)
	}
	if au.mutation.DeleteTimeCleared() {
		_spec.ClearField(attribute.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(attribute.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(attribute.FieldName, field.TypeString)
	}
	if value, ok := au.mutation.ShowName(); ok {
		_spec.SetField(attribute.FieldShowName, field.TypeString, value)
	}
	if au.mutation.ShowNameCleared() {
		_spec.ClearField(attribute.FieldShowName, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeString, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(attribute.FieldStatus, field.TypeString)
	}
	if value, ok := au.mutation.AttributeType(); ok {
		_spec.SetField(attribute.FieldAttributeType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedAttributeType(); ok {
		_spec.AddField(attribute.FieldAttributeType, field.TypeUint8, value)
	}
	if au.mutation.AttributeTypeCleared() {
		_spec.ClearField(attribute.FieldAttributeType, field.TypeUint8)
	}
	if value, ok := au.mutation.AttributeSource(); ok {
		_spec.SetField(attribute.FieldAttributeSource, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedAttributeSource(); ok {
		_spec.AddField(attribute.FieldAttributeSource, field.TypeUint8, value)
	}
	if au.mutation.AttributeSourceCleared() {
		_spec.ClearField(attribute.FieldAttributeSource, field.TypeUint8)
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.SetField(attribute.FieldAppID, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedAppID(); ok {
		_spec.AddField(attribute.FieldAppID, field.TypeUint32, value)
	}
	if au.mutation.AppIDCleared() {
		_spec.ClearField(attribute.FieldAppID, field.TypeUint32)
	}
	if value, ok := au.mutation.DataType(); ok {
		_spec.SetField(attribute.FieldDataType, field.TypeString, value)
	}
	if au.mutation.DataTypeCleared() {
		_spec.ClearField(attribute.FieldDataType, field.TypeString)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttributeUpdateOne is the builder for updating a single Attribute entity.
type AttributeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (auo *AttributeUpdateOne) SetUpdateTime(t time.Time) *AttributeUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableUpdateTime(t *time.Time) *AttributeUpdateOne {
	if t != nil {
		auo.SetUpdateTime(*t)
	}
	return auo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auo *AttributeUpdateOne) ClearUpdateTime() *AttributeUpdateOne {
	auo.mutation.ClearUpdateTime()
	return auo
}

// SetDeleteTime sets the "delete_time" field.
func (auo *AttributeUpdateOne) SetDeleteTime(t time.Time) *AttributeUpdateOne {
	auo.mutation.SetDeleteTime(t)
	return auo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableDeleteTime(t *time.Time) *AttributeUpdateOne {
	if t != nil {
		auo.SetDeleteTime(*t)
	}
	return auo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (auo *AttributeUpdateOne) ClearDeleteTime() *AttributeUpdateOne {
	auo.mutation.ClearDeleteTime()
	return auo
}

// SetName sets the "name" field.
func (auo *AttributeUpdateOne) SetName(s string) *AttributeUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableName(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AttributeUpdateOne) ClearName() *AttributeUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetShowName sets the "show_name" field.
func (auo *AttributeUpdateOne) SetShowName(s string) *AttributeUpdateOne {
	auo.mutation.SetShowName(s)
	return auo
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableShowName(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetShowName(*s)
	}
	return auo
}

// ClearShowName clears the value of the "show_name" field.
func (auo *AttributeUpdateOne) ClearShowName() *AttributeUpdateOne {
	auo.mutation.ClearShowName()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AttributeUpdateOne) SetStatus(s string) *AttributeUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableStatus(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetStatus(*s)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AttributeUpdateOne) ClearStatus() *AttributeUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetAttributeType sets the "attribute_type" field.
func (auo *AttributeUpdateOne) SetAttributeType(u uint8) *AttributeUpdateOne {
	auo.mutation.ResetAttributeType()
	auo.mutation.SetAttributeType(u)
	return auo
}

// SetNillableAttributeType sets the "attribute_type" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableAttributeType(u *uint8) *AttributeUpdateOne {
	if u != nil {
		auo.SetAttributeType(*u)
	}
	return auo
}

// AddAttributeType adds u to the "attribute_type" field.
func (auo *AttributeUpdateOne) AddAttributeType(u int8) *AttributeUpdateOne {
	auo.mutation.AddAttributeType(u)
	return auo
}

// ClearAttributeType clears the value of the "attribute_type" field.
func (auo *AttributeUpdateOne) ClearAttributeType() *AttributeUpdateOne {
	auo.mutation.ClearAttributeType()
	return auo
}

// SetAttributeSource sets the "attribute_source" field.
func (auo *AttributeUpdateOne) SetAttributeSource(u uint8) *AttributeUpdateOne {
	auo.mutation.ResetAttributeSource()
	auo.mutation.SetAttributeSource(u)
	return auo
}

// SetNillableAttributeSource sets the "attribute_source" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableAttributeSource(u *uint8) *AttributeUpdateOne {
	if u != nil {
		auo.SetAttributeSource(*u)
	}
	return auo
}

// AddAttributeSource adds u to the "attribute_source" field.
func (auo *AttributeUpdateOne) AddAttributeSource(u int8) *AttributeUpdateOne {
	auo.mutation.AddAttributeSource(u)
	return auo
}

// ClearAttributeSource clears the value of the "attribute_source" field.
func (auo *AttributeUpdateOne) ClearAttributeSource() *AttributeUpdateOne {
	auo.mutation.ClearAttributeSource()
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AttributeUpdateOne) SetAppID(u uint32) *AttributeUpdateOne {
	auo.mutation.ResetAppID()
	auo.mutation.SetAppID(u)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableAppID(u *uint32) *AttributeUpdateOne {
	if u != nil {
		auo.SetAppID(*u)
	}
	return auo
}

// AddAppID adds u to the "app_id" field.
func (auo *AttributeUpdateOne) AddAppID(u int32) *AttributeUpdateOne {
	auo.mutation.AddAppID(u)
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AttributeUpdateOne) ClearAppID() *AttributeUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetDataType sets the "data_type" field.
func (auo *AttributeUpdateOne) SetDataType(s string) *AttributeUpdateOne {
	auo.mutation.SetDataType(s)
	return auo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableDataType(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetDataType(*s)
	}
	return auo
}

// ClearDataType clears the value of the "data_type" field.
func (auo *AttributeUpdateOne) ClearDataType() *AttributeUpdateOne {
	auo.mutation.ClearDataType()
	return auo
}

// Mutation returns the AttributeMutation object of the builder.
func (auo *AttributeUpdateOne) Mutation() *AttributeMutation {
	return auo.mutation
}

// Where appends a list predicates to the AttributeUpdate builder.
func (auo *AttributeUpdateOne) Where(ps ...predicate.Attribute) *AttributeUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttributeUpdateOne) Select(field string, fields ...string) *AttributeUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attribute entity.
func (auo *AttributeUpdateOne) Save(ctx context.Context) (*Attribute, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttributeUpdateOne) SaveX(ctx context.Context) *Attribute {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttributeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttributeUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := attribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attribute.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ShowName(); ok {
		if err := attribute.ShowNameValidator(v); err != nil {
			return &ValidationError{Name: "show_name", err: fmt.Errorf(`ent: validator failed for field "Attribute.show_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AttributeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttributeUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AttributeUpdateOne) sqlSave(ctx context.Context) (_node *Attribute, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attribute.FieldID)
		for _, f := range fields {
			if !attribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreateTimeCleared() {
		_spec.ClearField(attribute.FieldCreateTime, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(attribute.FieldUpdateTime, field.TypeTime, value)
	}
	if auo.mutation.UpdateTimeCleared() {
		_spec.ClearField(attribute.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := auo.mutation.DeleteTime(); ok {
		_spec.SetField(attribute.FieldDeleteTime, field.TypeTime, value)
	}
	if auo.mutation.DeleteTimeCleared() {
		_spec.ClearField(attribute.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(attribute.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(attribute.FieldName, field.TypeString)
	}
	if value, ok := auo.mutation.ShowName(); ok {
		_spec.SetField(attribute.FieldShowName, field.TypeString, value)
	}
	if auo.mutation.ShowNameCleared() {
		_spec.ClearField(attribute.FieldShowName, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeString, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(attribute.FieldStatus, field.TypeString)
	}
	if value, ok := auo.mutation.AttributeType(); ok {
		_spec.SetField(attribute.FieldAttributeType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedAttributeType(); ok {
		_spec.AddField(attribute.FieldAttributeType, field.TypeUint8, value)
	}
	if auo.mutation.AttributeTypeCleared() {
		_spec.ClearField(attribute.FieldAttributeType, field.TypeUint8)
	}
	if value, ok := auo.mutation.AttributeSource(); ok {
		_spec.SetField(attribute.FieldAttributeSource, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedAttributeSource(); ok {
		_spec.AddField(attribute.FieldAttributeSource, field.TypeUint8, value)
	}
	if auo.mutation.AttributeSourceCleared() {
		_spec.ClearField(attribute.FieldAttributeSource, field.TypeUint8)
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.SetField(attribute.FieldAppID, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedAppID(); ok {
		_spec.AddField(attribute.FieldAppID, field.TypeUint32, value)
	}
	if auo.mutation.AppIDCleared() {
		_spec.ClearField(attribute.FieldAppID, field.TypeUint32)
	}
	if value, ok := auo.mutation.DataType(); ok {
		_spec.SetField(attribute.FieldDataType, field.TypeString, value)
	}
	if auo.mutation.DataTypeCleared() {
		_spec.ClearField(attribute.FieldDataType, field.TypeString)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Attribute{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
