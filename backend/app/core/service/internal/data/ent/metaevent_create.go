// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-bi/app/core/service/internal/data/ent/metaevent"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MetaEventCreate is the builder for creating a MetaEvent entity.
type MetaEventCreate struct {
	config
	mutation *MetaEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mec *MetaEventCreate) SetCreateTime(i int64) *MetaEventCreate {
	mec.mutation.SetCreateTime(i)
	return mec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableCreateTime(i *int64) *MetaEventCreate {
	if i != nil {
		mec.SetCreateTime(*i)
	}
	return mec
}

// SetUpdateTime sets the "update_time" field.
func (mec *MetaEventCreate) SetUpdateTime(i int64) *MetaEventCreate {
	mec.mutation.SetUpdateTime(i)
	return mec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableUpdateTime(i *int64) *MetaEventCreate {
	if i != nil {
		mec.SetUpdateTime(*i)
	}
	return mec
}

// SetDeleteTime sets the "delete_time" field.
func (mec *MetaEventCreate) SetDeleteTime(i int64) *MetaEventCreate {
	mec.mutation.SetDeleteTime(i)
	return mec
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableDeleteTime(i *int64) *MetaEventCreate {
	if i != nil {
		mec.SetDeleteTime(*i)
	}
	return mec
}

// SetEventName sets the "event_name" field.
func (mec *MetaEventCreate) SetEventName(s string) *MetaEventCreate {
	mec.mutation.SetEventName(s)
	return mec
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableEventName(s *string) *MetaEventCreate {
	if s != nil {
		mec.SetEventName(*s)
	}
	return mec
}

// SetShowName sets the "show_name" field.
func (mec *MetaEventCreate) SetShowName(s string) *MetaEventCreate {
	mec.mutation.SetShowName(s)
	return mec
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableShowName(s *string) *MetaEventCreate {
	if s != nil {
		mec.SetShowName(*s)
	}
	return mec
}

// SetAppID sets the "app_id" field.
func (mec *MetaEventCreate) SetAppID(u uint32) *MetaEventCreate {
	mec.mutation.SetAppID(u)
	return mec
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableAppID(u *uint32) *MetaEventCreate {
	if u != nil {
		mec.SetAppID(*u)
	}
	return mec
}

// SetYesterdayCount sets the "yesterday_count" field.
func (mec *MetaEventCreate) SetYesterdayCount(u uint32) *MetaEventCreate {
	mec.mutation.SetYesterdayCount(u)
	return mec
}

// SetNillableYesterdayCount sets the "yesterday_count" field if the given value is not nil.
func (mec *MetaEventCreate) SetNillableYesterdayCount(u *uint32) *MetaEventCreate {
	if u != nil {
		mec.SetYesterdayCount(*u)
	}
	return mec
}

// SetID sets the "id" field.
func (mec *MetaEventCreate) SetID(u uint32) *MetaEventCreate {
	mec.mutation.SetID(u)
	return mec
}

// Mutation returns the MetaEventMutation object of the builder.
func (mec *MetaEventCreate) Mutation() *MetaEventMutation {
	return mec.mutation
}

// Save creates the MetaEvent in the database.
func (mec *MetaEventCreate) Save(ctx context.Context) (*MetaEvent, error) {
	mec.defaults()
	return withHooks[*MetaEvent, MetaEventMutation](ctx, mec.sqlSave, mec.mutation, mec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mec *MetaEventCreate) SaveX(ctx context.Context) *MetaEvent {
	v, err := mec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mec *MetaEventCreate) Exec(ctx context.Context) error {
	_, err := mec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mec *MetaEventCreate) ExecX(ctx context.Context) {
	if err := mec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mec *MetaEventCreate) defaults() {
	if _, ok := mec.mutation.CreateTime(); !ok {
		v := metaevent.DefaultCreateTime()
		mec.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mec *MetaEventCreate) check() error {
	if v, ok := mec.mutation.EventName(); ok {
		if err := metaevent.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "MetaEvent.event_name": %w`, err)}
		}
	}
	if v, ok := mec.mutation.ShowName(); ok {
		if err := metaevent.ShowNameValidator(v); err != nil {
			return &ValidationError{Name: "show_name", err: fmt.Errorf(`ent: validator failed for field "MetaEvent.show_name": %w`, err)}
		}
	}
	if v, ok := mec.mutation.ID(); ok {
		if err := metaevent.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MetaEvent.id": %w`, err)}
		}
	}
	return nil
}

func (mec *MetaEventCreate) sqlSave(ctx context.Context) (*MetaEvent, error) {
	if err := mec.check(); err != nil {
		return nil, err
	}
	_node, _spec := mec.createSpec()
	if err := sqlgraph.CreateNode(ctx, mec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	mec.mutation.id = &_node.ID
	mec.mutation.done = true
	return _node, nil
}

func (mec *MetaEventCreate) createSpec() (*MetaEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &MetaEvent{config: mec.config}
		_spec = sqlgraph.NewCreateSpec(metaevent.Table, sqlgraph.NewFieldSpec(metaevent.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = mec.conflict
	if id, ok := mec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mec.mutation.CreateTime(); ok {
		_spec.SetField(metaevent.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := mec.mutation.UpdateTime(); ok {
		_spec.SetField(metaevent.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := mec.mutation.DeleteTime(); ok {
		_spec.SetField(metaevent.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := mec.mutation.EventName(); ok {
		_spec.SetField(metaevent.FieldEventName, field.TypeString, value)
		_node.EventName = &value
	}
	if value, ok := mec.mutation.ShowName(); ok {
		_spec.SetField(metaevent.FieldShowName, field.TypeString, value)
		_node.ShowName = &value
	}
	if value, ok := mec.mutation.AppID(); ok {
		_spec.SetField(metaevent.FieldAppID, field.TypeUint32, value)
		_node.AppID = &value
	}
	if value, ok := mec.mutation.YesterdayCount(); ok {
		_spec.SetField(metaevent.FieldYesterdayCount, field.TypeUint32, value)
		_node.YesterdayCount = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MetaEvent.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetaEventUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mec *MetaEventCreate) OnConflict(opts ...sql.ConflictOption) *MetaEventUpsertOne {
	mec.conflict = opts
	return &MetaEventUpsertOne{
		create: mec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mec *MetaEventCreate) OnConflictColumns(columns ...string) *MetaEventUpsertOne {
	mec.conflict = append(mec.conflict, sql.ConflictColumns(columns...))
	return &MetaEventUpsertOne{
		create: mec,
	}
}

type (
	// MetaEventUpsertOne is the builder for "upsert"-ing
	//  one MetaEvent node.
	MetaEventUpsertOne struct {
		create *MetaEventCreate
	}

	// MetaEventUpsert is the "OnConflict" setter.
	MetaEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *MetaEventUpsert) SetUpdateTime(v int64) *MetaEventUpsert {
	u.Set(metaevent.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateUpdateTime() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MetaEventUpsert) AddUpdateTime(v int64) *MetaEventUpsert {
	u.Add(metaevent.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MetaEventUpsert) ClearUpdateTime() *MetaEventUpsert {
	u.SetNull(metaevent.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *MetaEventUpsert) SetDeleteTime(v int64) *MetaEventUpsert {
	u.Set(metaevent.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateDeleteTime() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MetaEventUpsert) AddDeleteTime(v int64) *MetaEventUpsert {
	u.Add(metaevent.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MetaEventUpsert) ClearDeleteTime() *MetaEventUpsert {
	u.SetNull(metaevent.FieldDeleteTime)
	return u
}

// SetEventName sets the "event_name" field.
func (u *MetaEventUpsert) SetEventName(v string) *MetaEventUpsert {
	u.Set(metaevent.FieldEventName, v)
	return u
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateEventName() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldEventName)
	return u
}

// ClearEventName clears the value of the "event_name" field.
func (u *MetaEventUpsert) ClearEventName() *MetaEventUpsert {
	u.SetNull(metaevent.FieldEventName)
	return u
}

// SetShowName sets the "show_name" field.
func (u *MetaEventUpsert) SetShowName(v string) *MetaEventUpsert {
	u.Set(metaevent.FieldShowName, v)
	return u
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateShowName() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldShowName)
	return u
}

// ClearShowName clears the value of the "show_name" field.
func (u *MetaEventUpsert) ClearShowName() *MetaEventUpsert {
	u.SetNull(metaevent.FieldShowName)
	return u
}

// SetAppID sets the "app_id" field.
func (u *MetaEventUpsert) SetAppID(v uint32) *MetaEventUpsert {
	u.Set(metaevent.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateAppID() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *MetaEventUpsert) AddAppID(v uint32) *MetaEventUpsert {
	u.Add(metaevent.FieldAppID, v)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *MetaEventUpsert) ClearAppID() *MetaEventUpsert {
	u.SetNull(metaevent.FieldAppID)
	return u
}

// SetYesterdayCount sets the "yesterday_count" field.
func (u *MetaEventUpsert) SetYesterdayCount(v uint32) *MetaEventUpsert {
	u.Set(metaevent.FieldYesterdayCount, v)
	return u
}

// UpdateYesterdayCount sets the "yesterday_count" field to the value that was provided on create.
func (u *MetaEventUpsert) UpdateYesterdayCount() *MetaEventUpsert {
	u.SetExcluded(metaevent.FieldYesterdayCount)
	return u
}

// AddYesterdayCount adds v to the "yesterday_count" field.
func (u *MetaEventUpsert) AddYesterdayCount(v uint32) *MetaEventUpsert {
	u.Add(metaevent.FieldYesterdayCount, v)
	return u
}

// ClearYesterdayCount clears the value of the "yesterday_count" field.
func (u *MetaEventUpsert) ClearYesterdayCount() *MetaEventUpsert {
	u.SetNull(metaevent.FieldYesterdayCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(metaevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MetaEventUpsertOne) UpdateNewValues() *MetaEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(metaevent.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(metaevent.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MetaEventUpsertOne) Ignore() *MetaEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetaEventUpsertOne) DoNothing() *MetaEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetaEventCreate.OnConflict
// documentation for more info.
func (u *MetaEventUpsertOne) Update(set func(*MetaEventUpsert)) *MetaEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetaEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MetaEventUpsertOne) SetUpdateTime(v int64) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MetaEventUpsertOne) AddUpdateTime(v int64) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateUpdateTime() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MetaEventUpsertOne) ClearUpdateTime() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MetaEventUpsertOne) SetDeleteTime(v int64) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MetaEventUpsertOne) AddDeleteTime(v int64) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateDeleteTime() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MetaEventUpsertOne) ClearDeleteTime() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearDeleteTime()
	})
}

// SetEventName sets the "event_name" field.
func (u *MetaEventUpsertOne) SetEventName(v string) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetEventName(v)
	})
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateEventName() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateEventName()
	})
}

// ClearEventName clears the value of the "event_name" field.
func (u *MetaEventUpsertOne) ClearEventName() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearEventName()
	})
}

// SetShowName sets the "show_name" field.
func (u *MetaEventUpsertOne) SetShowName(v string) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetShowName(v)
	})
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateShowName() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateShowName()
	})
}

// ClearShowName clears the value of the "show_name" field.
func (u *MetaEventUpsertOne) ClearShowName() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearShowName()
	})
}

// SetAppID sets the "app_id" field.
func (u *MetaEventUpsertOne) SetAppID(v uint32) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *MetaEventUpsertOne) AddAppID(v uint32) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateAppID() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *MetaEventUpsertOne) ClearAppID() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearAppID()
	})
}

// SetYesterdayCount sets the "yesterday_count" field.
func (u *MetaEventUpsertOne) SetYesterdayCount(v uint32) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetYesterdayCount(v)
	})
}

// AddYesterdayCount adds v to the "yesterday_count" field.
func (u *MetaEventUpsertOne) AddYesterdayCount(v uint32) *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddYesterdayCount(v)
	})
}

// UpdateYesterdayCount sets the "yesterday_count" field to the value that was provided on create.
func (u *MetaEventUpsertOne) UpdateYesterdayCount() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateYesterdayCount()
	})
}

// ClearYesterdayCount clears the value of the "yesterday_count" field.
func (u *MetaEventUpsertOne) ClearYesterdayCount() *MetaEventUpsertOne {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearYesterdayCount()
	})
}

// Exec executes the query.
func (u *MetaEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetaEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetaEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MetaEventUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MetaEventUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MetaEventCreateBulk is the builder for creating many MetaEvent entities in bulk.
type MetaEventCreateBulk struct {
	config
	builders []*MetaEventCreate
	conflict []sql.ConflictOption
}

// Save creates the MetaEvent entities in the database.
func (mecb *MetaEventCreateBulk) Save(ctx context.Context) ([]*MetaEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mecb.builders))
	nodes := make([]*MetaEvent, len(mecb.builders))
	mutators := make([]Mutator, len(mecb.builders))
	for i := range mecb.builders {
		func(i int, root context.Context) {
			builder := mecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetaEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mecb *MetaEventCreateBulk) SaveX(ctx context.Context) []*MetaEvent {
	v, err := mecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mecb *MetaEventCreateBulk) Exec(ctx context.Context) error {
	_, err := mecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mecb *MetaEventCreateBulk) ExecX(ctx context.Context) {
	if err := mecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MetaEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetaEventUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mecb *MetaEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *MetaEventUpsertBulk {
	mecb.conflict = opts
	return &MetaEventUpsertBulk{
		create: mecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mecb *MetaEventCreateBulk) OnConflictColumns(columns ...string) *MetaEventUpsertBulk {
	mecb.conflict = append(mecb.conflict, sql.ConflictColumns(columns...))
	return &MetaEventUpsertBulk{
		create: mecb,
	}
}

// MetaEventUpsertBulk is the builder for "upsert"-ing
// a bulk of MetaEvent nodes.
type MetaEventUpsertBulk struct {
	create *MetaEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(metaevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MetaEventUpsertBulk) UpdateNewValues() *MetaEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(metaevent.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(metaevent.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MetaEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MetaEventUpsertBulk) Ignore() *MetaEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetaEventUpsertBulk) DoNothing() *MetaEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetaEventCreateBulk.OnConflict
// documentation for more info.
func (u *MetaEventUpsertBulk) Update(set func(*MetaEventUpsert)) *MetaEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetaEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MetaEventUpsertBulk) SetUpdateTime(v int64) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MetaEventUpsertBulk) AddUpdateTime(v int64) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateUpdateTime() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MetaEventUpsertBulk) ClearUpdateTime() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MetaEventUpsertBulk) SetDeleteTime(v int64) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MetaEventUpsertBulk) AddDeleteTime(v int64) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateDeleteTime() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MetaEventUpsertBulk) ClearDeleteTime() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearDeleteTime()
	})
}

// SetEventName sets the "event_name" field.
func (u *MetaEventUpsertBulk) SetEventName(v string) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetEventName(v)
	})
}

// UpdateEventName sets the "event_name" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateEventName() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateEventName()
	})
}

// ClearEventName clears the value of the "event_name" field.
func (u *MetaEventUpsertBulk) ClearEventName() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearEventName()
	})
}

// SetShowName sets the "show_name" field.
func (u *MetaEventUpsertBulk) SetShowName(v string) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetShowName(v)
	})
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateShowName() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateShowName()
	})
}

// ClearShowName clears the value of the "show_name" field.
func (u *MetaEventUpsertBulk) ClearShowName() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearShowName()
	})
}

// SetAppID sets the "app_id" field.
func (u *MetaEventUpsertBulk) SetAppID(v uint32) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *MetaEventUpsertBulk) AddAppID(v uint32) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateAppID() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *MetaEventUpsertBulk) ClearAppID() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearAppID()
	})
}

// SetYesterdayCount sets the "yesterday_count" field.
func (u *MetaEventUpsertBulk) SetYesterdayCount(v uint32) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.SetYesterdayCount(v)
	})
}

// AddYesterdayCount adds v to the "yesterday_count" field.
func (u *MetaEventUpsertBulk) AddYesterdayCount(v uint32) *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.AddYesterdayCount(v)
	})
}

// UpdateYesterdayCount sets the "yesterday_count" field to the value that was provided on create.
func (u *MetaEventUpsertBulk) UpdateYesterdayCount() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.UpdateYesterdayCount()
	})
}

// ClearYesterdayCount clears the value of the "yesterday_count" field.
func (u *MetaEventUpsertBulk) ClearYesterdayCount() *MetaEventUpsertBulk {
	return u.Update(func(s *MetaEventUpsert) {
		s.ClearYesterdayCount()
	})
}

// Exec executes the query.
func (u *MetaEventUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MetaEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetaEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetaEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
