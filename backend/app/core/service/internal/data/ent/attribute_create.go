// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-uba/app/core/service/internal/data/ent/attribute"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeCreate is the builder for creating a Attribute entity.
type AttributeCreate struct {
	config
	mutation *AttributeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ac *AttributeCreate) SetCreateTime(t time.Time) *AttributeCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableCreateTime(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AttributeCreate) SetUpdateTime(t time.Time) *AttributeCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableUpdateTime(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetDeleteTime sets the "delete_time" field.
func (ac *AttributeCreate) SetDeleteTime(t time.Time) *AttributeCreate {
	ac.mutation.SetDeleteTime(t)
	return ac
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableDeleteTime(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetDeleteTime(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AttributeCreate) SetName(s string) *AttributeCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableName(s *string) *AttributeCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetShowName sets the "show_name" field.
func (ac *AttributeCreate) SetShowName(s string) *AttributeCreate {
	ac.mutation.SetShowName(s)
	return ac
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableShowName(s *string) *AttributeCreate {
	if s != nil {
		ac.SetShowName(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AttributeCreate) SetStatus(s string) *AttributeCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableStatus(s *string) *AttributeCreate {
	if s != nil {
		ac.SetStatus(*s)
	}
	return ac
}

// SetAttributeType sets the "attribute_type" field.
func (ac *AttributeCreate) SetAttributeType(u uint8) *AttributeCreate {
	ac.mutation.SetAttributeType(u)
	return ac
}

// SetNillableAttributeType sets the "attribute_type" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableAttributeType(u *uint8) *AttributeCreate {
	if u != nil {
		ac.SetAttributeType(*u)
	}
	return ac
}

// SetAttributeSource sets the "attribute_source" field.
func (ac *AttributeCreate) SetAttributeSource(u uint8) *AttributeCreate {
	ac.mutation.SetAttributeSource(u)
	return ac
}

// SetNillableAttributeSource sets the "attribute_source" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableAttributeSource(u *uint8) *AttributeCreate {
	if u != nil {
		ac.SetAttributeSource(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AttributeCreate) SetAppID(u uint32) *AttributeCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableAppID(u *uint32) *AttributeCreate {
	if u != nil {
		ac.SetAppID(*u)
	}
	return ac
}

// SetDataType sets the "data_type" field.
func (ac *AttributeCreate) SetDataType(s string) *AttributeCreate {
	ac.mutation.SetDataType(s)
	return ac
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableDataType(s *string) *AttributeCreate {
	if s != nil {
		ac.SetDataType(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttributeCreate) SetID(u uint32) *AttributeCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AttributeMutation object of the builder.
func (ac *AttributeCreate) Mutation() *AttributeMutation {
	return ac.mutation
}

// Save creates the Attribute in the database.
func (ac *AttributeCreate) Save(ctx context.Context) (*Attribute, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttributeCreate) SaveX(ctx context.Context) *Attribute {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttributeCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttributeCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttributeCreate) check() error {
	if v, ok := ac.mutation.Name(); ok {
		if err := attribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attribute.name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ShowName(); ok {
		if err := attribute.ShowNameValidator(v); err != nil {
			return &ValidationError{Name: "show_name", err: fmt.Errorf(`ent: validator failed for field "Attribute.show_name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ID(); ok {
		if err := attribute.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Attribute.id": %w`, err)}
		}
	}
	return nil
}

func (ac *AttributeCreate) sqlSave(ctx context.Context) (*Attribute, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttributeCreate) createSpec() (*Attribute, *sqlgraph.CreateSpec) {
	var (
		_node = &Attribute{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attribute.Table, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(attribute.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(attribute.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := ac.mutation.DeleteTime(); ok {
		_spec.SetField(attribute.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(attribute.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := ac.mutation.ShowName(); ok {
		_spec.SetField(attribute.FieldShowName, field.TypeString, value)
		_node.ShowName = &value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := ac.mutation.AttributeType(); ok {
		_spec.SetField(attribute.FieldAttributeType, field.TypeUint8, value)
		_node.AttributeType = &value
	}
	if value, ok := ac.mutation.AttributeSource(); ok {
		_spec.SetField(attribute.FieldAttributeSource, field.TypeUint8, value)
		_node.AttributeSource = &value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.SetField(attribute.FieldAppID, field.TypeUint32, value)
		_node.AppID = &value
	}
	if value, ok := ac.mutation.DataType(); ok {
		_spec.SetField(attribute.FieldDataType, field.TypeString, value)
		_node.DataType = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attribute.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ac *AttributeCreate) OnConflict(opts ...sql.ConflictOption) *AttributeUpsertOne {
	ac.conflict = opts
	return &AttributeUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AttributeCreate) OnConflictColumns(columns ...string) *AttributeUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AttributeUpsertOne{
		create: ac,
	}
}

type (
	// AttributeUpsertOne is the builder for "upsert"-ing
	//  one Attribute node.
	AttributeUpsertOne struct {
		create *AttributeCreate
	}

	// AttributeUpsert is the "OnConflict" setter.
	AttributeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *AttributeUpsert) SetUpdateTime(v time.Time) *AttributeUpsert {
	u.Set(attribute.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateUpdateTime() *AttributeUpsert {
	u.SetExcluded(attribute.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttributeUpsert) ClearUpdateTime() *AttributeUpsert {
	u.SetNull(attribute.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttributeUpsert) SetDeleteTime(v time.Time) *AttributeUpsert {
	u.Set(attribute.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateDeleteTime() *AttributeUpsert {
	u.SetExcluded(attribute.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttributeUpsert) ClearDeleteTime() *AttributeUpsert {
	u.SetNull(attribute.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *AttributeUpsert) SetName(v string) *AttributeUpsert {
	u.Set(attribute.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateName() *AttributeUpsert {
	u.SetExcluded(attribute.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AttributeUpsert) ClearName() *AttributeUpsert {
	u.SetNull(attribute.FieldName)
	return u
}

// SetShowName sets the "show_name" field.
func (u *AttributeUpsert) SetShowName(v string) *AttributeUpsert {
	u.Set(attribute.FieldShowName, v)
	return u
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateShowName() *AttributeUpsert {
	u.SetExcluded(attribute.FieldShowName)
	return u
}

// ClearShowName clears the value of the "show_name" field.
func (u *AttributeUpsert) ClearShowName() *AttributeUpsert {
	u.SetNull(attribute.FieldShowName)
	return u
}

// SetStatus sets the "status" field.
func (u *AttributeUpsert) SetStatus(v string) *AttributeUpsert {
	u.Set(attribute.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateStatus() *AttributeUpsert {
	u.SetExcluded(attribute.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AttributeUpsert) ClearStatus() *AttributeUpsert {
	u.SetNull(attribute.FieldStatus)
	return u
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeUpsert) SetAttributeType(v uint8) *AttributeUpsert {
	u.Set(attribute.FieldAttributeType, v)
	return u
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateAttributeType() *AttributeUpsert {
	u.SetExcluded(attribute.FieldAttributeType)
	return u
}

// AddAttributeType adds v to the "attribute_type" field.
func (u *AttributeUpsert) AddAttributeType(v uint8) *AttributeUpsert {
	u.Add(attribute.FieldAttributeType, v)
	return u
}

// ClearAttributeType clears the value of the "attribute_type" field.
func (u *AttributeUpsert) ClearAttributeType() *AttributeUpsert {
	u.SetNull(attribute.FieldAttributeType)
	return u
}

// SetAttributeSource sets the "attribute_source" field.
func (u *AttributeUpsert) SetAttributeSource(v uint8) *AttributeUpsert {
	u.Set(attribute.FieldAttributeSource, v)
	return u
}

// UpdateAttributeSource sets the "attribute_source" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateAttributeSource() *AttributeUpsert {
	u.SetExcluded(attribute.FieldAttributeSource)
	return u
}

// AddAttributeSource adds v to the "attribute_source" field.
func (u *AttributeUpsert) AddAttributeSource(v uint8) *AttributeUpsert {
	u.Add(attribute.FieldAttributeSource, v)
	return u
}

// ClearAttributeSource clears the value of the "attribute_source" field.
func (u *AttributeUpsert) ClearAttributeSource() *AttributeUpsert {
	u.SetNull(attribute.FieldAttributeSource)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AttributeUpsert) SetAppID(v uint32) *AttributeUpsert {
	u.Set(attribute.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateAppID() *AttributeUpsert {
	u.SetExcluded(attribute.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *AttributeUpsert) AddAppID(v uint32) *AttributeUpsert {
	u.Add(attribute.FieldAppID, v)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AttributeUpsert) ClearAppID() *AttributeUpsert {
	u.SetNull(attribute.FieldAppID)
	return u
}

// SetDataType sets the "data_type" field.
func (u *AttributeUpsert) SetDataType(v string) *AttributeUpsert {
	u.Set(attribute.FieldDataType, v)
	return u
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateDataType() *AttributeUpsert {
	u.SetExcluded(attribute.FieldDataType)
	return u
}

// ClearDataType clears the value of the "data_type" field.
func (u *AttributeUpsert) ClearDataType() *AttributeUpsert {
	u.SetNull(attribute.FieldDataType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeUpsertOne) UpdateNewValues() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attribute.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(attribute.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttributeUpsertOne) Ignore() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeUpsertOne) DoNothing() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeCreate.OnConflict
// documentation for more info.
func (u *AttributeUpsertOne) Update(set func(*AttributeUpsert)) *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AttributeUpsertOne) SetUpdateTime(v time.Time) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateUpdateTime() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttributeUpsertOne) ClearUpdateTime() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttributeUpsertOne) SetDeleteTime(v time.Time) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateDeleteTime() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttributeUpsertOne) ClearDeleteTime() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AttributeUpsertOne) SetName(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateName() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AttributeUpsertOne) ClearName() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearName()
	})
}

// SetShowName sets the "show_name" field.
func (u *AttributeUpsertOne) SetShowName(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetShowName(v)
	})
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateShowName() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateShowName()
	})
}

// ClearShowName clears the value of the "show_name" field.
func (u *AttributeUpsertOne) ClearShowName() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearShowName()
	})
}

// SetStatus sets the "status" field.
func (u *AttributeUpsertOne) SetStatus(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateStatus() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AttributeUpsertOne) ClearStatus() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearStatus()
	})
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeUpsertOne) SetAttributeType(v uint8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAttributeType(v)
	})
}

// AddAttributeType adds v to the "attribute_type" field.
func (u *AttributeUpsertOne) AddAttributeType(v uint8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAttributeType(v)
	})
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateAttributeType() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAttributeType()
	})
}

// ClearAttributeType clears the value of the "attribute_type" field.
func (u *AttributeUpsertOne) ClearAttributeType() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAttributeType()
	})
}

// SetAttributeSource sets the "attribute_source" field.
func (u *AttributeUpsertOne) SetAttributeSource(v uint8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAttributeSource(v)
	})
}

// AddAttributeSource adds v to the "attribute_source" field.
func (u *AttributeUpsertOne) AddAttributeSource(v uint8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAttributeSource(v)
	})
}

// UpdateAttributeSource sets the "attribute_source" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateAttributeSource() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAttributeSource()
	})
}

// ClearAttributeSource clears the value of the "attribute_source" field.
func (u *AttributeUpsertOne) ClearAttributeSource() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAttributeSource()
	})
}

// SetAppID sets the "app_id" field.
func (u *AttributeUpsertOne) SetAppID(v uint32) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AttributeUpsertOne) AddAppID(v uint32) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateAppID() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AttributeUpsertOne) ClearAppID() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAppID()
	})
}

// SetDataType sets the "data_type" field.
func (u *AttributeUpsertOne) SetDataType(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateDataType() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDataType()
	})
}

// ClearDataType clears the value of the "data_type" field.
func (u *AttributeUpsertOne) ClearDataType() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDataType()
	})
}

// Exec executes the query.
func (u *AttributeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttributeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttributeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttributeCreateBulk is the builder for creating many Attribute entities in bulk.
type AttributeCreateBulk struct {
	config
	err      error
	builders []*AttributeCreate
	conflict []sql.ConflictOption
}

// Save creates the Attribute entities in the database.
func (acb *AttributeCreateBulk) Save(ctx context.Context) ([]*Attribute, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attribute, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttributeCreateBulk) SaveX(ctx context.Context) []*Attribute {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttributeCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attribute.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (acb *AttributeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttributeUpsertBulk {
	acb.conflict = opts
	return &AttributeUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AttributeCreateBulk) OnConflictColumns(columns ...string) *AttributeUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AttributeUpsertBulk{
		create: acb,
	}
}

// AttributeUpsertBulk is the builder for "upsert"-ing
// a bulk of Attribute nodes.
type AttributeUpsertBulk struct {
	create *AttributeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeUpsertBulk) UpdateNewValues() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attribute.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(attribute.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttributeUpsertBulk) Ignore() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeUpsertBulk) DoNothing() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeCreateBulk.OnConflict
// documentation for more info.
func (u *AttributeUpsertBulk) Update(set func(*AttributeUpsert)) *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AttributeUpsertBulk) SetUpdateTime(v time.Time) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateUpdateTime() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttributeUpsertBulk) ClearUpdateTime() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttributeUpsertBulk) SetDeleteTime(v time.Time) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateDeleteTime() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttributeUpsertBulk) ClearDeleteTime() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AttributeUpsertBulk) SetName(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateName() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AttributeUpsertBulk) ClearName() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearName()
	})
}

// SetShowName sets the "show_name" field.
func (u *AttributeUpsertBulk) SetShowName(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetShowName(v)
	})
}

// UpdateShowName sets the "show_name" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateShowName() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateShowName()
	})
}

// ClearShowName clears the value of the "show_name" field.
func (u *AttributeUpsertBulk) ClearShowName() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearShowName()
	})
}

// SetStatus sets the "status" field.
func (u *AttributeUpsertBulk) SetStatus(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateStatus() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AttributeUpsertBulk) ClearStatus() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearStatus()
	})
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeUpsertBulk) SetAttributeType(v uint8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAttributeType(v)
	})
}

// AddAttributeType adds v to the "attribute_type" field.
func (u *AttributeUpsertBulk) AddAttributeType(v uint8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAttributeType(v)
	})
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateAttributeType() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAttributeType()
	})
}

// ClearAttributeType clears the value of the "attribute_type" field.
func (u *AttributeUpsertBulk) ClearAttributeType() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAttributeType()
	})
}

// SetAttributeSource sets the "attribute_source" field.
func (u *AttributeUpsertBulk) SetAttributeSource(v uint8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAttributeSource(v)
	})
}

// AddAttributeSource adds v to the "attribute_source" field.
func (u *AttributeUpsertBulk) AddAttributeSource(v uint8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAttributeSource(v)
	})
}

// UpdateAttributeSource sets the "attribute_source" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateAttributeSource() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAttributeSource()
	})
}

// ClearAttributeSource clears the value of the "attribute_source" field.
func (u *AttributeUpsertBulk) ClearAttributeSource() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAttributeSource()
	})
}

// SetAppID sets the "app_id" field.
func (u *AttributeUpsertBulk) SetAppID(v uint32) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AttributeUpsertBulk) AddAppID(v uint32) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateAppID() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AttributeUpsertBulk) ClearAppID() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearAppID()
	})
}

// SetDataType sets the "data_type" field.
func (u *AttributeUpsertBulk) SetDataType(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateDataType() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDataType()
	})
}

// ClearDataType clears the value of the "data_type" field.
func (u *AttributeUpsertBulk) ClearDataType() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDataType()
	})
}

// Exec executes the query.
func (u *AttributeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttributeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
