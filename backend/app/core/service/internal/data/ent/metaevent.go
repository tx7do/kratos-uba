// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-bi/app/core/service/internal/data/ent/metaevent"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MetaEvent is the model entity for the MetaEvent schema.
type MetaEvent struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *int64 `json:"delete_time,omitempty"`
	// 事件名
	EventName *string `json:"event_name,omitempty"`
	// 显示名称
	ShowName *string `json:"show_name,omitempty"`
	// 应用ID
	AppID *uint32 `json:"app_id,omitempty"`
	// 计数
	YesterdayCount *uint32 `json:"yesterday_count,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetaEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metaevent.FieldID, metaevent.FieldCreateTime, metaevent.FieldUpdateTime, metaevent.FieldDeleteTime, metaevent.FieldAppID, metaevent.FieldYesterdayCount:
			values[i] = new(sql.NullInt64)
		case metaevent.FieldEventName, metaevent.FieldShowName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetaEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetaEvent fields.
func (me *MetaEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metaevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			me.ID = uint32(value.Int64)
		case metaevent.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				me.CreateTime = new(int64)
				*me.CreateTime = value.Int64
			}
		case metaevent.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				me.UpdateTime = new(int64)
				*me.UpdateTime = value.Int64
			}
		case metaevent.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				me.DeleteTime = new(int64)
				*me.DeleteTime = value.Int64
			}
		case metaevent.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				me.EventName = new(string)
				*me.EventName = value.String
			}
		case metaevent.FieldShowName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_name", values[i])
			} else if value.Valid {
				me.ShowName = new(string)
				*me.ShowName = value.String
			}
		case metaevent.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				me.AppID = new(uint32)
				*me.AppID = uint32(value.Int64)
			}
		case metaevent.FieldYesterdayCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yesterday_count", values[i])
			} else if value.Valid {
				me.YesterdayCount = new(uint32)
				*me.YesterdayCount = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MetaEvent.
// Note that you need to call MetaEvent.Unwrap() before calling this method if this MetaEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (me *MetaEvent) Update() *MetaEventUpdateOne {
	return NewMetaEventClient(me.config).UpdateOne(me)
}

// Unwrap unwraps the MetaEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (me *MetaEvent) Unwrap() *MetaEvent {
	_tx, ok := me.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetaEvent is not a transactional entity")
	}
	me.config.driver = _tx.drv
	return me
}

// String implements the fmt.Stringer.
func (me *MetaEvent) String() string {
	var builder strings.Builder
	builder.WriteString("MetaEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", me.ID))
	if v := me.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := me.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := me.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := me.EventName; v != nil {
		builder.WriteString("event_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := me.ShowName; v != nil {
		builder.WriteString("show_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := me.AppID; v != nil {
		builder.WriteString("app_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := me.YesterdayCount; v != nil {
		builder.WriteString("yesterday_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MetaEvents is a parsable slice of MetaEvent.
type MetaEvents []*MetaEvent
