// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-uba/app/core/service/internal/data/ent/debugdevice"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// DebugDevice is the model entity for the DebugDevice schema.
type DebugDevice struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *int64 `json:"delete_time,omitempty"`
	// 设备ID
	DeviceID *string `json:"device_id,omitempty"`
	// 应用ID
	AppID *uint32 `json:"app_id,omitempty"`
	// 创建者ID
	CreatorID *uint32 `json:"creator_id,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DebugDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case debugdevice.FieldID, debugdevice.FieldCreateTime, debugdevice.FieldUpdateTime, debugdevice.FieldDeleteTime, debugdevice.FieldAppID, debugdevice.FieldCreatorID:
			values[i] = new(sql.NullInt64)
		case debugdevice.FieldDeviceID, debugdevice.FieldRemark:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DebugDevice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DebugDevice fields.
func (dd *DebugDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case debugdevice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dd.ID = uint32(value.Int64)
		case debugdevice.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dd.CreateTime = new(int64)
				*dd.CreateTime = value.Int64
			}
		case debugdevice.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dd.UpdateTime = new(int64)
				*dd.UpdateTime = value.Int64
			}
		case debugdevice.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				dd.DeleteTime = new(int64)
				*dd.DeleteTime = value.Int64
			}
		case debugdevice.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				dd.DeviceID = new(string)
				*dd.DeviceID = value.String
			}
		case debugdevice.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				dd.AppID = new(uint32)
				*dd.AppID = uint32(value.Int64)
			}
		case debugdevice.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				dd.CreatorID = new(uint32)
				*dd.CreatorID = uint32(value.Int64)
			}
		case debugdevice.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				dd.Remark = new(string)
				*dd.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DebugDevice.
// Note that you need to call DebugDevice.Unwrap() before calling this method if this DebugDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (dd *DebugDevice) Update() *DebugDeviceUpdateOne {
	return NewDebugDeviceClient(dd.config).UpdateOne(dd)
}

// Unwrap unwraps the DebugDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dd *DebugDevice) Unwrap() *DebugDevice {
	_tx, ok := dd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DebugDevice is not a transactional entity")
	}
	dd.config.driver = _tx.drv
	return dd
}

// String implements the fmt.Stringer.
func (dd *DebugDevice) String() string {
	var builder strings.Builder
	builder.WriteString("DebugDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dd.ID))
	if v := dd.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dd.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dd.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dd.DeviceID; v != nil {
		builder.WriteString("device_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dd.AppID; v != nil {
		builder.WriteString("app_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dd.CreatorID; v != nil {
		builder.WriteString("creator_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dd.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// DebugDevices is a parsable slice of DebugDevice.
type DebugDevices []*DebugDevice
