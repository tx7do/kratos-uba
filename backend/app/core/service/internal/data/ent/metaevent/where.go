// Code generated by ent, DO NOT EDIT.

package metaevent

import (
	"kratos-bi/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldDeleteTime, v))
}

// EventName applies equality check predicate on the "event_name" field. It's identical to EventNameEQ.
func EventName(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventName, v))
}

// ShowName applies equality check predicate on the "show_name" field. It's identical to ShowNameEQ.
func ShowName(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldShowName, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldAppID, v))
}

// YesterdayCount applies equality check predicate on the "yesterday_count" field. It's identical to YesterdayCountEQ.
func YesterdayCount(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldYesterdayCount, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldUpdateTime))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldDeleteTime))
}

// EventNameEQ applies the EQ predicate on the "event_name" field.
func EventNameEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventName, v))
}

// EventNameNEQ applies the NEQ predicate on the "event_name" field.
func EventNameNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldEventName, v))
}

// EventNameIn applies the In predicate on the "event_name" field.
func EventNameIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldEventName, vs...))
}

// EventNameNotIn applies the NotIn predicate on the "event_name" field.
func EventNameNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldEventName, vs...))
}

// EventNameGT applies the GT predicate on the "event_name" field.
func EventNameGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldEventName, v))
}

// EventNameGTE applies the GTE predicate on the "event_name" field.
func EventNameGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldEventName, v))
}

// EventNameLT applies the LT predicate on the "event_name" field.
func EventNameLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldEventName, v))
}

// EventNameLTE applies the LTE predicate on the "event_name" field.
func EventNameLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldEventName, v))
}

// EventNameContains applies the Contains predicate on the "event_name" field.
func EventNameContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldEventName, v))
}

// EventNameHasPrefix applies the HasPrefix predicate on the "event_name" field.
func EventNameHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldEventName, v))
}

// EventNameHasSuffix applies the HasSuffix predicate on the "event_name" field.
func EventNameHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldEventName, v))
}

// EventNameIsNil applies the IsNil predicate on the "event_name" field.
func EventNameIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldEventName))
}

// EventNameNotNil applies the NotNil predicate on the "event_name" field.
func EventNameNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldEventName))
}

// EventNameEqualFold applies the EqualFold predicate on the "event_name" field.
func EventNameEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldEventName, v))
}

// EventNameContainsFold applies the ContainsFold predicate on the "event_name" field.
func EventNameContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldEventName, v))
}

// ShowNameEQ applies the EQ predicate on the "show_name" field.
func ShowNameEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldShowName, v))
}

// ShowNameNEQ applies the NEQ predicate on the "show_name" field.
func ShowNameNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldShowName, v))
}

// ShowNameIn applies the In predicate on the "show_name" field.
func ShowNameIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldShowName, vs...))
}

// ShowNameNotIn applies the NotIn predicate on the "show_name" field.
func ShowNameNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldShowName, vs...))
}

// ShowNameGT applies the GT predicate on the "show_name" field.
func ShowNameGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldShowName, v))
}

// ShowNameGTE applies the GTE predicate on the "show_name" field.
func ShowNameGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldShowName, v))
}

// ShowNameLT applies the LT predicate on the "show_name" field.
func ShowNameLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldShowName, v))
}

// ShowNameLTE applies the LTE predicate on the "show_name" field.
func ShowNameLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldShowName, v))
}

// ShowNameContains applies the Contains predicate on the "show_name" field.
func ShowNameContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldShowName, v))
}

// ShowNameHasPrefix applies the HasPrefix predicate on the "show_name" field.
func ShowNameHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldShowName, v))
}

// ShowNameHasSuffix applies the HasSuffix predicate on the "show_name" field.
func ShowNameHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldShowName, v))
}

// ShowNameIsNil applies the IsNil predicate on the "show_name" field.
func ShowNameIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldShowName))
}

// ShowNameNotNil applies the NotNil predicate on the "show_name" field.
func ShowNameNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldShowName))
}

// ShowNameEqualFold applies the EqualFold predicate on the "show_name" field.
func ShowNameEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldShowName, v))
}

// ShowNameContainsFold applies the ContainsFold predicate on the "show_name" field.
func ShowNameContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldShowName, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldAppID))
}

// YesterdayCountEQ applies the EQ predicate on the "yesterday_count" field.
func YesterdayCountEQ(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldYesterdayCount, v))
}

// YesterdayCountNEQ applies the NEQ predicate on the "yesterday_count" field.
func YesterdayCountNEQ(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldYesterdayCount, v))
}

// YesterdayCountIn applies the In predicate on the "yesterday_count" field.
func YesterdayCountIn(vs ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldYesterdayCount, vs...))
}

// YesterdayCountNotIn applies the NotIn predicate on the "yesterday_count" field.
func YesterdayCountNotIn(vs ...uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldYesterdayCount, vs...))
}

// YesterdayCountGT applies the GT predicate on the "yesterday_count" field.
func YesterdayCountGT(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldYesterdayCount, v))
}

// YesterdayCountGTE applies the GTE predicate on the "yesterday_count" field.
func YesterdayCountGTE(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldYesterdayCount, v))
}

// YesterdayCountLT applies the LT predicate on the "yesterday_count" field.
func YesterdayCountLT(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldYesterdayCount, v))
}

// YesterdayCountLTE applies the LTE predicate on the "yesterday_count" field.
func YesterdayCountLTE(v uint32) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldYesterdayCount, v))
}

// YesterdayCountIsNil applies the IsNil predicate on the "yesterday_count" field.
func YesterdayCountIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldYesterdayCount))
}

// YesterdayCountNotNil applies the NotNil predicate on the "yesterday_count" field.
func YesterdayCountNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldYesterdayCount))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
