// Code generated by ent, DO NOT EDIT.

package metaevent

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the metaevent type in the database.
	Label = "meta_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldEventName holds the string denoting the event_name field in the database.
	FieldEventName = "event_name"
	// FieldShowName holds the string denoting the show_name field in the database.
	FieldShowName = "show_name"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldYesterdayCount holds the string denoting the yesterday_count field in the database.
	FieldYesterdayCount = "yesterday_count"
	// Table holds the table name of the metaevent in the database.
	Table = "meta_event"
)

// Columns holds all SQL columns for metaevent fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldEventName,
	FieldShowName,
	FieldAppID,
	FieldYesterdayCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EventNameValidator is a validator for the "event_name" field. It is called by the builders before save.
	EventNameValidator func(string) error
	// ShowNameValidator is a validator for the "show_name" field. It is called by the builders before save.
	ShowNameValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint32) error
)

// OrderOption defines the ordering options for the MetaEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByEventName orders the results by the event_name field.
func ByEventName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventName, opts...).ToFunc()
}

// ByShowName orders the results by the show_name field.
func ByShowName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowName, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByYesterdayCount orders the results by the yesterday_count field.
func ByYesterdayCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYesterdayCount, opts...).ToFunc()
}
