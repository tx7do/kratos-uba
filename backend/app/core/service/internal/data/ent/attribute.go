// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-bi/app/core/service/internal/data/ent/attribute"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Attribute is the model entity for the Attribute schema.
type Attribute struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *int64 `json:"delete_time,omitempty"`
	// 属性的名称
	Name *string `json:"name,omitempty"`
	// 展示的名称
	ShowName *string `json:"show_name,omitempty"`
	// 属性状态
	Status *string `json:"status,omitempty"`
	// 属性类型
	AttributeType *uint8 `json:"attribute_type,omitempty"`
	// 属性源
	AttributeSource *uint8 `json:"attribute_source,omitempty"`
	// 应用ID
	AppID *uint32 `json:"app_id,omitempty"`
	// 数据类型
	DataType *string `json:"data_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attribute.FieldID, attribute.FieldCreateTime, attribute.FieldUpdateTime, attribute.FieldDeleteTime, attribute.FieldAttributeType, attribute.FieldAttributeSource, attribute.FieldAppID:
			values[i] = new(sql.NullInt64)
		case attribute.FieldName, attribute.FieldShowName, attribute.FieldStatus, attribute.FieldDataType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attribute", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attribute fields.
func (a *Attribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint32(value.Int64)
		case attribute.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = new(int64)
				*a.CreateTime = value.Int64
			}
		case attribute.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = new(int64)
				*a.UpdateTime = value.Int64
			}
		case attribute.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = new(int64)
				*a.DeleteTime = value.Int64
			}
		case attribute.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = new(string)
				*a.Name = value.String
			}
		case attribute.FieldShowName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_name", values[i])
			} else if value.Valid {
				a.ShowName = new(string)
				*a.ShowName = value.String
			}
		case attribute.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = new(string)
				*a.Status = value.String
			}
		case attribute.FieldAttributeType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_type", values[i])
			} else if value.Valid {
				a.AttributeType = new(uint8)
				*a.AttributeType = uint8(value.Int64)
			}
		case attribute.FieldAttributeSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_source", values[i])
			} else if value.Valid {
				a.AttributeSource = new(uint8)
				*a.AttributeSource = uint8(value.Int64)
			}
		case attribute.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				a.AppID = new(uint32)
				*a.AppID = uint32(value.Int64)
			}
		case attribute.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				a.DataType = new(string)
				*a.DataType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Attribute.
// Note that you need to call Attribute.Unwrap() before calling this method if this Attribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attribute) Update() *AttributeUpdateOne {
	return NewAttributeClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attribute) Unwrap() *Attribute {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attribute is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attribute) String() string {
	var builder strings.Builder
	builder.WriteString("Attribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	if v := a.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.ShowName; v != nil {
		builder.WriteString("show_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.AttributeType; v != nil {
		builder.WriteString("attribute_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.AttributeSource; v != nil {
		builder.WriteString("attribute_source=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.AppID; v != nil {
		builder.WriteString("app_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DataType; v != nil {
		builder.WriteString("data_type=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Attributes is a parsable slice of Attribute.
type Attributes []*Attribute
