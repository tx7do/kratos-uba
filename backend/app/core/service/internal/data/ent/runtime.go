// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-bi/app/core/service/internal/data/ent/application"
	"kratos-bi/app/core/service/internal/data/ent/schema"
	"kratos-bi/app/core/service/internal/data/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	applicationMixin := schema.Application{}.Mixin()
	applicationMixinFields0 := applicationMixin[0].Fields()
	_ = applicationMixinFields0
	applicationMixinFields1 := applicationMixin[1].Fields()
	_ = applicationMixinFields1
	applicationFields := schema.Application{}.Fields()
	_ = applicationFields
	// applicationDescCreateTime is the schema descriptor for create_time field.
	applicationDescCreateTime := applicationMixinFields1[0].Descriptor()
	// application.DefaultCreateTime holds the default value on creation for the create_time field.
	application.DefaultCreateTime = applicationDescCreateTime.Default.(func() int64)
	// applicationDescUpdateTime is the schema descriptor for update_time field.
	applicationDescUpdateTime := applicationMixinFields1[1].Descriptor()
	// application.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	application.UpdateDefaultUpdateTime = applicationDescUpdateTime.UpdateDefault.(func() int64)
	// applicationDescName is the schema descriptor for name field.
	applicationDescName := applicationFields[0].Descriptor()
	// application.NameValidator is a validator for the "name" field. It is called by the builders before save.
	application.NameValidator = applicationDescName.Validators[0].(func(string) error)
	// applicationDescID is the schema descriptor for id field.
	applicationDescID := applicationMixinFields0[0].Descriptor()
	// application.IDValidator is a validator for the "id" field. It is called by the builders before save.
	application.IDValidator = applicationDescID.Validators[0].(func(uint32) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields1[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() int64)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[1].Descriptor()
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() int64)
	// userDescUserName is the schema descriptor for user_name field.
	userDescUserName := userFields[0].Descriptor()
	// user.UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	user.UserNameValidator = func() func(string) error {
		validators := userDescUserName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(user_name string) error {
			for _, fn := range fns {
				if err := fn(user_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[2].Descriptor()
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = userDescNickName.Validators[0].(func(string) error)
	// userDescRealName is the schema descriptor for real_name field.
	userDescRealName := userFields[3].Descriptor()
	// user.RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	user.RealNameValidator = userDescRealName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[5].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescAvatar is the schema descriptor for avatar field.
	userDescAvatar := userFields[6].Descriptor()
	// user.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	user.AvatarValidator = userDescAvatar.Validators[0].(func(string) error)
	// userDescDescription is the schema descriptor for description field.
	userDescDescription := userFields[7].Descriptor()
	// user.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	user.DescriptionValidator = userDescDescription.Validators[0].(func(string) error)
	// userDescRoleID is the schema descriptor for role_id field.
	userDescRoleID := userFields[8].Descriptor()
	// user.DefaultRoleID holds the default value on creation for the role_id field.
	user.DefaultRoleID = userDescRoleID.Default.(uint32)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(uint32) error)
}
